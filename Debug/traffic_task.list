
traffic_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000961c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08009730  08009730  0000a730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c0c  08009c0c  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c0c  08009c0c  0000ac0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c14  08009c14  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c14  08009c14  0000ac14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c18  08009c18  0000ac18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009c1c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200001d8  08009df4  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08009df4  0000b478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6fd  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ca  00000000  00000000  000178fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00019ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e5  00000000  00000000  0001abc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197c5  00000000  00000000  0001b5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f88e  00000000  00000000  00034d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f609  00000000  00000000  00044600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3c09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000493c  00000000  00000000  000d3c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d8588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009714 	.word	0x08009714

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08009714 	.word	0x08009714

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <HAL_GPIO_EXTI_Callback>:
static volatile float volt = 0;
static volatile uint8_t raw_4bit;
char volt_str[16];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == EMERGENCY_BUTTON_Pin)
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d107      	bne.n	8000bf4 <HAL_GPIO_EXTI_Callback+0x20>
    {
    	emergencyButton ^= 1;
 8000be4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x40>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f083 0301 	eor.w	r3, r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x40>)
 8000bf2:	701a      	strb	r2, [r3, #0]
    }
    if(GPIO_Pin == STOP_BUTTON_Pin)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d107      	bne.n	8000c0a <HAL_GPIO_EXTI_Callback+0x36>
        stopButton ^= 1;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <HAL_GPIO_EXTI_Callback+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	f083 0301 	eor.w	r3, r3, #1
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c08:	701a      	strb	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000000 	.word	0x20000000
 8000c18:	200001f4 	.word	0x200001f4
 8000c1c:	00000000 	.word	0x00000000

08000c20 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000c98 <HAL_ADC_ConvCpltCallback+0x78>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d125      	bne.n	8000c7e <HAL_ADC_ConvCpltCallback+0x5e>
    	uint16_t raw = HAL_ADC_GetValue(hadc);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f001 f876 	bl	8001d24 <HAL_ADC_GetValue>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	81fb      	strh	r3, [r7, #14]
        volt = (3.3 * raw) / 4095;
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fbe0 	bl	8000404 <__aeabi_i2d>
 8000c44:	a310      	add	r3, pc, #64	@ (adr r3, 8000c88 <HAL_ADC_ConvCpltCallback+0x68>)
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	f7ff fc45 	bl	80004d8 <__aeabi_dmul>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4610      	mov	r0, r2
 8000c54:	4619      	mov	r1, r3
 8000c56:	a30e      	add	r3, pc, #56	@ (adr r3, 8000c90 <HAL_ADC_ConvCpltCallback+0x70>)
 8000c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5c:	f7ff fd66 	bl	800072c <__aeabi_ddiv>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	4610      	mov	r0, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	f7ff ff2e 	bl	8000ac8 <__aeabi_d2f>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c9c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c70:	6013      	str	r3, [r2, #0]
        raw_4bit = raw / 256;
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000c7c:	701a      	strb	r2, [r3, #0]
    }
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	66666666 	.word	0x66666666
 8000c8c:	400a6666 	.word	0x400a6666
 8000c90:	00000000 	.word	0x00000000
 8000c94:	40affe00 	.word	0x40affe00
 8000c98:	40012400 	.word	0x40012400
 8000c9c:	20000200 	.word	0x20000200
 8000ca0:	20000204 	.word	0x20000204

08000ca4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb4:	f040 80b8 	bne.w	8000e28 <HAL_TIM_PeriodElapsedCallback+0x184>
    {
        static uint8_t tickCount = 0;

        if(stopButton)
 8000cb8:	4b5d      	ldr	r3, [pc, #372]	@ (8000e30 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d049      	beq.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0xb2>
        {
			// keep your LCD code as it is
			sprintf(volt_str, "%0.2fV", volt);
 8000cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8000e34 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fbae 	bl	8000428 <__aeabi_f2d>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4959      	ldr	r1, [pc, #356]	@ (8000e38 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000cd2:	485a      	ldr	r0, [pc, #360]	@ (8000e3c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000cd4:	f005 f8ea 	bl	8005eac <siprintf>
			ECUAL_LCD_4BitModeSetCursor(0, 1);
 8000cd8:	2101      	movs	r1, #1
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f004 f9a6 	bl	800502c <ECUAL_LCD_4BitModeSetCursor>
			ECUAL_LCD_4BitModeWriteString("   ");
 8000ce0:	4857      	ldr	r0, [pc, #348]	@ (8000e40 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000ce2:	f004 f987 	bl	8004ff4 <ECUAL_LCD_4BitModeWriteString>
			ECUAL_LCD_4BitModeSetCursor(0, 1);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f004 f99f 	bl	800502c <ECUAL_LCD_4BitModeSetCursor>
			ECUAL_LCD_4BitModeWriteString(volt_str);
 8000cee:	4853      	ldr	r0, [pc, #332]	@ (8000e3c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000cf0:	f004 f980 	bl	8004ff4 <ECUAL_LCD_4BitModeWriteString>

			// drive raw_4bit outputs
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, raw_4bit & 0b0001);
 8000cf4:	4b53      	ldr	r3, [pc, #332]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d06:	4850      	ldr	r0, [pc, #320]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d08:	f002 f824 	bl	8002d54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, raw_4bit & 0b0010);
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d1e:	484a      	ldr	r0, [pc, #296]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d20:	f002 f818 	bl	8002d54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, raw_4bit & 0b0100);
 8000d24:	4b47      	ldr	r3, [pc, #284]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d36:	4844      	ldr	r0, [pc, #272]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d38:	f002 f80c 	bl	8002d54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, raw_4bit & 0b1000);
 8000d3c:	4b41      	ldr	r3, [pc, #260]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d4e:	483e      	ldr	r0, [pc, #248]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d50:	f002 f800 	bl	8002d54 <HAL_GPIO_WritePin>
 8000d54:	e01e      	b.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0xf0>
        }
        else
        {
			ECUAL_LCD_4BitModeSetCursor(0, 1);
 8000d56:	2101      	movs	r1, #1
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f004 f967 	bl	800502c <ECUAL_LCD_4BitModeSetCursor>
			ECUAL_LCD_4BitModeWriteString("    ");
 8000d5e:	483b      	ldr	r0, [pc, #236]	@ (8000e4c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000d60:	f004 f948 	bl	8004ff4 <ECUAL_LCD_4BitModeWriteString>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6a:	4837      	ldr	r0, [pc, #220]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d6c:	f001 fff2 	bl	8002d54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d76:	4834      	ldr	r0, [pc, #208]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d78:	f001 ffec 	bl	8002d54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d82:	4831      	ldr	r0, [pc, #196]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d84:	f001 ffe6 	bl	8002d54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d8e:	482e      	ldr	r0, [pc, #184]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d90:	f001 ffe0 	bl	8002d54 <HAL_GPIO_WritePin>
        }

        // LED logic only if ON + EMERGENCY = 1
        if(stopButton && emergencyButton)
 8000d94:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d040      	beq.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d03b      	beq.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x17c>
        {
            // Blink current LED every 500ms
            switch (lightState)
 8000da8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d012      	beq.n	8000dd8 <HAL_TIM_PeriodElapsedCallback+0x134>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	dc16      	bgt.n	8000de4 <HAL_TIM_PeriodElapsedCallback+0x140>
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d006      	beq.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0x128>
 8000dbe:	e011      	b.n	8000de4 <HAL_TIM_PeriodElapsedCallback+0x140>
            {
            case 0: HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12); break; // RED
 8000dc0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dc4:	4824      	ldr	r0, [pc, #144]	@ (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000dc6:	f001 ffdd 	bl	8002d84 <HAL_GPIO_TogglePin>
 8000dca:	e00b      	b.n	8000de4 <HAL_TIM_PeriodElapsedCallback+0x140>
            case 1: HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); break; // ORANGE
 8000dcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd0:	4821      	ldr	r0, [pc, #132]	@ (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000dd2:	f001 ffd7 	bl	8002d84 <HAL_GPIO_TogglePin>
 8000dd6:	e005      	b.n	8000de4 <HAL_TIM_PeriodElapsedCallback+0x140>
            case 2: HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); break; // GREEN
 8000dd8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ddc:	481e      	ldr	r0, [pc, #120]	@ (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000dde:	f001 ffd1 	bl	8002d84 <HAL_GPIO_TogglePin>
 8000de2:	bf00      	nop
            }

            // after 2s (4×500ms) → next LED
            tickCount++;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000dee:	701a      	strb	r2, [r3, #0]
            if(tickCount >= 8)
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b07      	cmp	r3, #7
 8000df6:	d917      	bls.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0x184>
            {
                tickCount = 0;
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
                lightState = (lightState + 1) % 3;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e08:	fb83 3102 	smull	r3, r1, r3, r2
 8000e0c:	17d3      	asrs	r3, r2, #31
 8000e0e:	1ac9      	subs	r1, r1, r3
 8000e10:	460b      	mov	r3, r1
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	440b      	add	r3, r1
 8000e16:	1ad1      	subs	r1, r2, r3
 8000e18:	b2ca      	uxtb	r2, r1
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e1c:	701a      	strb	r2, [r3, #0]
            if(tickCount >= 8)
 8000e1e:	e003      	b.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0x184>
            }
        }
        else
        {
            // do nothing → other code decides LED state
            tickCount = 0;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000e26:	e7ff      	b.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0x184>
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200001f4 	.word	0x200001f4
 8000e34:	20000200 	.word	0x20000200
 8000e38:	08009730 	.word	0x08009730
 8000e3c:	20000208 	.word	0x20000208
 8000e40:	08009738 	.word	0x08009738
 8000e44:	20000204 	.word	0x20000204
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	0800973c 	.word	0x0800973c
 8000e50:	20000000 	.word	0x20000000
 8000e54:	200001fc 	.word	0x200001fc
 8000e58:	40010c00 	.word	0x40010c00
 8000e5c:	20000218 	.word	0x20000218
 8000e60:	55555556 	.word	0x55555556

08000e64 <App_TrafficLights>:


traffic_light_status_e App_TrafficLights(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
    static traffic_light_status_e ret = TRAFFIC_OFF;
    uint32_t now = HAL_GetTick();
 8000e6a:	f000 fd9b 	bl	80019a4 <HAL_GetTick>
 8000e6e:	6078      	str	r0, [r7, #4]

    if(stopButton)
 8000e70:	4b4a      	ldr	r3, [pc, #296]	@ (8000f9c <App_TrafficLights+0x138>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d069      	beq.n	8000f4e <App_TrafficLights+0xea>
    {
        ret = TRAFFIC_ON;
 8000e7a:	4b49      	ldr	r3, [pc, #292]	@ (8000fa0 <App_TrafficLights+0x13c>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
        {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, lightState == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, lightState == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, lightState == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
        }*/
        if(0 == emergencyButton)
 8000e80:	4b48      	ldr	r3, [pc, #288]	@ (8000fa4 <App_TrafficLights+0x140>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d114      	bne.n	8000eb4 <App_TrafficLights+0x50>
        {
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e90:	4845      	ldr	r0, [pc, #276]	@ (8000fa8 <App_TrafficLights+0x144>)
 8000e92:	f001 ff5f 	bl	8002d54 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e9c:	4842      	ldr	r0, [pc, #264]	@ (8000fa8 <App_TrafficLights+0x144>)
 8000e9e:	f001 ff59 	bl	8002d54 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ea8:	483f      	ldr	r0, [pc, #252]	@ (8000fa8 <App_TrafficLights+0x144>)
 8000eaa:	f001 ff53 	bl	8002d54 <HAL_GPIO_WritePin>
        	lastTick = now;
 8000eae:	4a3f      	ldr	r2, [pc, #252]	@ (8000fac <App_TrafficLights+0x148>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6013      	str	r3, [r2, #0]
        }

    	if(oldEmergencyState != emergencyButton || oldStopState != stopButton)
 8000eb4:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb0 <App_TrafficLights+0x14c>)
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8000fa4 <App_TrafficLights+0x140>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d106      	bne.n	8000ed0 <App_TrafficLights+0x6c>
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fb4 <App_TrafficLights+0x150>)
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	4b35      	ldr	r3, [pc, #212]	@ (8000f9c <App_TrafficLights+0x138>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d05e      	beq.n	8000f8e <App_TrafficLights+0x12a>
    	{
            if(1 == emergencyButton)
 8000ed0:	4b34      	ldr	r3, [pc, #208]	@ (8000fa4 <App_TrafficLights+0x140>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d11d      	bne.n	8000f16 <App_TrafficLights+0xb2>
            {
            	ECUAL_LCD_4BitModeClear();
 8000eda:	f004 f853 	bl	8004f84 <ECUAL_LCD_4BitModeClear>
            	ECUAL_LCD_4BitModeWriteString("TRAFFIC: RUNNING");
 8000ede:	4836      	ldr	r0, [pc, #216]	@ (8000fb8 <App_TrafficLights+0x154>)
 8000ee0:	f004 f888 	bl	8004ff4 <ECUAL_LCD_4BitModeWriteString>
            	TIM3->CCR1 = (TIM3->ARR +1) / 2;
 8000ee4:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <App_TrafficLights+0x158>)
 8000ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a34      	ldr	r2, [pc, #208]	@ (8000fbc <App_TrafficLights+0x158>)
 8000eec:	085b      	lsrs	r3, r3, #1
 8000eee:	6353      	str	r3, [r2, #52]	@ 0x34
            	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef6:	482c      	ldr	r0, [pc, #176]	@ (8000fa8 <App_TrafficLights+0x144>)
 8000ef8:	f001 ff2c 	bl	8002d54 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f02:	4829      	ldr	r0, [pc, #164]	@ (8000fa8 <App_TrafficLights+0x144>)
 8000f04:	f001 ff26 	bl	8002d54 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f0e:	4826      	ldr	r0, [pc, #152]	@ (8000fa8 <App_TrafficLights+0x144>)
 8000f10:	f001 ff20 	bl	8002d54 <HAL_GPIO_WritePin>
 8000f14:	e012      	b.n	8000f3c <App_TrafficLights+0xd8>
            }
            else if(0 == emergencyButton)
 8000f16:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <App_TrafficLights+0x140>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10d      	bne.n	8000f3c <App_TrafficLights+0xd8>
            {
            	ECUAL_LCD_4BitModeClear();
 8000f20:	f004 f830 	bl	8004f84 <ECUAL_LCD_4BitModeClear>
            	ECUAL_LCD_4BitModeWriteString("EMERGENCY");
 8000f24:	4826      	ldr	r0, [pc, #152]	@ (8000fc0 <App_TrafficLights+0x15c>)
 8000f26:	f004 f865 	bl	8004ff4 <ECUAL_LCD_4BitModeWriteString>
            	TIM3->CCR1 = 3*(TIM3->ARR +1) / 4;
 8000f2a:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <App_TrafficLights+0x158>)
 8000f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	4a21      	ldr	r2, [pc, #132]	@ (8000fbc <App_TrafficLights+0x158>)
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	6353      	str	r3, [r2, #52]	@ 0x34
            }
            oldEmergencyState = emergencyButton;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <App_TrafficLights+0x140>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <App_TrafficLights+0x14c>)
 8000f44:	701a      	strb	r2, [r3, #0]
            oldStopState = 1;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <App_TrafficLights+0x150>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e01f      	b.n	8000f8e <App_TrafficLights+0x12a>
    	}
    }
    else
    {
    	if(oldStopState != stopButton)
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <App_TrafficLights+0x150>)
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <App_TrafficLights+0x138>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d012      	beq.n	8000f82 <App_TrafficLights+0x11e>
    	{
    		ECUAL_LCD_4BitModeClear();
 8000f5c:	f004 f812 	bl	8004f84 <ECUAL_LCD_4BitModeClear>
    		ECUAL_LCD_4BitModeWriteString("TRAFFIC: STOPPED");
 8000f60:	4818      	ldr	r0, [pc, #96]	@ (8000fc4 <App_TrafficLights+0x160>)
 8000f62:	f004 f847 	bl	8004ff4 <ECUAL_LCD_4BitModeWriteString>
        	emergencyButton = 1;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <App_TrafficLights+0x140>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
            oldEmergencyState = 0;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <App_TrafficLights+0x14c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
            oldStopState = stopButton;
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <App_TrafficLights+0x138>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <App_TrafficLights+0x150>)
 8000f7a:	701a      	strb	r2, [r3, #0]
            TIM3->CCR1 = 0;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <App_TrafficLights+0x158>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	635a      	str	r2, [r3, #52]	@ 0x34
    	}

        lastTick = now;
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <App_TrafficLights+0x148>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6013      	str	r3, [r2, #0]
        ret = TRAFFIC_OFF;
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <App_TrafficLights+0x13c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
    }


    return ret;
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <App_TrafficLights+0x13c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001f4 	.word	0x200001f4
 8000fa0:	20000219 	.word	0x20000219
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	40010c00 	.word	0x40010c00
 8000fac:	200001f8 	.word	0x200001f8
 8000fb0:	200001f5 	.word	0x200001f5
 8000fb4:	20000001 	.word	0x20000001
 8000fb8:	08009744 	.word	0x08009744
 8000fbc:	40000400 	.word	0x40000400
 8000fc0:	08009758 	.word	0x08009758
 8000fc4:	08009764 	.word	0x08009764

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fcc:	f000 fc92 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd0:	f000 f828 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd4:	f000 f9a2 	bl	800131c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd8:	f000 f982 	bl	80012e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fdc:	f000 f87e 	bl	80010dc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fe0:	f000 f908 	bl	80011f4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000fe4:	f000 f8b8 	bl	8001158 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ECUAL_LCD_4BitModeInit();
 8000fe8:	f003 fbc0 	bl	800476c <ECUAL_LCD_4BitModeInit>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000fec:	4809      	ldr	r0, [pc, #36]	@ (8001014 <main+0x4c>)
 8000fee:	f001 f979 	bl	80022e4 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4808      	ldr	r0, [pc, #32]	@ (8001018 <main+0x50>)
 8000ff6:	f002 fd59 	bl	8003aac <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ffa:	4808      	ldr	r0, [pc, #32]	@ (800101c <main+0x54>)
 8000ffc:	f002 fcac 	bl	8003958 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  App_TrafficLights();
 8001000:	f7ff ff30 	bl	8000e64 <App_TrafficLights>
	  HAL_ADC_Start_DMA(&hadc1, &adcBuf, 1);
 8001004:	2201      	movs	r2, #1
 8001006:	4906      	ldr	r1, [pc, #24]	@ (8001020 <main+0x58>)
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <main+0x4c>)
 800100a:	f000 fdad 	bl	8001b68 <HAL_ADC_Start_DMA>
	  App_TrafficLights();
 800100e:	bf00      	nop
 8001010:	e7f6      	b.n	8001000 <main+0x38>
 8001012:	bf00      	nop
 8001014:	2000021c 	.word	0x2000021c
 8001018:	200002d8 	.word	0x200002d8
 800101c:	20000290 	.word	0x20000290
 8001020:	20000320 	.word	0x20000320

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b094      	sub	sp, #80	@ 0x50
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800102e:	2228      	movs	r2, #40	@ 0x28
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f004 ff9f 	bl	8005f76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001054:	2301      	movs	r3, #1
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001058:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001062:	2301      	movs	r3, #1
 8001064:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	2302      	movs	r3, #2
 8001068:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800106e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001070:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001074:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800107a:	4618      	mov	r0, r3
 800107c:	f001 feb4 	bl	8002de8 <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001086:	f000 f9c9 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	230f      	movs	r3, #15
 800108c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2102      	movs	r1, #2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 f920 	bl	80032ec <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010b2:	f000 f9b3 	bl	800141c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010b6:	2302      	movs	r3, #2
 80010b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80010ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fa8c 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010ce:	f000 f9a5 	bl	800141c <Error_Handler>
  }
}
 80010d2:	bf00      	nop
 80010d4:	3750      	adds	r7, #80	@ 0x50
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <MX_ADC1_Init+0x74>)
 80010ee:	4a19      	ldr	r2, [pc, #100]	@ (8001154 <MX_ADC1_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f2:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <MX_ADC1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <MX_ADC1_Init+0x74>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_ADC1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <MX_ADC1_Init+0x74>)
 8001106:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800110a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110c:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <MX_ADC1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <MX_ADC1_Init+0x74>)
 8001114:	2201      	movs	r2, #1
 8001116:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001118:	480d      	ldr	r0, [pc, #52]	@ (8001150 <MX_ADC1_Init+0x74>)
 800111a:	f000 fc4d 	bl	80019b8 <HAL_ADC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001124:	f000 f97a 	bl	800141c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001128:	2302      	movs	r3, #2
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800112c:	2301      	movs	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <MX_ADC1_Init+0x74>)
 800113a:	f000 fed9 	bl	8001ef0 <HAL_ADC_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001144:	f000 f96a 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000021c 	.word	0x2000021c
 8001154:	40012400 	.word	0x40012400

08001158 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001174:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_TIM2_Init+0x98>)
 8001176:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800117a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MX_TIM2_Init+0x98>)
 800117e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_TIM2_Init+0x98>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <MX_TIM2_Init+0x98>)
 800118c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001190:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_TIM2_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <MX_TIM2_Init+0x98>)
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800119e:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <MX_TIM2_Init+0x98>)
 80011a0:	f002 fb8a 	bl	80038b8 <HAL_TIM_Base_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011aa:	f000 f937 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4619      	mov	r1, r3
 80011ba:	480d      	ldr	r0, [pc, #52]	@ (80011f0 <MX_TIM2_Init+0x98>)
 80011bc:	f002 feca 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011c6:	f000 f929 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <MX_TIM2_Init+0x98>)
 80011d8:	f003 fa58 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011e2:	f000 f91b 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000290 	.word	0x20000290

080011f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	@ 0x38
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001224:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 8001226:	4a2d      	ldr	r2, [pc, #180]	@ (80012dc <MX_TIM3_Init+0xe8>)
 8001228:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800122a:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 800122c:	2200      	movs	r2, #0
 800122e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001236:	4b28      	ldr	r3, [pc, #160]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 8001238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800123c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	4b26      	ldr	r3, [pc, #152]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800124a:	4823      	ldr	r0, [pc, #140]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 800124c:	f002 fb34 	bl	80038b8 <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001256:	f000 f8e1 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001260:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001264:	4619      	mov	r1, r3
 8001266:	481c      	ldr	r0, [pc, #112]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 8001268:	f002 fe74 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001272:	f000 f8d3 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001276:	4818      	ldr	r0, [pc, #96]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 8001278:	f002 fbc0 	bl	80039fc <HAL_TIM_PWM_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001282:	f000 f8cb 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4619      	mov	r1, r3
 8001294:	4810      	ldr	r0, [pc, #64]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 8001296:	f003 f9f9 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012a0:	f000 f8bc 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a4:	2360      	movs	r3, #96	@ 0x60
 80012a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 80012bc:	f002 fd88 	bl	8003dd0 <HAL_TIM_PWM_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012c6:	f000 f8a9 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <MX_TIM3_Init+0xe4>)
 80012cc:	f000 f986 	bl	80015dc <HAL_TIM_MspPostInit>

}
 80012d0:	bf00      	nop
 80012d2:	3738      	adds	r7, #56	@ 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200002d8 	.word	0x200002d8
 80012dc:	40000400 	.word	0x40000400

080012e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_DMA_Init+0x38>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <MX_DMA_Init+0x38>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6153      	str	r3, [r2, #20]
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_DMA_Init+0x38>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	200b      	movs	r0, #11
 8001304:	f001 f97d 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001308:	200b      	movs	r0, #11
 800130a:	f001 f996 	bl	800263a <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001330:	4b36      	ldr	r3, [pc, #216]	@ (800140c <MX_GPIO_Init+0xf0>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a35      	ldr	r2, [pc, #212]	@ (800140c <MX_GPIO_Init+0xf0>)
 8001336:	f043 0320 	orr.w	r3, r3, #32
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b33      	ldr	r3, [pc, #204]	@ (800140c <MX_GPIO_Init+0xf0>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b30      	ldr	r3, [pc, #192]	@ (800140c <MX_GPIO_Init+0xf0>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a2f      	ldr	r2, [pc, #188]	@ (800140c <MX_GPIO_Init+0xf0>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <MX_GPIO_Init+0xf0>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <MX_GPIO_Init+0xf0>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a29      	ldr	r2, [pc, #164]	@ (800140c <MX_GPIO_Init+0xf0>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b27      	ldr	r3, [pc, #156]	@ (800140c <MX_GPIO_Init+0xf0>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D6_Pin|D6A5_Pin|D5_Pin|D4_Pin
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 800137e:	4824      	ldr	r0, [pc, #144]	@ (8001410 <MX_GPIO_Init+0xf4>)
 8001380:	f001 fce8 	bl	8002d54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|RS_Pin|EN_Pin|RED_LED_Pin
 8001384:	2200      	movs	r2, #0
 8001386:	f647 4104 	movw	r1, #31748	@ 0x7c04
 800138a:	4822      	ldr	r0, [pc, #136]	@ (8001414 <MX_GPIO_Init+0xf8>)
 800138c:	f001 fce2 	bl	8002d54 <HAL_GPIO_WritePin>
                          |ORANGE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STOP_BUTTON_Pin EMERGENCY_BUTTON_Pin */
  GPIO_InitStruct.Pin = STOP_BUTTON_Pin|EMERGENCY_BUTTON_Pin;
 8001390:	2303      	movs	r3, #3
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001394:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <MX_GPIO_Init+0xfc>)
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	481b      	ldr	r0, [pc, #108]	@ (8001410 <MX_GPIO_Init+0xf4>)
 80013a4:	f001 fb52 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D6A5_Pin D5_Pin D4_Pin
                           PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = D6_Pin|D6A5_Pin|D5_Pin|D4_Pin
 80013a8:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 80013ac:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	4813      	ldr	r0, [pc, #76]	@ (8001410 <MX_GPIO_Init+0xf4>)
 80013c2:	f001 fb43 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 RS_Pin EN_Pin RED_LED_Pin
                           ORANGE_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|RS_Pin|EN_Pin|RED_LED_Pin
 80013c6:	f647 4304 	movw	r3, #31748	@ 0x7c04
 80013ca:	613b      	str	r3, [r7, #16]
                          |ORANGE_LED_Pin|GREEN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	480d      	ldr	r0, [pc, #52]	@ (8001414 <MX_GPIO_Init+0xf8>)
 80013e0:	f001 fb34 	bl	8002a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2006      	movs	r0, #6
 80013ea:	f001 f90a 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ee:	2006      	movs	r0, #6
 80013f0:	f001 f923 	bl	800263a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2007      	movs	r0, #7
 80013fa:	f001 f902 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013fe:	2007      	movs	r0, #7
 8001400:	f001 f91b 	bl	800263a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	40010800 	.word	0x40010800
 8001414:	40010c00 	.word	0x40010c00
 8001418:	10110000 	.word	0x10110000

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <Error_Handler+0x8>

08001428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_MspInit+0x5c>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <HAL_MspInit+0x5c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_MspInit+0x5c>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_MspInit+0x5c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a0e      	ldr	r2, [pc, #56]	@ (8001484 <HAL_MspInit+0x5c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <HAL_MspInit+0x5c>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <HAL_MspInit+0x60>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <HAL_MspInit+0x60>)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000

0800148c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001558 <HAL_ADC_MspInit+0xcc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d151      	bne.n	8001550 <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ac:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <HAL_ADC_MspInit+0xd0>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a2a      	ldr	r2, [pc, #168]	@ (800155c <HAL_ADC_MspInit+0xd0>)
 80014b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b28      	ldr	r3, [pc, #160]	@ (800155c <HAL_ADC_MspInit+0xd0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b25      	ldr	r3, [pc, #148]	@ (800155c <HAL_ADC_MspInit+0xd0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a24      	ldr	r2, [pc, #144]	@ (800155c <HAL_ADC_MspInit+0xd0>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <HAL_ADC_MspInit+0xd0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014dc:	2304      	movs	r3, #4
 80014de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e0:	2303      	movs	r3, #3
 80014e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	481d      	ldr	r0, [pc, #116]	@ (8001560 <HAL_ADC_MspInit+0xd4>)
 80014ec:	f001 faae 	bl	8002a4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 80014f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001568 <HAL_ADC_MspInit+0xdc>)
 80014f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fc:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 8001504:	2280      	movs	r2, #128	@ 0x80
 8001506:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001508:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 800150a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800150e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 8001512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001516:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001524:	480f      	ldr	r0, [pc, #60]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 8001526:	f001 f8a3 	bl	8002670 <HAL_DMA_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001530:	f7ff ff74 	bl	800141c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a0b      	ldr	r2, [pc, #44]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 8001538:	621a      	str	r2, [r3, #32]
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <HAL_ADC_MspInit+0xd8>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2012      	movs	r0, #18
 8001546:	f001 f85c 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800154a:	2012      	movs	r0, #18
 800154c:	f001 f875 	bl	800263a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40012400 	.word	0x40012400
 800155c:	40021000 	.word	0x40021000
 8001560:	40010800 	.word	0x40010800
 8001564:	2000024c 	.word	0x2000024c
 8001568:	40020008 	.word	0x40020008

0800156c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800157c:	d114      	bne.n	80015a8 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a14      	ldr	r2, [pc, #80]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	201c      	movs	r0, #28
 800159c:	f001 f831 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015a0:	201c      	movs	r0, #28
 80015a2:	f001 f84a 	bl	800263a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015a6:	e010      	b.n	80015ca <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_TIM_Base_MspInit+0x6c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d10b      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a07      	ldr	r2, [pc, #28]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_TIM_Base_MspInit+0x68>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40000400 	.word	0x40000400

080015dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a18      	ldr	r2, [pc, #96]	@ (8001658 <HAL_TIM_MspPostInit+0x7c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d129      	bne.n	8001650 <HAL_TIM_MspPostInit+0x74>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b17      	ldr	r3, [pc, #92]	@ (800165c <HAL_TIM_MspPostInit+0x80>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a16      	ldr	r2, [pc, #88]	@ (800165c <HAL_TIM_MspPostInit+0x80>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b14      	ldr	r3, [pc, #80]	@ (800165c <HAL_TIM_MspPostInit+0x80>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001614:	2310      	movs	r3, #16
 8001616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	4619      	mov	r1, r3
 8001626:	480e      	ldr	r0, [pc, #56]	@ (8001660 <HAL_TIM_MspPostInit+0x84>)
 8001628:	f001 fa10 	bl	8002a4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <HAL_TIM_MspPostInit+0x88>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	4a06      	ldr	r2, [pc, #24]	@ (8001664 <HAL_TIM_MspPostInit+0x88>)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40000400 	.word	0x40000400
 800165c:	40021000 	.word	0x40021000
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40010000 	.word	0x40010000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <NMI_Handler+0x4>

08001670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <MemManage_Handler+0x4>

08001680 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <UsageFault_Handler+0x4>

08001690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b8:	f000 f962 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STOP_BUTTON_Pin);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f001 fb77 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}

080016ce <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMERGENCY_BUTTON_Pin);
 80016d2:	2002      	movs	r0, #2
 80016d4:	f001 fb70 	bl	8002db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <DMA1_Channel1_IRQHandler+0x10>)
 80016e2:	f001 f87f 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000024c 	.word	0x2000024c

080016f0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <ADC1_2_IRQHandler+0x10>)
 80016f6:	f000 fb21 	bl	8001d3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000021c 	.word	0x2000021c

08001704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <TIM2_IRQHandler+0x10>)
 800170a:	f002 fa71 	bl	8003bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000290 	.word	0x20000290

08001718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return 1;
 800171c:	2301      	movs	r3, #1
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <_kill>:

int _kill(int pid, int sig)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001730:	f004 fc74 	bl	800601c <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	2216      	movs	r2, #22
 8001738:	601a      	str	r2, [r3, #0]
  return -1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_exit>:

void _exit (int status)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800174e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffe7 	bl	8001726 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <_exit+0x12>

0800175c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e00a      	b.n	8001784 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800176e:	f3af 8000 	nop.w
 8001772:	4601      	mov	r1, r0
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60ba      	str	r2, [r7, #8]
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbf0      	blt.n	800176e <_read+0x12>
  }

  return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e009      	b.n	80017bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf1      	blt.n	80017a8 <_write+0x12>
  }
  return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_close>:

int _close(int file)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f4:	605a      	str	r2, [r3, #4]
  return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <_isatty>:

int _isatty(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001816:	b480      	push	{r7}
 8001818:	b085      	sub	sp, #20
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001838:	4a14      	ldr	r2, [pc, #80]	@ (800188c <_sbrk+0x5c>)
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <_sbrk+0x60>)
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <_sbrk+0x64>)
 800184e:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <_sbrk+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	429a      	cmp	r2, r3
 800185e:	d207      	bcs.n	8001870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001860:	f004 fbdc 	bl	800601c <__errno>
 8001864:	4603      	mov	r3, r0
 8001866:	220c      	movs	r2, #12
 8001868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800186e:	e009      	b.n	8001884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001876:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <_sbrk+0x64>)
 8001880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20005000 	.word	0x20005000
 8001890:	00000400 	.word	0x00000400
 8001894:	20000324 	.word	0x20000324
 8001898:	20000478 	.word	0x20000478

0800189c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a8:	f7ff fff8 	bl	800189c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480b      	ldr	r0, [pc, #44]	@ (80018dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ae:	490c      	ldr	r1, [pc, #48]	@ (80018e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018b0:	4a0c      	ldr	r2, [pc, #48]	@ (80018e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018c4:	4c09      	ldr	r4, [pc, #36]	@ (80018ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d2:	f004 fba9 	bl	8006028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d6:	f7ff fb77 	bl	8000fc8 <main>
  bx lr
 80018da:	4770      	bx	lr
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80018e4:	08009c1c 	.word	0x08009c1c
  ldr r2, =_sbss
 80018e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80018ec:	20000478 	.word	0x20000478

080018f0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <CAN1_RX1_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <HAL_Init+0x28>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a07      	ldr	r2, [pc, #28]	@ (800191c <HAL_Init+0x28>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 fe71 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190a:	200f      	movs	r0, #15
 800190c:	f000 f808 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001910:	f7ff fd8a 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40022000 	.word	0x40022000

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_InitTick+0x54>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_InitTick+0x58>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fe89 	bl	8002656 <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800195c:	f000 fe51 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	@ (800197c <HAL_InitTick+0x5c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000004 	.word	0x20000004
 8001978:	2000000c 	.word	0x2000000c
 800197c:	20000008 	.word	0x20000008

08001980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_IncTick+0x1c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_IncTick+0x20>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a03      	ldr	r2, [pc, #12]	@ (80019a0 <HAL_IncTick+0x20>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	20000328 	.word	0x20000328

080019a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b02      	ldr	r3, [pc, #8]	@ (80019b4 <HAL_GetTick+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	20000328 	.word	0x20000328

080019b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0be      	b.n	8001b58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fd48 	bl	800148c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fbc9 	bl	8002194 <ADC_ConversionStop_Disable>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 8099 	bne.w	8001b46 <HAL_ADC_Init+0x18e>
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 8095 	bne.w	8001b46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a20:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a24:	f023 0302 	bic.w	r3, r3, #2
 8001a28:	f043 0202 	orr.w	r2, r3, #2
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7b1b      	ldrb	r3, [r3, #12]
 8001a3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a50:	d003      	beq.n	8001a5a <HAL_ADC_Init+0xa2>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d102      	bne.n	8001a60 <HAL_ADC_Init+0xa8>
 8001a5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a5e:	e000      	b.n	8001a62 <HAL_ADC_Init+0xaa>
 8001a60:	2300      	movs	r3, #0
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7d1b      	ldrb	r3, [r3, #20]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d119      	bne.n	8001aa4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7b1b      	ldrb	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	035a      	lsls	r2, r3, #13
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a90:	f043 0220 	orr.w	r2, r3, #32
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <HAL_ADC_Init+0x1a8>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ad4:	d003      	beq.n	8001ade <HAL_ADC_Init+0x126>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d104      	bne.n	8001ae8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	051b      	lsls	r3, r3, #20
 8001ae6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <HAL_ADC_Init+0x1ac>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d10b      	bne.n	8001b24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b22:	e018      	b.n	8001b56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b28:	f023 0312 	bic.w	r3, r3, #18
 8001b2c:	f043 0210 	orr.w	r2, r3, #16
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b44:	e007      	b.n	8001b56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4a:	f043 0210 	orr.w	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	ffe1f7fd 	.word	0xffe1f7fd
 8001b64:	ff1f0efe 	.word	0xff1f0efe

08001b68 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a64      	ldr	r2, [pc, #400]	@ (8001d10 <HAL_ADC_Start_DMA+0x1a8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d004      	beq.n	8001b8c <HAL_ADC_Start_DMA+0x24>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a63      	ldr	r2, [pc, #396]	@ (8001d14 <HAL_ADC_Start_DMA+0x1ac>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d106      	bne.n	8001b9a <HAL_ADC_Start_DMA+0x32>
 8001b8c:	4b60      	ldr	r3, [pc, #384]	@ (8001d10 <HAL_ADC_Start_DMA+0x1a8>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 80b3 	bne.w	8001d00 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_Start_DMA+0x40>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e0ae      	b.n	8001d06 <HAL_ADC_Start_DMA+0x19e>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 fa95 	bl	80020e0 <ADC_Enable>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 809a 	bne.w	8001cf6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a4e      	ldr	r2, [pc, #312]	@ (8001d14 <HAL_ADC_Start_DMA+0x1ac>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d105      	bne.n	8001bec <HAL_ADC_Start_DMA+0x84>
 8001be0:	4b4b      	ldr	r3, [pc, #300]	@ (8001d10 <HAL_ADC_Start_DMA+0x1a8>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d115      	bne.n	8001c18 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d026      	beq.n	8001c54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c16:	e01d      	b.n	8001c54 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a39      	ldr	r2, [pc, #228]	@ (8001d10 <HAL_ADC_Start_DMA+0x1a8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d004      	beq.n	8001c38 <HAL_ADC_Start_DMA+0xd0>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a38      	ldr	r2, [pc, #224]	@ (8001d14 <HAL_ADC_Start_DMA+0x1ac>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d10d      	bne.n	8001c54 <HAL_ADC_Start_DMA+0xec>
 8001c38:	4b35      	ldr	r3, [pc, #212]	@ (8001d10 <HAL_ADC_Start_DMA+0x1a8>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c64:	f023 0206 	bic.w	r2, r3, #6
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a25      	ldr	r2, [pc, #148]	@ (8001d18 <HAL_ADC_Start_DMA+0x1b0>)
 8001c82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4a24      	ldr	r2, [pc, #144]	@ (8001d1c <HAL_ADC_Start_DMA+0x1b4>)
 8001c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a23      	ldr	r2, [pc, #140]	@ (8001d20 <HAL_ADC_Start_DMA+0x1b8>)
 8001c92:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0202 	mvn.w	r2, #2
 8001c9c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a18      	ldr	r0, [r3, #32]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	334c      	adds	r3, #76	@ 0x4c
 8001cb8:	4619      	mov	r1, r3
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f000 fd31 	bl	8002724 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ccc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001cd0:	d108      	bne.n	8001ce4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001ce0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ce2:	e00f      	b.n	8001d04 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001cf2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cf4:	e006      	b.n	8001d04 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001cfe:	e001      	b.n	8001d04 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40012400 	.word	0x40012400
 8001d14:	40012800 	.word	0x40012800
 8001d18:	08002217 	.word	0x08002217
 8001d1c:	08002293 	.word	0x08002293
 8001d20:	080022af 	.word	0x080022af

08001d24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d03e      	beq.n	8001ddc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d039      	beq.n	8001ddc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d78:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d8a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d8e:	d11d      	bne.n	8001dcc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d119      	bne.n	8001dcc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0220 	bic.w	r2, r2, #32
 8001da6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc4:	f043 0201 	orr.w	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7fe ff27 	bl	8000c20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f06f 0212 	mvn.w	r2, #18
 8001dda:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d04d      	beq.n	8001e82 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d048      	beq.n	8001e82 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001e12:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001e16:	d012      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d125      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e30:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e34:	d11d      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d119      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e4c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fae4 	bl	8002440 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 020c 	mvn.w	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d012      	beq.n	8001eb2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00d      	beq.n	8001eb2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f812 	bl	8001ecc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0201 	mvn.w	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x20>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e0dc      	b.n	80020ca <HAL_ADC_ConfigChannel+0x1da>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b06      	cmp	r3, #6
 8001f1e:	d81c      	bhi.n	8001f5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	3b05      	subs	r3, #5
 8001f32:	221f      	movs	r2, #31
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4019      	ands	r1, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b05      	subs	r3, #5
 8001f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f58:	e03c      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b0c      	cmp	r3, #12
 8001f60:	d81c      	bhi.n	8001f9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3b23      	subs	r3, #35	@ 0x23
 8001f74:	221f      	movs	r2, #31
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	4019      	ands	r1, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3b23      	subs	r3, #35	@ 0x23
 8001f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f9a:	e01b      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	3b41      	subs	r3, #65	@ 0x41
 8001fae:	221f      	movs	r2, #31
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4019      	ands	r1, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b41      	subs	r3, #65	@ 0x41
 8001fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b09      	cmp	r3, #9
 8001fda:	d91c      	bls.n	8002016 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68d9      	ldr	r1, [r3, #12]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	3b1e      	subs	r3, #30
 8001fee:	2207      	movs	r2, #7
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4019      	ands	r1, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6898      	ldr	r0, [r3, #8]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	3b1e      	subs	r3, #30
 8002008:	fa00 f203 	lsl.w	r2, r0, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	e019      	b.n	800204a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6919      	ldr	r1, [r3, #16]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	2207      	movs	r2, #7
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	4019      	ands	r1, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6898      	ldr	r0, [r3, #8]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	fa00 f203 	lsl.w	r2, r0, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b10      	cmp	r3, #16
 8002050:	d003      	beq.n	800205a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002056:	2b11      	cmp	r3, #17
 8002058:	d132      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d125      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d126      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002080:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b10      	cmp	r3, #16
 8002088:	d11a      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800208a:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a13      	ldr	r2, [pc, #76]	@ (80020dc <HAL_ADC_ConfigChannel+0x1ec>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	0c9a      	lsrs	r2, r3, #18
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f9      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x1b2>
 80020ae:	e007      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40012400 	.word	0x40012400
 80020d8:	20000004 	.word	0x20000004
 80020dc:	431bde83 	.word	0x431bde83

080020e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d040      	beq.n	8002180 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800210e:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <ADC_Enable+0xac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1f      	ldr	r2, [pc, #124]	@ (8002190 <ADC_Enable+0xb0>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	0c9b      	lsrs	r3, r3, #18
 800211a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800211c:	e002      	b.n	8002124 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3b01      	subs	r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f9      	bne.n	800211e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800212a:	f7ff fc3b 	bl	80019a4 <HAL_GetTick>
 800212e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002130:	e01f      	b.n	8002172 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002132:	f7ff fc37 	bl	80019a4 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d918      	bls.n	8002172 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d011      	beq.n	8002172 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002152:	f043 0210 	orr.w	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e007      	b.n	8002182 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d1d8      	bne.n	8002132 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000004 	.word	0x20000004
 8002190:	431bde83 	.word	0x431bde83

08002194 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d12e      	bne.n	800220c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0201 	bic.w	r2, r2, #1
 80021bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021be:	f7ff fbf1 	bl	80019a4 <HAL_GetTick>
 80021c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021c4:	e01b      	b.n	80021fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021c6:	f7ff fbed 	bl	80019a4 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d914      	bls.n	80021fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d10d      	bne.n	80021fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	f043 0210 	orr.w	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e007      	b.n	800220e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d0dc      	beq.n	80021c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800222c:	2b00      	cmp	r3, #0
 800222e:	d127      	bne.n	8002280 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002246:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800224a:	d115      	bne.n	8002278 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002250:	2b00      	cmp	r3, #0
 8002252:	d111      	bne.n	8002278 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7fe fcd1 	bl	8000c20 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800227e:	e004      	b.n	800228a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff fe0a 	bl	8001eba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022cc:	f043 0204 	orr.w	r2, r3, #4
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f7ff fe02 	bl	8001ede <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_ADCEx_Calibration_Start+0x1e>
 80022fe:	2302      	movs	r3, #2
 8002300:	e097      	b.n	8002432 <HAL_ADCEx_Calibration_Start+0x14e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ff42 	bl	8002194 <ADC_ConversionStop_Disable>
 8002310:	4603      	mov	r3, r0
 8002312:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff fee3 	bl	80020e0 <ADC_Enable>
 800231a:	4603      	mov	r3, r0
 800231c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 8081 	bne.w	8002428 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800232e:	f023 0302 	bic.w	r3, r3, #2
 8002332:	f043 0202 	orr.w	r2, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800233a:	4b40      	ldr	r3, [pc, #256]	@ (800243c <HAL_ADCEx_Calibration_Start+0x158>)
 800233c:	681c      	ldr	r4, [r3, #0]
 800233e:	2002      	movs	r0, #2
 8002340:	f001 fa04 	bl	800374c <HAL_RCCEx_GetPeriphCLKFreq>
 8002344:	4603      	mov	r3, r0
 8002346:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800234a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800234c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800234e:	e002      	b.n	8002356 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3b01      	subs	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0208 	orr.w	r2, r2, #8
 800236a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800236c:	f7ff fb1a 	bl	80019a4 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002372:	e01b      	b.n	80023ac <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002374:	f7ff fb16 	bl	80019a4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d914      	bls.n	80023ac <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00d      	beq.n	80023ac <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	f023 0312 	bic.w	r3, r3, #18
 8002398:	f043 0210 	orr.w	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e042      	b.n	8002432 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1dc      	bne.n	8002374 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0204 	orr.w	r2, r2, #4
 80023c8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80023ca:	f7ff faeb 	bl	80019a4 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023d0:	e01b      	b.n	800240a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023d2:	f7ff fae7 	bl	80019a4 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b0a      	cmp	r3, #10
 80023de:	d914      	bls.n	800240a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f2:	f023 0312 	bic.w	r3, r3, #18
 80023f6:	f043 0210 	orr.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e013      	b.n	8002432 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1dc      	bne.n	80023d2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241c:	f023 0303 	bic.w	r3, r3, #3
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002430:	7dfb      	ldrb	r3, [r7, #23]
}
 8002432:	4618      	mov	r0, r3
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	bf00      	nop
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
	...

08002454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002464:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800247c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002486:	4a04      	ldr	r2, [pc, #16]	@ (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	60d3      	str	r3, [r2, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a0:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <__NVIC_GetPriorityGrouping+0x18>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0307 	and.w	r3, r3, #7
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	db0b      	blt.n	80024e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4906      	ldr	r1, [pc, #24]	@ (80024ec <__NVIC_EnableIRQ+0x34>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2001      	movs	r0, #1
 80024da:	fa00 f202 	lsl.w	r2, r0, r2
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	@ (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	@ (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	@ 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025cc:	f7ff ff90 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff2d 	bl	8002454 <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff42 	bl	800249c <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff90 	bl	8002544 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5f 	bl	80024f0 <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff35 	bl	80024b8 <__NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffa2 	bl	80025a8 <SysTick_Config>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e043      	b.n	800270e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_DMA_Init+0xa8>)
 800268e:	4413      	add	r3, r2
 8002690:	4a22      	ldr	r2, [pc, #136]	@ (800271c <HAL_DMA_Init+0xac>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	009a      	lsls	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <HAL_DMA_Init+0xb0>)
 80026a2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80026ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80026be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	bffdfff8 	.word	0xbffdfff8
 800271c:	cccccccd 	.word	0xcccccccd
 8002720:	40020000 	.word	0x40020000

08002724 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_DMA_Start_IT+0x20>
 8002740:	2302      	movs	r3, #2
 8002742:	e04b      	b.n	80027dc <HAL_DMA_Start_IT+0xb8>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d13a      	bne.n	80027ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f937 	bl	80029f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 020e 	orr.w	r2, r2, #14
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e00f      	b.n	80027bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0204 	bic.w	r2, r2, #4
 80027aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 020a 	orr.w	r2, r2, #10
 80027ba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e005      	b.n	80027da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027da:	7dfb      	ldrb	r3, [r7, #23]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	2204      	movs	r2, #4
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d04f      	beq.n	80028ac <HAL_DMA_IRQHandler+0xc8>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04a      	beq.n	80028ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0204 	bic.w	r2, r2, #4
 8002832:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a66      	ldr	r2, [pc, #408]	@ (80029d4 <HAL_DMA_IRQHandler+0x1f0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d029      	beq.n	8002892 <HAL_DMA_IRQHandler+0xae>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a65      	ldr	r2, [pc, #404]	@ (80029d8 <HAL_DMA_IRQHandler+0x1f4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d022      	beq.n	800288e <HAL_DMA_IRQHandler+0xaa>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a63      	ldr	r2, [pc, #396]	@ (80029dc <HAL_DMA_IRQHandler+0x1f8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01a      	beq.n	8002888 <HAL_DMA_IRQHandler+0xa4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a62      	ldr	r2, [pc, #392]	@ (80029e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d012      	beq.n	8002882 <HAL_DMA_IRQHandler+0x9e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a60      	ldr	r2, [pc, #384]	@ (80029e4 <HAL_DMA_IRQHandler+0x200>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00a      	beq.n	800287c <HAL_DMA_IRQHandler+0x98>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a5f      	ldr	r2, [pc, #380]	@ (80029e8 <HAL_DMA_IRQHandler+0x204>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d102      	bne.n	8002876 <HAL_DMA_IRQHandler+0x92>
 8002870:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002874:	e00e      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002876:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800287a:	e00b      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 800287c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002880:	e008      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002882:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002886:	e005      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800288c:	e002      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 800288e:	2340      	movs	r3, #64	@ 0x40
 8002890:	e000      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002892:	2304      	movs	r3, #4
 8002894:	4a55      	ldr	r2, [pc, #340]	@ (80029ec <HAL_DMA_IRQHandler+0x208>)
 8002896:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8094 	beq.w	80029ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028aa:	e08e      	b.n	80029ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	2202      	movs	r2, #2
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d056      	beq.n	800296a <HAL_DMA_IRQHandler+0x186>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d051      	beq.n	800296a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 020a 	bic.w	r2, r2, #10
 80028e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a38      	ldr	r2, [pc, #224]	@ (80029d4 <HAL_DMA_IRQHandler+0x1f0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d029      	beq.n	800294a <HAL_DMA_IRQHandler+0x166>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a37      	ldr	r2, [pc, #220]	@ (80029d8 <HAL_DMA_IRQHandler+0x1f4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <HAL_DMA_IRQHandler+0x162>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a35      	ldr	r2, [pc, #212]	@ (80029dc <HAL_DMA_IRQHandler+0x1f8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01a      	beq.n	8002940 <HAL_DMA_IRQHandler+0x15c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a34      	ldr	r2, [pc, #208]	@ (80029e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d012      	beq.n	800293a <HAL_DMA_IRQHandler+0x156>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a32      	ldr	r2, [pc, #200]	@ (80029e4 <HAL_DMA_IRQHandler+0x200>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00a      	beq.n	8002934 <HAL_DMA_IRQHandler+0x150>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a31      	ldr	r2, [pc, #196]	@ (80029e8 <HAL_DMA_IRQHandler+0x204>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d102      	bne.n	800292e <HAL_DMA_IRQHandler+0x14a>
 8002928:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800292c:	e00e      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 800292e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002932:	e00b      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 8002934:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002938:	e008      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 800293a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800293e:	e005      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 8002940:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002944:	e002      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 8002946:	2320      	movs	r3, #32
 8002948:	e000      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 800294a:	2302      	movs	r3, #2
 800294c:	4a27      	ldr	r2, [pc, #156]	@ (80029ec <HAL_DMA_IRQHandler+0x208>)
 800294e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d034      	beq.n	80029ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002968:	e02f      	b.n	80029ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	2208      	movs	r2, #8
 8002970:	409a      	lsls	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d028      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1e8>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d023      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 020e 	bic.w	r2, r2, #14
 8002992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
    }
  }
  return;
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
}
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40020008 	.word	0x40020008
 80029d8:	4002001c 	.word	0x4002001c
 80029dc:	40020030 	.word	0x40020030
 80029e0:	40020044 	.word	0x40020044
 80029e4:	40020058 	.word	0x40020058
 80029e8:	4002006c 	.word	0x4002006c
 80029ec:	40020000 	.word	0x40020000

080029f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a06:	2101      	movs	r1, #1
 8002a08:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d108      	bne.n	8002a30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a2e:	e007      	b.n	8002a40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b08b      	sub	sp, #44	@ 0x2c
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5e:	e169      	b.n	8002d34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a60:	2201      	movs	r2, #1
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 8158 	bne.w	8002d2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a9a      	ldr	r2, [pc, #616]	@ (8002cec <HAL_GPIO_Init+0x2a0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d05e      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002a88:	4a98      	ldr	r2, [pc, #608]	@ (8002cec <HAL_GPIO_Init+0x2a0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d875      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002a8e:	4a98      	ldr	r2, [pc, #608]	@ (8002cf0 <HAL_GPIO_Init+0x2a4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d058      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002a94:	4a96      	ldr	r2, [pc, #600]	@ (8002cf0 <HAL_GPIO_Init+0x2a4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d86f      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002a9a:	4a96      	ldr	r2, [pc, #600]	@ (8002cf4 <HAL_GPIO_Init+0x2a8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d052      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002aa0:	4a94      	ldr	r2, [pc, #592]	@ (8002cf4 <HAL_GPIO_Init+0x2a8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d869      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002aa6:	4a94      	ldr	r2, [pc, #592]	@ (8002cf8 <HAL_GPIO_Init+0x2ac>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04c      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002aac:	4a92      	ldr	r2, [pc, #584]	@ (8002cf8 <HAL_GPIO_Init+0x2ac>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d863      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002ab2:	4a92      	ldr	r2, [pc, #584]	@ (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d046      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002ab8:	4a90      	ldr	r2, [pc, #576]	@ (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d85d      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002abe:	2b12      	cmp	r3, #18
 8002ac0:	d82a      	bhi.n	8002b18 <HAL_GPIO_Init+0xcc>
 8002ac2:	2b12      	cmp	r3, #18
 8002ac4:	d859      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8002acc <HAL_GPIO_Init+0x80>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002b47 	.word	0x08002b47
 8002ad0:	08002b21 	.word	0x08002b21
 8002ad4:	08002b33 	.word	0x08002b33
 8002ad8:	08002b75 	.word	0x08002b75
 8002adc:	08002b7b 	.word	0x08002b7b
 8002ae0:	08002b7b 	.word	0x08002b7b
 8002ae4:	08002b7b 	.word	0x08002b7b
 8002ae8:	08002b7b 	.word	0x08002b7b
 8002aec:	08002b7b 	.word	0x08002b7b
 8002af0:	08002b7b 	.word	0x08002b7b
 8002af4:	08002b7b 	.word	0x08002b7b
 8002af8:	08002b7b 	.word	0x08002b7b
 8002afc:	08002b7b 	.word	0x08002b7b
 8002b00:	08002b7b 	.word	0x08002b7b
 8002b04:	08002b7b 	.word	0x08002b7b
 8002b08:	08002b7b 	.word	0x08002b7b
 8002b0c:	08002b7b 	.word	0x08002b7b
 8002b10:	08002b29 	.word	0x08002b29
 8002b14:	08002b3d 	.word	0x08002b3d
 8002b18:	4a79      	ldr	r2, [pc, #484]	@ (8002d00 <HAL_GPIO_Init+0x2b4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b1e:	e02c      	b.n	8002b7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	623b      	str	r3, [r7, #32]
          break;
 8002b26:	e029      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	623b      	str	r3, [r7, #32]
          break;
 8002b30:	e024      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	3308      	adds	r3, #8
 8002b38:	623b      	str	r3, [r7, #32]
          break;
 8002b3a:	e01f      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	330c      	adds	r3, #12
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e01a      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b4e:	2304      	movs	r3, #4
 8002b50:	623b      	str	r3, [r7, #32]
          break;
 8002b52:	e013      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	611a      	str	r2, [r3, #16]
          break;
 8002b66:	e009      	b.n	8002b7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b68:	2308      	movs	r3, #8
 8002b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	615a      	str	r2, [r3, #20]
          break;
 8002b72:	e003      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b74:	2300      	movs	r3, #0
 8002b76:	623b      	str	r3, [r7, #32]
          break;
 8002b78:	e000      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          break;
 8002b7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2bff      	cmp	r3, #255	@ 0xff
 8002b80:	d801      	bhi.n	8002b86 <HAL_GPIO_Init+0x13a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	e001      	b.n	8002b8a <HAL_GPIO_Init+0x13e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2bff      	cmp	r3, #255	@ 0xff
 8002b90:	d802      	bhi.n	8002b98 <HAL_GPIO_Init+0x14c>
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	e002      	b.n	8002b9e <HAL_GPIO_Init+0x152>
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	3b08      	subs	r3, #8
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	210f      	movs	r1, #15
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	6a39      	ldr	r1, [r7, #32]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80b1 	beq.w	8002d2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6193      	str	r3, [r2, #24]
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	@ (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002be4:	4a48      	ldr	r2, [pc, #288]	@ (8002d08 <HAL_GPIO_Init+0x2bc>)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3302      	adds	r3, #2
 8002bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a40      	ldr	r2, [pc, #256]	@ (8002d0c <HAL_GPIO_Init+0x2c0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <HAL_GPIO_Init+0x1ec>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3f      	ldr	r2, [pc, #252]	@ (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00d      	beq.n	8002c34 <HAL_GPIO_Init+0x1e8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d14 <HAL_GPIO_Init+0x2c8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <HAL_GPIO_Init+0x1e4>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	@ (8002d18 <HAL_GPIO_Init+0x2cc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_GPIO_Init+0x1e0>
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	e004      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3c:	f002 0203 	and.w	r2, r2, #3
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	4093      	lsls	r3, r2
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c4a:	492f      	ldr	r1, [pc, #188]	@ (8002d08 <HAL_GPIO_Init+0x2bc>)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c64:	4b2d      	ldr	r3, [pc, #180]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	492c      	ldr	r1, [pc, #176]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c72:	4b2a      	ldr	r3, [pc, #168]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	4928      	ldr	r1, [pc, #160]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c8c:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	4922      	ldr	r1, [pc, #136]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c9a:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	491e      	ldr	r1, [pc, #120]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d006      	beq.n	8002cc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4918      	ldr	r1, [pc, #96]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
 8002cc0:	e006      	b.n	8002cd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cc2:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	4914      	ldr	r1, [pc, #80]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d021      	beq.n	8002d20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	490e      	ldr	r1, [pc, #56]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
 8002ce8:	e021      	b.n	8002d2e <HAL_GPIO_Init+0x2e2>
 8002cea:	bf00      	nop
 8002cec:	10320000 	.word	0x10320000
 8002cf0:	10310000 	.word	0x10310000
 8002cf4:	10220000 	.word	0x10220000
 8002cf8:	10210000 	.word	0x10210000
 8002cfc:	10120000 	.word	0x10120000
 8002d00:	10110000 	.word	0x10110000
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	40010800 	.word	0x40010800
 8002d10:	40010c00 	.word	0x40010c00
 8002d14:	40011000 	.word	0x40011000
 8002d18:	40011400 	.word	0x40011400
 8002d1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <HAL_GPIO_Init+0x304>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	4909      	ldr	r1, [pc, #36]	@ (8002d50 <HAL_GPIO_Init+0x304>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	3301      	adds	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f47f ae8e 	bne.w	8002a60 <HAL_GPIO_Init+0x14>
  }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	372c      	adds	r7, #44	@ 0x2c
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	611a      	str	r2, [r3, #16]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	041a      	lsls	r2, r3, #16
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	43d9      	mvns	r1, r3
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	400b      	ands	r3, r1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	611a      	str	r2, [r3, #16]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dc2:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dce:	4a05      	ldr	r2, [pc, #20]	@ (8002de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd fefc 	bl	8000bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40010400 	.word	0x40010400

08002de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e272      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8087 	beq.w	8002f16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e08:	4b92      	ldr	r3, [pc, #584]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d00c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e14:	4b8f      	ldr	r3, [pc, #572]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d112      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5e>
 8002e20:	4b8c      	ldr	r3, [pc, #560]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2c:	d10b      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2e:	4b89      	ldr	r3, [pc, #548]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d06c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x12c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d168      	bne.n	8002f14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e24c      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x76>
 8002e50:	4b80      	ldr	r3, [pc, #512]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a7f      	ldr	r2, [pc, #508]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	e02e      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x98>
 8002e66:	4b7b      	ldr	r3, [pc, #492]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7a      	ldr	r2, [pc, #488]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b78      	ldr	r3, [pc, #480]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a77      	ldr	r2, [pc, #476]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e01d      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xbc>
 8002e8a:	4b72      	ldr	r3, [pc, #456]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a71      	ldr	r2, [pc, #452]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b6f      	ldr	r3, [pc, #444]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6a      	ldr	r2, [pc, #424]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b68      	ldr	r3, [pc, #416]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a67      	ldr	r2, [pc, #412]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fd6e 	bl	80019a4 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fd6a 	bl	80019a4 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e200      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b5d      	ldr	r3, [pc, #372]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0xe4>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fd5a 	bl	80019a4 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fd56 	bl	80019a4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1ec      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	4b53      	ldr	r3, [pc, #332]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x10c>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d063      	beq.n	8002fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f22:	4b4c      	ldr	r3, [pc, #304]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f2e:	4b49      	ldr	r3, [pc, #292]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d11c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x18c>
 8002f3a:	4b46      	ldr	r3, [pc, #280]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	4b43      	ldr	r3, [pc, #268]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_RCC_OscConfig+0x176>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1c0      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4939      	ldr	r1, [pc, #228]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	e03a      	b.n	8002fea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7c:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe fd0f 	bl	80019a4 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fd0b 	bl	80019a4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1a1      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4927      	ldr	r1, [pc, #156]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	4b26      	ldr	r3, [pc, #152]	@ (8003058 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fcee 	bl	80019a4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fcea 	bl	80019a4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e180      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	4b1d      	ldr	r3, [pc, #116]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03a      	beq.n	800306c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d019      	beq.n	8003032 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffe:	4b17      	ldr	r3, [pc, #92]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003004:	f7fe fcce 	bl	80019a4 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7fe fcca 	bl	80019a4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e160      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800302a:	2001      	movs	r0, #1
 800302c:	f000 faba 	bl	80035a4 <RCC_Delay>
 8003030:	e01c      	b.n	800306c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003032:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7fe fcb4 	bl	80019a4 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303e:	e00f      	b.n	8003060 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe fcb0 	bl	80019a4 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d908      	bls.n	8003060 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e146      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	42420000 	.word	0x42420000
 800305c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	4b92      	ldr	r3, [pc, #584]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e9      	bne.n	8003040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80a6 	beq.w	80031c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4b8b      	ldr	r3, [pc, #556]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10d      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b88      	ldr	r3, [pc, #544]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4a87      	ldr	r2, [pc, #540]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003094:	61d3      	str	r3, [r2, #28]
 8003096:	4b85      	ldr	r3, [pc, #532]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b82      	ldr	r3, [pc, #520]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d118      	bne.n	80030e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b2:	4b7f      	ldr	r3, [pc, #508]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7e      	ldr	r2, [pc, #504]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7fe fc71 	bl	80019a4 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7fe fc6d 	bl	80019a4 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	@ 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e103      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	4b75      	ldr	r3, [pc, #468]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x312>
 80030ec:	4b6f      	ldr	r3, [pc, #444]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6213      	str	r3, [r2, #32]
 80030f8:	e02d      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x334>
 8003102:	4b6a      	ldr	r3, [pc, #424]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a69      	ldr	r2, [pc, #420]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6213      	str	r3, [r2, #32]
 800310e:	4b67      	ldr	r3, [pc, #412]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a66      	ldr	r2, [pc, #408]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	6213      	str	r3, [r2, #32]
 800311a:	e01c      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b05      	cmp	r3, #5
 8003122:	d10c      	bne.n	800313e <HAL_RCC_OscConfig+0x356>
 8003124:	4b61      	ldr	r3, [pc, #388]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a60      	ldr	r2, [pc, #384]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6213      	str	r3, [r2, #32]
 8003130:	4b5e      	ldr	r3, [pc, #376]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a5d      	ldr	r2, [pc, #372]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6213      	str	r3, [r2, #32]
 800313c:	e00b      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 800313e:	4b5b      	ldr	r3, [pc, #364]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4a5a      	ldr	r2, [pc, #360]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6213      	str	r3, [r2, #32]
 800314a:	4b58      	ldr	r3, [pc, #352]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a57      	ldr	r2, [pc, #348]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f023 0304 	bic.w	r3, r3, #4
 8003154:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fe fc21 	bl	80019a4 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fe fc1d 	bl	80019a4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0b1      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	4b4b      	ldr	r3, [pc, #300]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ee      	beq.n	8003166 <HAL_RCC_OscConfig+0x37e>
 8003188:	e014      	b.n	80031b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318a:	f7fe fc0b 	bl	80019a4 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe fc07 	bl	80019a4 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e09b      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ee      	bne.n	8003192 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b3c      	ldr	r3, [pc, #240]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4a3b      	ldr	r2, [pc, #236]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8087 	beq.w	80032de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d0:	4b36      	ldr	r3, [pc, #216]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d061      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d146      	bne.n	8003272 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	4b33      	ldr	r3, [pc, #204]	@ (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fe fbdb 	bl	80019a4 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fe fbd7 	bl	80019a4 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e06d      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	4b29      	ldr	r3, [pc, #164]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003218:	d108      	bne.n	800322c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800321a:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	4921      	ldr	r1, [pc, #132]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a19      	ldr	r1, [r3, #32]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	430b      	orrs	r3, r1
 800323e:	491b      	ldr	r1, [pc, #108]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003244:	4b1b      	ldr	r3, [pc, #108]	@ (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fe fbab 	bl	80019a4 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003252:	f7fe fba7 	bl	80019a4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e03d      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x46a>
 8003270:	e035      	b.n	80032de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe fb94 	bl	80019a4 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fe fb90 	bl	80019a4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e026      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x498>
 800329e:	e01e      	b.n	80032de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e019      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_OscConfig+0x500>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0d0      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b6a      	ldr	r3, [pc, #424]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b67      	ldr	r3, [pc, #412]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4965      	ldr	r1, [pc, #404]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a58      	ldr	r2, [pc, #352]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a52      	ldr	r2, [pc, #328]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800336a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d040      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d115      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b41      	ldr	r3, [pc, #260]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e073      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3d      	ldr	r3, [pc, #244]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06b      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4936      	ldr	r1, [pc, #216]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7fe fae2 	bl	80019a4 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fe fade 	bl	80019a4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e053      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2d      	ldr	r3, [pc, #180]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b27      	ldr	r3, [pc, #156]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d210      	bcs.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b24      	ldr	r3, [pc, #144]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	4922      	ldr	r1, [pc, #136]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003466:	4b12      	ldr	r3, [pc, #72]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <HAL_RCC_ClockConfig+0x1d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fa40 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	080097a8 	.word	0x080097a8
 80034b8:	20000004 	.word	0x20000004
 80034bc:	20000008 	.word	0x20000008

080034c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034da:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x94>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d002      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x30>
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x36>
 80034ee:	e027      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f0:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x98>)
 80034f2:	613b      	str	r3, [r7, #16]
      break;
 80034f4:	e027      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	0c9b      	lsrs	r3, r3, #18
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	4a17      	ldr	r2, [pc, #92]	@ (800355c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003500:	5cd3      	ldrb	r3, [r2, r3]
 8003502:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d010      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800350e:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x94>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	0c5b      	lsrs	r3, r3, #17
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	4a11      	ldr	r2, [pc, #68]	@ (8003560 <HAL_RCC_GetSysClockFreq+0xa0>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a0d      	ldr	r2, [pc, #52]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x98>)
 8003522:	fb03 f202 	mul.w	r2, r3, r2
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e004      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a0c      	ldr	r2, [pc, #48]	@ (8003564 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	613b      	str	r3, [r7, #16]
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x98>)
 8003542:	613b      	str	r3, [r7, #16]
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	693b      	ldr	r3, [r7, #16]
}
 8003548:	4618      	mov	r0, r3
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	007a1200 	.word	0x007a1200
 800355c:	080097c0 	.word	0x080097c0
 8003560:	080097d0 	.word	0x080097d0
 8003564:	003d0900 	.word	0x003d0900

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b02      	ldr	r3, [pc, #8]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x10>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000004 	.word	0x20000004

0800357c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003580:	f7ff fff2 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	0adb      	lsrs	r3, r3, #11
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	@ (80035a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	080097b8 	.word	0x080097b8

080035a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035ac:	4b0a      	ldr	r3, [pc, #40]	@ (80035d8 <RCC_Delay+0x34>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <RCC_Delay+0x38>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0a5b      	lsrs	r3, r3, #9
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035c0:	bf00      	nop
  }
  while (Delay --);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1e5a      	subs	r2, r3, #1
 80035c6:	60fa      	str	r2, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f9      	bne.n	80035c0 <RCC_Delay+0x1c>
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	20000004 	.word	0x20000004
 80035dc:	10624dd3 	.word	0x10624dd3

080035e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d07d      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003600:	4b4f      	ldr	r3, [pc, #316]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360c:	4b4c      	ldr	r3, [pc, #304]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	4a4b      	ldr	r2, [pc, #300]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003616:	61d3      	str	r3, [r2, #28]
 8003618:	4b49      	ldr	r3, [pc, #292]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003624:	2301      	movs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b46      	ldr	r3, [pc, #280]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d118      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003634:	4b43      	ldr	r3, [pc, #268]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a42      	ldr	r2, [pc, #264]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800363e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003640:	f7fe f9b0 	bl	80019a4 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003646:	e008      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003648:	f7fe f9ac 	bl	80019a4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	@ 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e06d      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b3a      	ldr	r3, [pc, #232]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003666:	4b36      	ldr	r3, [pc, #216]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d02e      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	429a      	cmp	r2, r3
 8003682:	d027      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003684:	4b2e      	ldr	r3, [pc, #184]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800368c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800368e:	4b2e      	ldr	r3, [pc, #184]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003694:	4b2c      	ldr	r3, [pc, #176]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800369a:	4a29      	ldr	r2, [pc, #164]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d014      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe f97b 	bl	80019a4 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe f977 	bl	80019a4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e036      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ee      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4917      	ldr	r1, [pc, #92]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b14      	ldr	r3, [pc, #80]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4a13      	ldr	r2, [pc, #76]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003704:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	490b      	ldr	r1, [pc, #44]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003722:	4b07      	ldr	r3, [pc, #28]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4904      	ldr	r1, [pc, #16]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	40007000 	.word	0x40007000
 8003748:	42420440 	.word	0x42420440

0800374c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b10      	cmp	r3, #16
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b10      	cmp	r3, #16
 8003772:	f200 808a 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d045      	beq.n	8003808 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d075      	beq.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003782:	e082      	b.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003784:	4b46      	ldr	r3, [pc, #280]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800378a:	4b45      	ldr	r3, [pc, #276]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d07b      	beq.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	0c9b      	lsrs	r3, r3, #18
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4a41      	ldr	r2, [pc, #260]	@ (80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80037a0:	5cd3      	ldrb	r3, [r2, r3]
 80037a2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d015      	beq.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037ae:	4b3c      	ldr	r3, [pc, #240]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	0c5b      	lsrs	r3, r3, #17
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	4a3b      	ldr	r2, [pc, #236]	@ (80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037c8:	4a38      	ldr	r2, [pc, #224]	@ (80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e004      	b.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4a34      	ldr	r2, [pc, #208]	@ (80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80037e4:	4b2e      	ldr	r3, [pc, #184]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037f0:	d102      	bne.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	61bb      	str	r3, [r7, #24]
      break;
 80037f6:	e04a      	b.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4a2d      	ldr	r2, [pc, #180]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	085b      	lsrs	r3, r3, #1
 8003804:	61bb      	str	r3, [r7, #24]
      break;
 8003806:	e042      	b.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003808:	4b25      	ldr	r3, [pc, #148]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003818:	d108      	bne.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003824:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e01f      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003836:	d109      	bne.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003838:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003844:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	e00f      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003856:	d11c      	bne.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003858:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d016      	beq.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003864:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003868:	61bb      	str	r3, [r7, #24]
      break;
 800386a:	e012      	b.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800386c:	e011      	b.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800386e:	f7ff fe85 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	0b9b      	lsrs	r3, r3, #14
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	3301      	adds	r3, #1
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	61bb      	str	r3, [r7, #24]
      break;
 8003888:	e004      	b.n	8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003892:	bf00      	nop
    }
  }
  return (frequency);
 8003894:	69bb      	ldr	r3, [r7, #24]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	080097d4 	.word	0x080097d4
 80038a8:	080097e4 	.word	0x080097e4
 80038ac:	007a1200 	.word	0x007a1200
 80038b0:	003d0900 	.word	0x003d0900
 80038b4:	aaaaaaab 	.word	0xaaaaaaab

080038b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e041      	b.n	800394e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fe44 	bl	800156c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f000 fc18 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d001      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e03a      	b.n	80039e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a18      	ldr	r2, [pc, #96]	@ (80039f0 <HAL_TIM_Base_Start_IT+0x98>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00e      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x58>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800399a:	d009      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x58>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a14      	ldr	r2, [pc, #80]	@ (80039f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x58>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a13      	ldr	r2, [pc, #76]	@ (80039f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d111      	bne.n	80039d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d010      	beq.n	80039e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d2:	e007      	b.n	80039e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800

080039fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e041      	b.n	8003a92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f839 	bl	8003a9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 fb76 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <HAL_TIM_PWM_Start+0x24>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e022      	b.n	8003b16 <HAL_TIM_PWM_Start+0x6a>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d109      	bne.n	8003aea <HAL_TIM_PWM_Start+0x3e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	e015      	b.n	8003b16 <HAL_TIM_PWM_Start+0x6a>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d109      	bne.n	8003b04 <HAL_TIM_PWM_Start+0x58>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e008      	b.n	8003b16 <HAL_TIM_PWM_Start+0x6a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e05e      	b.n	8003bdc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <HAL_TIM_PWM_Start+0x82>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b2c:	e013      	b.n	8003b56 <HAL_TIM_PWM_Start+0xaa>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d104      	bne.n	8003b3e <HAL_TIM_PWM_Start+0x92>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b3c:	e00b      	b.n	8003b56 <HAL_TIM_PWM_Start+0xaa>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d104      	bne.n	8003b4e <HAL_TIM_PWM_Start+0xa2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b4c:	e003      	b.n	8003b56 <HAL_TIM_PWM_Start+0xaa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2202      	movs	r2, #2
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	6839      	ldr	r1, [r7, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fd70 	bl	8004644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1e      	ldr	r2, [pc, #120]	@ (8003be4 <HAL_TIM_PWM_Start+0x138>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d107      	bne.n	8003b7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a18      	ldr	r2, [pc, #96]	@ (8003be4 <HAL_TIM_PWM_Start+0x138>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_TIM_PWM_Start+0xfa>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b90:	d009      	beq.n	8003ba6 <HAL_TIM_PWM_Start+0xfa>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a14      	ldr	r2, [pc, #80]	@ (8003be8 <HAL_TIM_PWM_Start+0x13c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_TIM_PWM_Start+0xfa>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a12      	ldr	r2, [pc, #72]	@ (8003bec <HAL_TIM_PWM_Start+0x140>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d111      	bne.n	8003bca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b06      	cmp	r3, #6
 8003bb6:	d010      	beq.n	8003bda <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc8:	e007      	b.n	8003bda <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800

08003bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d020      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01b      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0202 	mvn.w	r2, #2
 8003c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fa5a 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa4d 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fa5c 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d020      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0204 	mvn.w	r2, #4
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa34 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa27 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fa36 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d020      	beq.n	8003cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0208 	mvn.w	r2, #8
 8003cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa0e 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fa01 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fa10 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d020      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01b      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0210 	mvn.w	r2, #16
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f9e8 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f9db 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f9ea 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0201 	mvn.w	r2, #1
 8003d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fc ffa4 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00c      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fced 	bl	800475a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f9ba 	bl	8004118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00c      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0220 	mvn.w	r2, #32
 8003dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fcc0 	bl	8004748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e0ae      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b0c      	cmp	r3, #12
 8003dfa:	f200 809f 	bhi.w	8003f3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e39 	.word	0x08003e39
 8003e08:	08003f3d 	.word	0x08003f3d
 8003e0c:	08003f3d 	.word	0x08003f3d
 8003e10:	08003f3d 	.word	0x08003f3d
 8003e14:	08003e79 	.word	0x08003e79
 8003e18:	08003f3d 	.word	0x08003f3d
 8003e1c:	08003f3d 	.word	0x08003f3d
 8003e20:	08003f3d 	.word	0x08003f3d
 8003e24:	08003ebb 	.word	0x08003ebb
 8003e28:	08003f3d 	.word	0x08003f3d
 8003e2c:	08003f3d 	.word	0x08003f3d
 8003e30:	08003f3d 	.word	0x08003f3d
 8003e34:	08003efb 	.word	0x08003efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f9e2 	bl	8004208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0208 	orr.w	r2, r2, #8
 8003e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0204 	bic.w	r2, r2, #4
 8003e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6999      	ldr	r1, [r3, #24]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	619a      	str	r2, [r3, #24]
      break;
 8003e76:	e064      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fa28 	bl	80042d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6999      	ldr	r1, [r3, #24]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	021a      	lsls	r2, r3, #8
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	619a      	str	r2, [r3, #24]
      break;
 8003eb8:	e043      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fa71 	bl	80043a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0208 	orr.w	r2, r2, #8
 8003ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0204 	bic.w	r2, r2, #4
 8003ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69d9      	ldr	r1, [r3, #28]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	61da      	str	r2, [r3, #28]
      break;
 8003ef8:	e023      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fabb 	bl	800447c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69d9      	ldr	r1, [r3, #28]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	021a      	lsls	r2, r3, #8
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	61da      	str	r2, [r3, #28]
      break;
 8003f3a:	e002      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_TIM_ConfigClockSource+0x1c>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e0b4      	b.n	80040da <HAL_TIM_ConfigClockSource+0x186>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa8:	d03e      	beq.n	8004028 <HAL_TIM_ConfigClockSource+0xd4>
 8003faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fae:	f200 8087 	bhi.w	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb6:	f000 8086 	beq.w	80040c6 <HAL_TIM_ConfigClockSource+0x172>
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbe:	d87f      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc0:	2b70      	cmp	r3, #112	@ 0x70
 8003fc2:	d01a      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0xa6>
 8003fc4:	2b70      	cmp	r3, #112	@ 0x70
 8003fc6:	d87b      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b60      	cmp	r3, #96	@ 0x60
 8003fca:	d050      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x11a>
 8003fcc:	2b60      	cmp	r3, #96	@ 0x60
 8003fce:	d877      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd0:	2b50      	cmp	r3, #80	@ 0x50
 8003fd2:	d03c      	beq.n	800404e <HAL_TIM_ConfigClockSource+0xfa>
 8003fd4:	2b50      	cmp	r3, #80	@ 0x50
 8003fd6:	d873      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	d058      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x13a>
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	d86f      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b30      	cmp	r3, #48	@ 0x30
 8003fe2:	d064      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003fe4:	2b30      	cmp	r3, #48	@ 0x30
 8003fe6:	d86b      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d060      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d867      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05c      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d05a      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	e062      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800400a:	f000 fafc 	bl	8004606 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800401c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	609a      	str	r2, [r3, #8]
      break;
 8004026:	e04f      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004038:	f000 fae5 	bl	8004606 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800404a:	609a      	str	r2, [r3, #8]
      break;
 800404c:	e03c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	461a      	mov	r2, r3
 800405c:	f000 fa5c 	bl	8004518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2150      	movs	r1, #80	@ 0x50
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fab3 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 800406c:	e02c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800407a:	461a      	mov	r2, r3
 800407c:	f000 fa7a 	bl	8004574 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2160      	movs	r1, #96	@ 0x60
 8004086:	4618      	mov	r0, r3
 8004088:	f000 faa3 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 800408c:	e01c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	461a      	mov	r2, r3
 800409c:	f000 fa3c 	bl	8004518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2140      	movs	r1, #64	@ 0x40
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fa93 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 80040ac:	e00c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f000 fa8a 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 80040be:	e003      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      break;
 80040c4:	e000      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
	...

0800412c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a2f      	ldr	r2, [pc, #188]	@ (80041fc <TIM_Base_SetConfig+0xd0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414a:	d007      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a2c      	ldr	r2, [pc, #176]	@ (8004200 <TIM_Base_SetConfig+0xd4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a2b      	ldr	r2, [pc, #172]	@ (8004204 <TIM_Base_SetConfig+0xd8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d108      	bne.n	800416e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a22      	ldr	r2, [pc, #136]	@ (80041fc <TIM_Base_SetConfig+0xd0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00b      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417c:	d007      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a1f      	ldr	r2, [pc, #124]	@ (8004200 <TIM_Base_SetConfig+0xd4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a1e      	ldr	r2, [pc, #120]	@ (8004204 <TIM_Base_SetConfig+0xd8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d108      	bne.n	80041a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0d      	ldr	r2, [pc, #52]	@ (80041fc <TIM_Base_SetConfig+0xd0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d103      	bne.n	80041d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f023 0201 	bic.w	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	611a      	str	r2, [r3, #16]
  }
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800

08004208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f023 0201 	bic.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f023 0302 	bic.w	r3, r3, #2
 8004250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a1c      	ldr	r2, [pc, #112]	@ (80042d0 <TIM_OC1_SetConfig+0xc8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d10c      	bne.n	800427e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0308 	bic.w	r3, r3, #8
 800426a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a13      	ldr	r2, [pc, #76]	@ (80042d0 <TIM_OC1_SetConfig+0xc8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d111      	bne.n	80042aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800428c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	621a      	str	r2, [r3, #32]
}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00

080042d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f023 0210 	bic.w	r2, r3, #16
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800430a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0320 	bic.w	r3, r3, #32
 800431e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a1d      	ldr	r2, [pc, #116]	@ (80043a4 <TIM_OC2_SetConfig+0xd0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d10d      	bne.n	8004350 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800433a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800434e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a14      	ldr	r2, [pc, #80]	@ (80043a4 <TIM_OC2_SetConfig+0xd0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d113      	bne.n	8004380 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800435e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	40012c00 	.word	0x40012c00

080043a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1d      	ldr	r2, [pc, #116]	@ (8004478 <TIM_OC3_SetConfig+0xd0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10d      	bne.n	8004422 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800440c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a14      	ldr	r2, [pc, #80]	@ (8004478 <TIM_OC3_SetConfig+0xd0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d113      	bne.n	8004452 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	621a      	str	r2, [r3, #32]
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40012c00 	.word	0x40012c00

0800447c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	031b      	lsls	r3, r3, #12
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004514 <TIM_OC4_SetConfig+0x98>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d109      	bne.n	80044f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	40012c00 	.word	0x40012c00

08004518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f023 0201 	bic.w	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 030a 	bic.w	r3, r3, #10
 8004554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0210 	bic.w	r2, r3, #16
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800459e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	031b      	lsls	r3, r3, #12
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f043 0307 	orr.w	r3, r3, #7
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004606:	b480      	push	{r7}
 8004608:	b087      	sub	sp, #28
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004620:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	021a      	lsls	r2, r3, #8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	431a      	orrs	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4313      	orrs	r3, r2
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	609a      	str	r2, [r3, #8]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2201      	movs	r2, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1a      	ldr	r2, [r3, #32]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	43db      	mvns	r3, r3
 8004666:	401a      	ands	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1a      	ldr	r2, [r3, #32]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	fa01 f303 	lsl.w	r3, r1, r3
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e046      	b.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a16      	ldr	r2, [pc, #88]	@ (800473c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f0:	d009      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a12      	ldr	r2, [pc, #72]	@ (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a10      	ldr	r2, [pc, #64]	@ (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10c      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800470c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800

08004748 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <ECUAL_LCD_4BitModeInit>:
 */

#include "ECUAL_LCD.h"

void ECUAL_LCD_4BitModeInit()
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b09c      	sub	sp, #112	@ 0x70
 8004770:	af00      	add	r7, sp, #0
	// waits 50ms till volt rises
	while(HAL_GetTick() < 50);
 8004772:	bf00      	nop
 8004774:	f7fd f916 	bl	80019a4 <HAL_GetTick>
 8004778:	4603      	mov	r3, r0
 800477a:	2b31      	cmp	r3, #49	@ 0x31
 800477c:	d9fa      	bls.n	8004774 <ECUAL_LCD_4BitModeInit+0x8>

	// start config
	HAL_GPIO_WritePin(LCD16X2_CfgParam.RS_GPIOx, LCD16X2_CfgParam.RS_PINx, GPIO_PIN_RESET);
 800477e:	4b9d      	ldr	r3, [pc, #628]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	4a9c      	ldr	r2, [pc, #624]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004784:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8004786:	2200      	movs	r2, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe fae3 	bl	8002d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_RESET);
 800478e:	4b99      	ldr	r3, [pc, #612]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	4a98      	ldr	r2, [pc, #608]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004794:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004796:	2200      	movs	r2, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe fadb 	bl	8002d54 <HAL_GPIO_WritePin>

	// init sequence: 0x03 x3 then 0x02
	ECUAL_LCD_4BitModeSendData(0x03);
 800479e:	2003      	movs	r0, #3
 80047a0:	f000 f9c0 	bl	8004b24 <ECUAL_LCD_4BitModeSendData>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_SET);
 80047a4:	4b93      	ldr	r3, [pc, #588]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	4a92      	ldr	r2, [pc, #584]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 80047aa:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 80047ac:	2201      	movs	r2, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fad0 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(5);
 80047b4:	2300      	movs	r3, #0
 80047b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047b8:	e01f      	b.n	80047fa <ECUAL_LCD_4BitModeInit+0x8e>
 80047ba:	4b8f      	ldr	r3, [pc, #572]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	4b8e      	ldr	r3, [pc, #568]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a8e      	ldr	r2, [pc, #568]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	0c9b      	lsrs	r3, r3, #18
 80047cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047d0:	fb03 f202 	mul.w	r2, r3, r2
 80047d4:	4b89      	ldr	r3, [pc, #548]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4989      	ldr	r1, [pc, #548]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 80047da:	fba1 1303 	umull	r1, r3, r1, r3
 80047de:	0c9b      	lsrs	r3, r3, #18
 80047e0:	085b      	lsrs	r3, r3, #1
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	607b      	str	r3, [r7, #4]
 80047e6:	4b84      	ldr	r3, [pc, #528]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d8f8      	bhi.n	80047e6 <ECUAL_LCD_4BitModeInit+0x7a>
 80047f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f6:	3301      	adds	r3, #1
 80047f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d9dc      	bls.n	80047ba <ECUAL_LCD_4BitModeInit+0x4e>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_RESET);
 8004800:	4b7c      	ldr	r3, [pc, #496]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4a7b      	ldr	r2, [pc, #492]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004806:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004808:	2200      	movs	r2, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe faa2 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(5);
 8004810:	2300      	movs	r3, #0
 8004812:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004814:	e01f      	b.n	8004856 <ECUAL_LCD_4BitModeInit+0xea>
 8004816:	4b78      	ldr	r3, [pc, #480]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	4b77      	ldr	r3, [pc, #476]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a77      	ldr	r2, [pc, #476]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	0c9b      	lsrs	r3, r3, #18
 8004828:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800482c:	fb03 f202 	mul.w	r2, r3, r2
 8004830:	4b72      	ldr	r3, [pc, #456]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4972      	ldr	r1, [pc, #456]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 8004836:	fba1 1303 	umull	r1, r3, r1, r3
 800483a:	0c9b      	lsrs	r3, r3, #18
 800483c:	085b      	lsrs	r3, r3, #1
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	4b6d      	ldr	r3, [pc, #436]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	429a      	cmp	r2, r3
 800484e:	d8f8      	bhi.n	8004842 <ECUAL_LCD_4BitModeInit+0xd6>
 8004850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004852:	3301      	adds	r3, #1
 8004854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004858:	2b04      	cmp	r3, #4
 800485a:	d9dc      	bls.n	8004816 <ECUAL_LCD_4BitModeInit+0xaa>

	ECUAL_LCD_4BitModeSendData(0x03);
 800485c:	2003      	movs	r0, #3
 800485e:	f000 f961 	bl	8004b24 <ECUAL_LCD_4BitModeSendData>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_SET);
 8004862:	4b64      	ldr	r3, [pc, #400]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	4a63      	ldr	r2, [pc, #396]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004868:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 800486a:	2201      	movs	r2, #1
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fa71 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(5);
 8004872:	2300      	movs	r3, #0
 8004874:	667b      	str	r3, [r7, #100]	@ 0x64
 8004876:	e01f      	b.n	80048b8 <ECUAL_LCD_4BitModeInit+0x14c>
 8004878:	4b5f      	ldr	r3, [pc, #380]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	4b5f      	ldr	r3, [pc, #380]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a5f      	ldr	r2, [pc, #380]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	0c9b      	lsrs	r3, r3, #18
 800488a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800488e:	fb03 f202 	mul.w	r2, r3, r2
 8004892:	4b5a      	ldr	r3, [pc, #360]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	495a      	ldr	r1, [pc, #360]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 8004898:	fba1 1303 	umull	r1, r3, r1, r3
 800489c:	0c9b      	lsrs	r3, r3, #18
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	4b54      	ldr	r3, [pc, #336]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d8f8      	bhi.n	80048a4 <ECUAL_LCD_4BitModeInit+0x138>
 80048b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048b4:	3301      	adds	r3, #1
 80048b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80048b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d9dc      	bls.n	8004878 <ECUAL_LCD_4BitModeInit+0x10c>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_RESET);
 80048be:	4b4d      	ldr	r3, [pc, #308]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4a4c      	ldr	r2, [pc, #304]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 80048c4:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 80048c6:	2200      	movs	r2, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe fa43 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(5);
 80048ce:	2300      	movs	r3, #0
 80048d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80048d2:	e01f      	b.n	8004914 <ECUAL_LCD_4BitModeInit+0x1a8>
 80048d4:	4b48      	ldr	r3, [pc, #288]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	4b48      	ldr	r3, [pc, #288]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a48      	ldr	r2, [pc, #288]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	0c9b      	lsrs	r3, r3, #18
 80048e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80048ea:	fb03 f202 	mul.w	r2, r3, r2
 80048ee:	4b43      	ldr	r3, [pc, #268]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4943      	ldr	r1, [pc, #268]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 80048f4:	fba1 1303 	umull	r1, r3, r1, r3
 80048f8:	0c9b      	lsrs	r3, r3, #18
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	4b3d      	ldr	r3, [pc, #244]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	6a3a      	ldr	r2, [r7, #32]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	429a      	cmp	r2, r3
 800490c:	d8f8      	bhi.n	8004900 <ECUAL_LCD_4BitModeInit+0x194>
 800490e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004910:	3301      	adds	r3, #1
 8004912:	663b      	str	r3, [r7, #96]	@ 0x60
 8004914:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004916:	2b04      	cmp	r3, #4
 8004918:	d9dc      	bls.n	80048d4 <ECUAL_LCD_4BitModeInit+0x168>

	ECUAL_LCD_4BitModeSendData(0x03);
 800491a:	2003      	movs	r0, #3
 800491c:	f000 f902 	bl	8004b24 <ECUAL_LCD_4BitModeSendData>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_SET);
 8004920:	4b34      	ldr	r3, [pc, #208]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	4a33      	ldr	r2, [pc, #204]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004926:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004928:	2201      	movs	r2, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fa12 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(5);
 8004930:	2300      	movs	r3, #0
 8004932:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004934:	e01f      	b.n	8004976 <ECUAL_LCD_4BitModeInit+0x20a>
 8004936:	4b30      	ldr	r3, [pc, #192]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800493c:	4b2f      	ldr	r3, [pc, #188]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2f      	ldr	r2, [pc, #188]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	0c9b      	lsrs	r3, r3, #18
 8004948:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800494c:	fb03 f202 	mul.w	r2, r3, r2
 8004950:	4b2a      	ldr	r3, [pc, #168]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	492a      	ldr	r1, [pc, #168]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 8004956:	fba1 1303 	umull	r1, r3, r1, r3
 800495a:	0c9b      	lsrs	r3, r3, #18
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
 8004962:	4b25      	ldr	r3, [pc, #148]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800496c:	429a      	cmp	r2, r3
 800496e:	d8f8      	bhi.n	8004962 <ECUAL_LCD_4BitModeInit+0x1f6>
 8004970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004972:	3301      	adds	r3, #1
 8004974:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004978:	2b04      	cmp	r3, #4
 800497a:	d9dc      	bls.n	8004936 <ECUAL_LCD_4BitModeInit+0x1ca>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_RESET);
 800497c:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4a1c      	ldr	r2, [pc, #112]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 8004982:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004984:	2200      	movs	r2, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe f9e4 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(5);
 800498c:	2300      	movs	r3, #0
 800498e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004990:	e01f      	b.n	80049d2 <ECUAL_LCD_4BitModeInit+0x266>
 8004992:	4b19      	ldr	r3, [pc, #100]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	633b      	str	r3, [r7, #48]	@ 0x30
 8004998:	4b18      	ldr	r3, [pc, #96]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a18      	ldr	r2, [pc, #96]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	0c9b      	lsrs	r3, r3, #18
 80049a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049a8:	fb03 f202 	mul.w	r2, r3, r2
 80049ac:	4b13      	ldr	r3, [pc, #76]	@ (80049fc <ECUAL_LCD_4BitModeInit+0x290>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4913      	ldr	r1, [pc, #76]	@ (8004a00 <ECUAL_LCD_4BitModeInit+0x294>)
 80049b2:	fba1 1303 	umull	r1, r3, r1, r3
 80049b6:	0c9b      	lsrs	r3, r3, #18
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049be:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <ECUAL_LCD_4BitModeInit+0x28c>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d8f8      	bhi.n	80049be <ECUAL_LCD_4BitModeInit+0x252>
 80049cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049ce:	3301      	adds	r3, #1
 80049d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d9dc      	bls.n	8004992 <ECUAL_LCD_4BitModeInit+0x226>

	ECUAL_LCD_4BitModeSendData(0x02);
 80049d8:	2002      	movs	r0, #2
 80049da:	f000 f8a3 	bl	8004b24 <ECUAL_LCD_4BitModeSendData>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_SET);
 80049de:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4a04      	ldr	r2, [pc, #16]	@ (80049f4 <ECUAL_LCD_4BitModeInit+0x288>)
 80049e4:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 80049e6:	2201      	movs	r2, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe f9b3 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(5);
 80049ee:	2300      	movs	r3, #0
 80049f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80049f2:	e027      	b.n	8004a44 <ECUAL_LCD_4BitModeInit+0x2d8>
 80049f4:	08009778 	.word	0x08009778
 80049f8:	e000e010 	.word	0xe000e010
 80049fc:	20000004 	.word	0x20000004
 8004a00:	431bde83 	.word	0x431bde83
 8004a04:	4b43      	ldr	r3, [pc, #268]	@ (8004b14 <ECUAL_LCD_4BitModeInit+0x3a8>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a0a:	4b43      	ldr	r3, [pc, #268]	@ (8004b18 <ECUAL_LCD_4BitModeInit+0x3ac>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a43      	ldr	r2, [pc, #268]	@ (8004b1c <ECUAL_LCD_4BitModeInit+0x3b0>)
 8004a10:	fba2 2303 	umull	r2, r3, r2, r3
 8004a14:	0c9b      	lsrs	r3, r3, #18
 8004a16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a1a:	fb03 f202 	mul.w	r2, r3, r2
 8004a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b18 <ECUAL_LCD_4BitModeInit+0x3ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	493e      	ldr	r1, [pc, #248]	@ (8004b1c <ECUAL_LCD_4BitModeInit+0x3b0>)
 8004a24:	fba1 1303 	umull	r1, r3, r1, r3
 8004a28:	0c9b      	lsrs	r3, r3, #18
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a30:	4b38      	ldr	r3, [pc, #224]	@ (8004b14 <ECUAL_LCD_4BitModeInit+0x3a8>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d8f8      	bhi.n	8004a30 <ECUAL_LCD_4BitModeInit+0x2c4>
 8004a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a40:	3301      	adds	r3, #1
 8004a42:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d9dc      	bls.n	8004a04 <ECUAL_LCD_4BitModeInit+0x298>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_RESET);
 8004a4a:	4b35      	ldr	r3, [pc, #212]	@ (8004b20 <ECUAL_LCD_4BitModeInit+0x3b4>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a34      	ldr	r2, [pc, #208]	@ (8004b20 <ECUAL_LCD_4BitModeInit+0x3b4>)
 8004a50:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004a52:	2200      	movs	r2, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe f97d 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(5);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a5e:	e01f      	b.n	8004aa0 <ECUAL_LCD_4BitModeInit+0x334>
 8004a60:	4b2c      	ldr	r3, [pc, #176]	@ (8004b14 <ECUAL_LCD_4BitModeInit+0x3a8>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a66:	4b2c      	ldr	r3, [pc, #176]	@ (8004b18 <ECUAL_LCD_4BitModeInit+0x3ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b1c <ECUAL_LCD_4BitModeInit+0x3b0>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	0c9b      	lsrs	r3, r3, #18
 8004a72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a76:	fb03 f202 	mul.w	r2, r3, r2
 8004a7a:	4b27      	ldr	r3, [pc, #156]	@ (8004b18 <ECUAL_LCD_4BitModeInit+0x3ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4927      	ldr	r1, [pc, #156]	@ (8004b1c <ECUAL_LCD_4BitModeInit+0x3b0>)
 8004a80:	fba1 1303 	umull	r1, r3, r1, r3
 8004a84:	0c9b      	lsrs	r3, r3, #18
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a8c:	4b21      	ldr	r3, [pc, #132]	@ (8004b14 <ECUAL_LCD_4BitModeInit+0x3a8>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d8f8      	bhi.n	8004a8c <ECUAL_LCD_4BitModeInit+0x320>
 8004a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d9dc      	bls.n	8004a60 <ECUAL_LCD_4BitModeInit+0x2f4>

	// function set, display on, clear, entry mode
	ECUAL_LCD_4BitModeCMD(0x28);
 8004aa6:	2028      	movs	r0, #40	@ 0x28
 8004aa8:	f000 f986 	bl	8004db8 <ECUAL_LCD_4BitModeCMD>
	ECUAL_LCD_4BitModeCMD(0x0C);
 8004aac:	200c      	movs	r0, #12
 8004aae:	f000 f983 	bl	8004db8 <ECUAL_LCD_4BitModeCMD>
	ECUAL_LCD_4BitModeCMD(0x01);
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	f000 f980 	bl	8004db8 <ECUAL_LCD_4BitModeCMD>
	DELAY_MS(2);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004abc:	e01f      	b.n	8004afe <ECUAL_LCD_4BitModeInit+0x392>
 8004abe:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <ECUAL_LCD_4BitModeInit+0x3a8>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ac4:	4b14      	ldr	r3, [pc, #80]	@ (8004b18 <ECUAL_LCD_4BitModeInit+0x3ac>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a14      	ldr	r2, [pc, #80]	@ (8004b1c <ECUAL_LCD_4BitModeInit+0x3b0>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	0c9b      	lsrs	r3, r3, #18
 8004ad0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ad4:	fb03 f202 	mul.w	r2, r3, r2
 8004ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b18 <ECUAL_LCD_4BitModeInit+0x3ac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	490f      	ldr	r1, [pc, #60]	@ (8004b1c <ECUAL_LCD_4BitModeInit+0x3b0>)
 8004ade:	fba1 1303 	umull	r1, r3, r1, r3
 8004ae2:	0c9b      	lsrs	r3, r3, #18
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aea:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <ECUAL_LCD_4BitModeInit+0x3a8>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d8f8      	bhi.n	8004aea <ECUAL_LCD_4BitModeInit+0x37e>
 8004af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004afa:	3301      	adds	r3, #1
 8004afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d9dc      	bls.n	8004abe <ECUAL_LCD_4BitModeInit+0x352>
	ECUAL_LCD_4BitModeCMD(0x06);
 8004b04:	2006      	movs	r0, #6
 8004b06:	f000 f957 	bl	8004db8 <ECUAL_LCD_4BitModeCMD>
}
 8004b0a:	bf00      	nop
 8004b0c:	3770      	adds	r7, #112	@ 0x70
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	e000e010 	.word	0xe000e010
 8004b18:	20000004 	.word	0x20000004
 8004b1c:	431bde83 	.word	0x431bde83
 8004b20:	08009778 	.word	0x08009778

08004b24 <ECUAL_LCD_4BitModeSendData>:

void ECUAL_LCD_4BitModeSendData(unsigned char data)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
	if(data & 1) HAL_GPIO_WritePin(LCD16X2_CfgParam.D4_GPIOx, LCD16X2_CfgParam.D4_PINx, GPIO_PIN_SET);
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <ECUAL_LCD_4BitModeSendData+0x26>
 8004b38:	4b2b      	ldr	r3, [pc, #172]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004b3e:	8891      	ldrh	r1, [r2, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe f906 	bl	8002d54 <HAL_GPIO_WritePin>
 8004b48:	e007      	b.n	8004b5a <ECUAL_LCD_4BitModeSendData+0x36>
	else HAL_GPIO_WritePin(LCD16X2_CfgParam.D4_GPIOx, LCD16X2_CfgParam.D4_PINx, GPIO_PIN_RESET);
 8004b4a:	4b27      	ldr	r3, [pc, #156]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a26      	ldr	r2, [pc, #152]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004b50:	8891      	ldrh	r1, [r2, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe f8fd 	bl	8002d54 <HAL_GPIO_WritePin>

	if(data & 2) HAL_GPIO_WritePin(LCD16X2_CfgParam.D5_GPIOx, LCD16X2_CfgParam.D5_PINx, GPIO_PIN_SET);
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <ECUAL_LCD_4BitModeSendData+0x52>
 8004b64:	4b20      	ldr	r3, [pc, #128]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4a1f      	ldr	r2, [pc, #124]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004b6a:	8991      	ldrh	r1, [r2, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe f8f0 	bl	8002d54 <HAL_GPIO_WritePin>
 8004b74:	e007      	b.n	8004b86 <ECUAL_LCD_4BitModeSendData+0x62>
	else HAL_GPIO_WritePin(LCD16X2_CfgParam.D5_GPIOx, LCD16X2_CfgParam.D5_PINx, GPIO_PIN_RESET);
 8004b76:	4b1c      	ldr	r3, [pc, #112]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004b7c:	8991      	ldrh	r1, [r2, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe f8e7 	bl	8002d54 <HAL_GPIO_WritePin>

	if(data & 4) HAL_GPIO_WritePin(LCD16X2_CfgParam.D6_GPIOx, LCD16X2_CfgParam.D6_PINx, GPIO_PIN_SET);
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <ECUAL_LCD_4BitModeSendData+0x7e>
 8004b90:	4b15      	ldr	r3, [pc, #84]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	4a14      	ldr	r2, [pc, #80]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004b96:	8a91      	ldrh	r1, [r2, #20]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe f8da 	bl	8002d54 <HAL_GPIO_WritePin>
 8004ba0:	e007      	b.n	8004bb2 <ECUAL_LCD_4BitModeSendData+0x8e>
	else HAL_GPIO_WritePin(LCD16X2_CfgParam.D6_GPIOx, LCD16X2_CfgParam.D6_PINx, GPIO_PIN_RESET);
 8004ba2:	4b11      	ldr	r3, [pc, #68]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	4a10      	ldr	r2, [pc, #64]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004ba8:	8a91      	ldrh	r1, [r2, #20]
 8004baa:	2200      	movs	r2, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe f8d1 	bl	8002d54 <HAL_GPIO_WritePin>

	if(data & 8) HAL_GPIO_WritePin(LCD16X2_CfgParam.D7_GPIOx, LCD16X2_CfgParam.D7_PINx, GPIO_PIN_SET);
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <ECUAL_LCD_4BitModeSendData+0xaa>
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	4a09      	ldr	r2, [pc, #36]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004bc2:	8b91      	ldrh	r1, [r2, #28]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe f8c4 	bl	8002d54 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LCD16X2_CfgParam.D7_GPIOx, LCD16X2_CfgParam.D7_PINx, GPIO_PIN_RESET);
}
 8004bcc:	e007      	b.n	8004bde <ECUAL_LCD_4BitModeSendData+0xba>
	else HAL_GPIO_WritePin(LCD16X2_CfgParam.D7_GPIOx, LCD16X2_CfgParam.D7_PINx, GPIO_PIN_RESET);
 8004bce:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	4a05      	ldr	r2, [pc, #20]	@ (8004be8 <ECUAL_LCD_4BitModeSendData+0xc4>)
 8004bd4:	8b91      	ldrh	r1, [r2, #28]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe f8bb 	bl	8002d54 <HAL_GPIO_WritePin>
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	08009778 	.word	0x08009778

08004bec <ECUAL_LCD_4BitModeWriteByte>:

void ECUAL_LCD_4BitModeWriteByte(unsigned char data)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b090      	sub	sp, #64	@ 0x40
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71fb      	strb	r3, [r7, #7]
	unsigned char low, high;
	high = (data >> 4) & 0x0F;
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	low  = data & 0x0F;
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	HAL_GPIO_WritePin(LCD16X2_CfgParam.RS_GPIOx, LCD16X2_CfgParam.RS_PINx, GPIO_PIN_SET);
 8004c08:	4b67      	ldr	r3, [pc, #412]	@ (8004da8 <ECUAL_LCD_4BitModeWriteByte+0x1bc>)
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	4a66      	ldr	r2, [pc, #408]	@ (8004da8 <ECUAL_LCD_4BitModeWriteByte+0x1bc>)
 8004c0e:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8004c10:	2201      	movs	r2, #1
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe f89e 	bl	8002d54 <HAL_GPIO_WritePin>

	ECUAL_LCD_4BitModeSendData(high);
 8004c18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff ff81 	bl	8004b24 <ECUAL_LCD_4BitModeSendData>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_SET);
 8004c22:	4b61      	ldr	r3, [pc, #388]	@ (8004da8 <ECUAL_LCD_4BitModeWriteByte+0x1bc>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4a60      	ldr	r2, [pc, #384]	@ (8004da8 <ECUAL_LCD_4BitModeWriteByte+0x1bc>)
 8004c28:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe f891 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(1);
 8004c32:	2300      	movs	r3, #0
 8004c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c36:	e01f      	b.n	8004c78 <ECUAL_LCD_4BitModeWriteByte+0x8c>
 8004c38:	4b5c      	ldr	r3, [pc, #368]	@ (8004dac <ECUAL_LCD_4BitModeWriteByte+0x1c0>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	4b5c      	ldr	r3, [pc, #368]	@ (8004db0 <ECUAL_LCD_4BitModeWriteByte+0x1c4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a5c      	ldr	r2, [pc, #368]	@ (8004db4 <ECUAL_LCD_4BitModeWriteByte+0x1c8>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	0c9b      	lsrs	r3, r3, #18
 8004c4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c4e:	fb03 f202 	mul.w	r2, r3, r2
 8004c52:	4b57      	ldr	r3, [pc, #348]	@ (8004db0 <ECUAL_LCD_4BitModeWriteByte+0x1c4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4957      	ldr	r1, [pc, #348]	@ (8004db4 <ECUAL_LCD_4BitModeWriteByte+0x1c8>)
 8004c58:	fba1 1303 	umull	r1, r3, r1, r3
 8004c5c:	0c9b      	lsrs	r3, r3, #18
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	4b51      	ldr	r3, [pc, #324]	@ (8004dac <ECUAL_LCD_4BitModeWriteByte+0x1c0>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d8f8      	bhi.n	8004c64 <ECUAL_LCD_4BitModeWriteByte+0x78>
 8004c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c74:	3301      	adds	r3, #1
 8004c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0dc      	beq.n	8004c38 <ECUAL_LCD_4BitModeWriteByte+0x4c>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_RESET);
 8004c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004da8 <ECUAL_LCD_4BitModeWriteByte+0x1bc>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4a49      	ldr	r2, [pc, #292]	@ (8004da8 <ECUAL_LCD_4BitModeWriteByte+0x1bc>)
 8004c84:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004c86:	2200      	movs	r2, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fe f863 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(1);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c92:	e01f      	b.n	8004cd4 <ECUAL_LCD_4BitModeWriteByte+0xe8>
 8004c94:	4b45      	ldr	r3, [pc, #276]	@ (8004dac <ECUAL_LCD_4BitModeWriteByte+0x1c0>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	4b45      	ldr	r3, [pc, #276]	@ (8004db0 <ECUAL_LCD_4BitModeWriteByte+0x1c4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a45      	ldr	r2, [pc, #276]	@ (8004db4 <ECUAL_LCD_4BitModeWriteByte+0x1c8>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	0c9b      	lsrs	r3, r3, #18
 8004ca6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004caa:	fb03 f202 	mul.w	r2, r3, r2
 8004cae:	4b40      	ldr	r3, [pc, #256]	@ (8004db0 <ECUAL_LCD_4BitModeWriteByte+0x1c4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4940      	ldr	r1, [pc, #256]	@ (8004db4 <ECUAL_LCD_4BitModeWriteByte+0x1c8>)
 8004cb4:	fba1 1303 	umull	r1, r3, r1, r3
 8004cb8:	0c9b      	lsrs	r3, r3, #18
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8004dac <ECUAL_LCD_4BitModeWriteByte+0x1c0>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d8f8      	bhi.n	8004cc0 <ECUAL_LCD_4BitModeWriteByte+0xd4>
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0dc      	beq.n	8004c94 <ECUAL_LCD_4BitModeWriteByte+0xa8>

	ECUAL_LCD_4BitModeSendData(low);
 8004cda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff ff20 	bl	8004b24 <ECUAL_LCD_4BitModeSendData>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_SET);
 8004ce4:	4b30      	ldr	r3, [pc, #192]	@ (8004da8 <ECUAL_LCD_4BitModeWriteByte+0x1bc>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8004da8 <ECUAL_LCD_4BitModeWriteByte+0x1bc>)
 8004cea:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004cec:	2201      	movs	r2, #1
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe f830 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(1);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cf8:	e01f      	b.n	8004d3a <ECUAL_LCD_4BitModeWriteByte+0x14e>
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004dac <ECUAL_LCD_4BitModeWriteByte+0x1c0>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	4b2b      	ldr	r3, [pc, #172]	@ (8004db0 <ECUAL_LCD_4BitModeWriteByte+0x1c4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2b      	ldr	r2, [pc, #172]	@ (8004db4 <ECUAL_LCD_4BitModeWriteByte+0x1c8>)
 8004d06:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0a:	0c9b      	lsrs	r3, r3, #18
 8004d0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d10:	fb03 f202 	mul.w	r2, r3, r2
 8004d14:	4b26      	ldr	r3, [pc, #152]	@ (8004db0 <ECUAL_LCD_4BitModeWriteByte+0x1c4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4926      	ldr	r1, [pc, #152]	@ (8004db4 <ECUAL_LCD_4BitModeWriteByte+0x1c8>)
 8004d1a:	fba1 1303 	umull	r1, r3, r1, r3
 8004d1e:	0c9b      	lsrs	r3, r3, #18
 8004d20:	085b      	lsrs	r3, r3, #1
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	4b21      	ldr	r3, [pc, #132]	@ (8004dac <ECUAL_LCD_4BitModeWriteByte+0x1c0>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	6a3a      	ldr	r2, [r7, #32]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d8f8      	bhi.n	8004d26 <ECUAL_LCD_4BitModeWriteByte+0x13a>
 8004d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d36:	3301      	adds	r3, #1
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0dc      	beq.n	8004cfa <ECUAL_LCD_4BitModeWriteByte+0x10e>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_RESET);
 8004d40:	4b19      	ldr	r3, [pc, #100]	@ (8004da8 <ECUAL_LCD_4BitModeWriteByte+0x1bc>)
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	4a18      	ldr	r2, [pc, #96]	@ (8004da8 <ECUAL_LCD_4BitModeWriteByte+0x1bc>)
 8004d46:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004d48:	2200      	movs	r2, #0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe f802 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(1);
 8004d50:	2300      	movs	r3, #0
 8004d52:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d54:	e01f      	b.n	8004d96 <ECUAL_LCD_4BitModeWriteByte+0x1aa>
 8004d56:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <ECUAL_LCD_4BitModeWriteByte+0x1c0>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d5c:	4b14      	ldr	r3, [pc, #80]	@ (8004db0 <ECUAL_LCD_4BitModeWriteByte+0x1c4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a14      	ldr	r2, [pc, #80]	@ (8004db4 <ECUAL_LCD_4BitModeWriteByte+0x1c8>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	0c9b      	lsrs	r3, r3, #18
 8004d68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d6c:	fb03 f202 	mul.w	r2, r3, r2
 8004d70:	4b0f      	ldr	r3, [pc, #60]	@ (8004db0 <ECUAL_LCD_4BitModeWriteByte+0x1c4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	490f      	ldr	r1, [pc, #60]	@ (8004db4 <ECUAL_LCD_4BitModeWriteByte+0x1c8>)
 8004d76:	fba1 1303 	umull	r1, r3, r1, r3
 8004d7a:	0c9b      	lsrs	r3, r3, #18
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <ECUAL_LCD_4BitModeWriteByte+0x1c0>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d8f8      	bhi.n	8004d82 <ECUAL_LCD_4BitModeWriteByte+0x196>
 8004d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d92:	3301      	adds	r3, #1
 8004d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0dc      	beq.n	8004d56 <ECUAL_LCD_4BitModeWriteByte+0x16a>
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	3740      	adds	r7, #64	@ 0x40
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	08009778 	.word	0x08009778
 8004dac:	e000e010 	.word	0xe000e010
 8004db0:	20000004 	.word	0x20000004
 8004db4:	431bde83 	.word	0x431bde83

08004db8 <ECUAL_LCD_4BitModeCMD>:

void ECUAL_LCD_4BitModeCMD(unsigned char cmd)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b090      	sub	sp, #64	@ 0x40
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	71fb      	strb	r3, [r7, #7]
	unsigned char low, high;
	high = (cmd >> 4) & 0x0F;
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	low  = cmd & 0x0F;
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	HAL_GPIO_WritePin(LCD16X2_CfgParam.RS_GPIOx, LCD16X2_CfgParam.RS_PINx, GPIO_PIN_RESET);
 8004dd4:	4b67      	ldr	r3, [pc, #412]	@ (8004f74 <ECUAL_LCD_4BitModeCMD+0x1bc>)
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	4a66      	ldr	r2, [pc, #408]	@ (8004f74 <ECUAL_LCD_4BitModeCMD+0x1bc>)
 8004dda:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8004ddc:	2200      	movs	r2, #0
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd ffb8 	bl	8002d54 <HAL_GPIO_WritePin>

	ECUAL_LCD_4BitModeSendData(high);
 8004de4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fe9b 	bl	8004b24 <ECUAL_LCD_4BitModeSendData>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_SET);
 8004dee:	4b61      	ldr	r3, [pc, #388]	@ (8004f74 <ECUAL_LCD_4BitModeCMD+0x1bc>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	4a60      	ldr	r2, [pc, #384]	@ (8004f74 <ECUAL_LCD_4BitModeCMD+0x1bc>)
 8004df4:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004df6:	2201      	movs	r2, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fd ffab 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(1);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e02:	e01f      	b.n	8004e44 <ECUAL_LCD_4BitModeCMD+0x8c>
 8004e04:	4b5c      	ldr	r3, [pc, #368]	@ (8004f78 <ECUAL_LCD_4BitModeCMD+0x1c0>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8004f7c <ECUAL_LCD_4BitModeCMD+0x1c4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a5c      	ldr	r2, [pc, #368]	@ (8004f80 <ECUAL_LCD_4BitModeCMD+0x1c8>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	0c9b      	lsrs	r3, r3, #18
 8004e16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e1a:	fb03 f202 	mul.w	r2, r3, r2
 8004e1e:	4b57      	ldr	r3, [pc, #348]	@ (8004f7c <ECUAL_LCD_4BitModeCMD+0x1c4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4957      	ldr	r1, [pc, #348]	@ (8004f80 <ECUAL_LCD_4BitModeCMD+0x1c8>)
 8004e24:	fba1 1303 	umull	r1, r3, r1, r3
 8004e28:	0c9b      	lsrs	r3, r3, #18
 8004e2a:	085b      	lsrs	r3, r3, #1
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	4b51      	ldr	r3, [pc, #324]	@ (8004f78 <ECUAL_LCD_4BitModeCMD+0x1c0>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d8f8      	bhi.n	8004e30 <ECUAL_LCD_4BitModeCMD+0x78>
 8004e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e40:	3301      	adds	r3, #1
 8004e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0dc      	beq.n	8004e04 <ECUAL_LCD_4BitModeCMD+0x4c>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_RESET);
 8004e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f74 <ECUAL_LCD_4BitModeCMD+0x1bc>)
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	4a49      	ldr	r2, [pc, #292]	@ (8004f74 <ECUAL_LCD_4BitModeCMD+0x1bc>)
 8004e50:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004e52:	2200      	movs	r2, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fd ff7d 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(1);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e5e:	e01f      	b.n	8004ea0 <ECUAL_LCD_4BitModeCMD+0xe8>
 8004e60:	4b45      	ldr	r3, [pc, #276]	@ (8004f78 <ECUAL_LCD_4BitModeCMD+0x1c0>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	4b45      	ldr	r3, [pc, #276]	@ (8004f7c <ECUAL_LCD_4BitModeCMD+0x1c4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a45      	ldr	r2, [pc, #276]	@ (8004f80 <ECUAL_LCD_4BitModeCMD+0x1c8>)
 8004e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e70:	0c9b      	lsrs	r3, r3, #18
 8004e72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e76:	fb03 f202 	mul.w	r2, r3, r2
 8004e7a:	4b40      	ldr	r3, [pc, #256]	@ (8004f7c <ECUAL_LCD_4BitModeCMD+0x1c4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4940      	ldr	r1, [pc, #256]	@ (8004f80 <ECUAL_LCD_4BitModeCMD+0x1c8>)
 8004e80:	fba1 1303 	umull	r1, r3, r1, r3
 8004e84:	0c9b      	lsrs	r3, r3, #18
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f78 <ECUAL_LCD_4BitModeCMD+0x1c0>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d8f8      	bhi.n	8004e8c <ECUAL_LCD_4BitModeCMD+0xd4>
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0dc      	beq.n	8004e60 <ECUAL_LCD_4BitModeCMD+0xa8>

	ECUAL_LCD_4BitModeSendData(low);
 8004ea6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fe3a 	bl	8004b24 <ECUAL_LCD_4BitModeSendData>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_SET);
 8004eb0:	4b30      	ldr	r3, [pc, #192]	@ (8004f74 <ECUAL_LCD_4BitModeCMD+0x1bc>)
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	4a2f      	ldr	r2, [pc, #188]	@ (8004f74 <ECUAL_LCD_4BitModeCMD+0x1bc>)
 8004eb6:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fd ff4a 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(1);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec4:	e01f      	b.n	8004f06 <ECUAL_LCD_4BitModeCMD+0x14e>
 8004ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f78 <ECUAL_LCD_4BitModeCMD+0x1c0>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	623b      	str	r3, [r7, #32]
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f7c <ECUAL_LCD_4BitModeCMD+0x1c4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8004f80 <ECUAL_LCD_4BitModeCMD+0x1c8>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	0c9b      	lsrs	r3, r3, #18
 8004ed8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004edc:	fb03 f202 	mul.w	r2, r3, r2
 8004ee0:	4b26      	ldr	r3, [pc, #152]	@ (8004f7c <ECUAL_LCD_4BitModeCMD+0x1c4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4926      	ldr	r1, [pc, #152]	@ (8004f80 <ECUAL_LCD_4BitModeCMD+0x1c8>)
 8004ee6:	fba1 1303 	umull	r1, r3, r1, r3
 8004eea:	0c9b      	lsrs	r3, r3, #18
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	4b21      	ldr	r3, [pc, #132]	@ (8004f78 <ECUAL_LCD_4BitModeCMD+0x1c0>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	6a3a      	ldr	r2, [r7, #32]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d8f8      	bhi.n	8004ef2 <ECUAL_LCD_4BitModeCMD+0x13a>
 8004f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f02:	3301      	adds	r3, #1
 8004f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0dc      	beq.n	8004ec6 <ECUAL_LCD_4BitModeCMD+0x10e>
	HAL_GPIO_WritePin(LCD16X2_CfgParam.EN_GPIOx, LCD16X2_CfgParam.EN_PINx, GPIO_PIN_RESET);
 8004f0c:	4b19      	ldr	r3, [pc, #100]	@ (8004f74 <ECUAL_LCD_4BitModeCMD+0x1bc>)
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	4a18      	ldr	r2, [pc, #96]	@ (8004f74 <ECUAL_LCD_4BitModeCMD+0x1bc>)
 8004f12:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8004f14:	2200      	movs	r2, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fd ff1c 	bl	8002d54 <HAL_GPIO_WritePin>
	DELAY_MS(1);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f20:	e01f      	b.n	8004f62 <ECUAL_LCD_4BitModeCMD+0x1aa>
 8004f22:	4b15      	ldr	r3, [pc, #84]	@ (8004f78 <ECUAL_LCD_4BitModeCMD+0x1c0>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f28:	4b14      	ldr	r3, [pc, #80]	@ (8004f7c <ECUAL_LCD_4BitModeCMD+0x1c4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a14      	ldr	r2, [pc, #80]	@ (8004f80 <ECUAL_LCD_4BitModeCMD+0x1c8>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	0c9b      	lsrs	r3, r3, #18
 8004f34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f38:	fb03 f202 	mul.w	r2, r3, r2
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <ECUAL_LCD_4BitModeCMD+0x1c4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	490f      	ldr	r1, [pc, #60]	@ (8004f80 <ECUAL_LCD_4BitModeCMD+0x1c8>)
 8004f42:	fba1 1303 	umull	r1, r3, r1, r3
 8004f46:	0c9b      	lsrs	r3, r3, #18
 8004f48:	085b      	lsrs	r3, r3, #1
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <ECUAL_LCD_4BitModeCMD+0x1c0>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d8f8      	bhi.n	8004f4e <ECUAL_LCD_4BitModeCMD+0x196>
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	3301      	adds	r3, #1
 8004f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0dc      	beq.n	8004f22 <ECUAL_LCD_4BitModeCMD+0x16a>
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	3740      	adds	r7, #64	@ 0x40
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	08009778 	.word	0x08009778
 8004f78:	e000e010 	.word	0xe000e010
 8004f7c:	20000004 	.word	0x20000004
 8004f80:	431bde83 	.word	0x431bde83

08004f84 <ECUAL_LCD_4BitModeClear>:

void ECUAL_LCD_4BitModeClear(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
	ECUAL_LCD_4BitModeCMD(0x01);
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	f7ff ff14 	bl	8004db8 <ECUAL_LCD_4BitModeCMD>
	DELAY_MS(2);
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e01f      	b.n	8004fd6 <ECUAL_LCD_4BitModeClear+0x52>
 8004f96:	4b14      	ldr	r3, [pc, #80]	@ (8004fe8 <ECUAL_LCD_4BitModeClear+0x64>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60bb      	str	r3, [r7, #8]
 8004f9c:	4b13      	ldr	r3, [pc, #76]	@ (8004fec <ECUAL_LCD_4BitModeClear+0x68>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a13      	ldr	r2, [pc, #76]	@ (8004ff0 <ECUAL_LCD_4BitModeClear+0x6c>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	0c9b      	lsrs	r3, r3, #18
 8004fa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fac:	fb03 f202 	mul.w	r2, r3, r2
 8004fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8004fec <ECUAL_LCD_4BitModeClear+0x68>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	490e      	ldr	r1, [pc, #56]	@ (8004ff0 <ECUAL_LCD_4BitModeClear+0x6c>)
 8004fb6:	fba1 1303 	umull	r1, r3, r1, r3
 8004fba:	0c9b      	lsrs	r3, r3, #18
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	4b09      	ldr	r3, [pc, #36]	@ (8004fe8 <ECUAL_LCD_4BitModeClear+0x64>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d8f8      	bhi.n	8004fc2 <ECUAL_LCD_4BitModeClear+0x3e>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d9dc      	bls.n	8004f96 <ECUAL_LCD_4BitModeClear+0x12>
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	e000e010 	.word	0xe000e010
 8004fec:	20000004 	.word	0x20000004
 8004ff0:	431bde83 	.word	0x431bde83

08004ff4 <ECUAL_LCD_4BitModeWriteString>:

void ECUAL_LCD_4BitModeWriteString(const char* str)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0; str[i] != '\0'; i++)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e009      	b.n	8005016 <ECUAL_LCD_4BitModeWriteString+0x22>
	{
		ECUAL_LCD_4BitModeWriteByte(str[i]);
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	4413      	add	r3, r2
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fdee 	bl	8004bec <ECUAL_LCD_4BitModeWriteByte>
	for(i = 0; str[i] != '\0'; i++)
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	3301      	adds	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	4413      	add	r3, r2
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1ef      	bne.n	8005002 <ECUAL_LCD_4BitModeWriteString+0xe>
	}
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <ECUAL_LCD_4BitModeSetCursor>:

void ECUAL_LCD_4BitModeSetCursor(uint8_t col, uint8_t row)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	460a      	mov	r2, r1
 8005036:	71fb      	strb	r3, [r7, #7]
 8005038:	4613      	mov	r3, r2
 800503a:	71bb      	strb	r3, [r7, #6]
	unsigned char addr;

	if(row == 0) addr = 0x80 + col;
 800503c:	79bb      	ldrb	r3, [r7, #6]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <ECUAL_LCD_4BitModeSetCursor+0x1e>
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	3b80      	subs	r3, #128	@ 0x80
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	e002      	b.n	8005050 <ECUAL_LCD_4BitModeSetCursor+0x24>
	else addr = 0xC0 + col;
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	3b40      	subs	r3, #64	@ 0x40
 800504e:	73fb      	strb	r3, [r7, #15]

	ECUAL_LCD_4BitModeCMD(addr);
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff feb0 	bl	8004db8 <ECUAL_LCD_4BitModeCMD>
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <__cvt>:
 8005060:	2b00      	cmp	r3, #0
 8005062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005066:	461d      	mov	r5, r3
 8005068:	bfbb      	ittet	lt
 800506a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800506e:	461d      	movlt	r5, r3
 8005070:	2300      	movge	r3, #0
 8005072:	232d      	movlt	r3, #45	@ 0x2d
 8005074:	b088      	sub	sp, #32
 8005076:	4614      	mov	r4, r2
 8005078:	bfb8      	it	lt
 800507a:	4614      	movlt	r4, r2
 800507c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800507e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005080:	7013      	strb	r3, [r2, #0]
 8005082:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005084:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005088:	f023 0820 	bic.w	r8, r3, #32
 800508c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005090:	d005      	beq.n	800509e <__cvt+0x3e>
 8005092:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005096:	d100      	bne.n	800509a <__cvt+0x3a>
 8005098:	3601      	adds	r6, #1
 800509a:	2302      	movs	r3, #2
 800509c:	e000      	b.n	80050a0 <__cvt+0x40>
 800509e:	2303      	movs	r3, #3
 80050a0:	aa07      	add	r2, sp, #28
 80050a2:	9204      	str	r2, [sp, #16]
 80050a4:	aa06      	add	r2, sp, #24
 80050a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050aa:	e9cd 3600 	strd	r3, r6, [sp]
 80050ae:	4622      	mov	r2, r4
 80050b0:	462b      	mov	r3, r5
 80050b2:	f001 f87d 	bl	80061b0 <_dtoa_r>
 80050b6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80050ba:	4607      	mov	r7, r0
 80050bc:	d119      	bne.n	80050f2 <__cvt+0x92>
 80050be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80050c0:	07db      	lsls	r3, r3, #31
 80050c2:	d50e      	bpl.n	80050e2 <__cvt+0x82>
 80050c4:	eb00 0906 	add.w	r9, r0, r6
 80050c8:	2200      	movs	r2, #0
 80050ca:	2300      	movs	r3, #0
 80050cc:	4620      	mov	r0, r4
 80050ce:	4629      	mov	r1, r5
 80050d0:	f7fb fc6a 	bl	80009a8 <__aeabi_dcmpeq>
 80050d4:	b108      	cbz	r0, 80050da <__cvt+0x7a>
 80050d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80050da:	2230      	movs	r2, #48	@ 0x30
 80050dc:	9b07      	ldr	r3, [sp, #28]
 80050de:	454b      	cmp	r3, r9
 80050e0:	d31e      	bcc.n	8005120 <__cvt+0xc0>
 80050e2:	4638      	mov	r0, r7
 80050e4:	9b07      	ldr	r3, [sp, #28]
 80050e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80050e8:	1bdb      	subs	r3, r3, r7
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	b008      	add	sp, #32
 80050ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050f6:	eb00 0906 	add.w	r9, r0, r6
 80050fa:	d1e5      	bne.n	80050c8 <__cvt+0x68>
 80050fc:	7803      	ldrb	r3, [r0, #0]
 80050fe:	2b30      	cmp	r3, #48	@ 0x30
 8005100:	d10a      	bne.n	8005118 <__cvt+0xb8>
 8005102:	2200      	movs	r2, #0
 8005104:	2300      	movs	r3, #0
 8005106:	4620      	mov	r0, r4
 8005108:	4629      	mov	r1, r5
 800510a:	f7fb fc4d 	bl	80009a8 <__aeabi_dcmpeq>
 800510e:	b918      	cbnz	r0, 8005118 <__cvt+0xb8>
 8005110:	f1c6 0601 	rsb	r6, r6, #1
 8005114:	f8ca 6000 	str.w	r6, [sl]
 8005118:	f8da 3000 	ldr.w	r3, [sl]
 800511c:	4499      	add	r9, r3
 800511e:	e7d3      	b.n	80050c8 <__cvt+0x68>
 8005120:	1c59      	adds	r1, r3, #1
 8005122:	9107      	str	r1, [sp, #28]
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	e7d9      	b.n	80050dc <__cvt+0x7c>

08005128 <__exponent>:
 8005128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800512a:	2900      	cmp	r1, #0
 800512c:	bfb6      	itet	lt
 800512e:	232d      	movlt	r3, #45	@ 0x2d
 8005130:	232b      	movge	r3, #43	@ 0x2b
 8005132:	4249      	neglt	r1, r1
 8005134:	2909      	cmp	r1, #9
 8005136:	7002      	strb	r2, [r0, #0]
 8005138:	7043      	strb	r3, [r0, #1]
 800513a:	dd29      	ble.n	8005190 <__exponent+0x68>
 800513c:	f10d 0307 	add.w	r3, sp, #7
 8005140:	461d      	mov	r5, r3
 8005142:	270a      	movs	r7, #10
 8005144:	fbb1 f6f7 	udiv	r6, r1, r7
 8005148:	461a      	mov	r2, r3
 800514a:	fb07 1416 	mls	r4, r7, r6, r1
 800514e:	3430      	adds	r4, #48	@ 0x30
 8005150:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005154:	460c      	mov	r4, r1
 8005156:	2c63      	cmp	r4, #99	@ 0x63
 8005158:	4631      	mov	r1, r6
 800515a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800515e:	dcf1      	bgt.n	8005144 <__exponent+0x1c>
 8005160:	3130      	adds	r1, #48	@ 0x30
 8005162:	1e94      	subs	r4, r2, #2
 8005164:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005168:	4623      	mov	r3, r4
 800516a:	1c41      	adds	r1, r0, #1
 800516c:	42ab      	cmp	r3, r5
 800516e:	d30a      	bcc.n	8005186 <__exponent+0x5e>
 8005170:	f10d 0309 	add.w	r3, sp, #9
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	42ac      	cmp	r4, r5
 8005178:	bf88      	it	hi
 800517a:	2300      	movhi	r3, #0
 800517c:	3302      	adds	r3, #2
 800517e:	4403      	add	r3, r0
 8005180:	1a18      	subs	r0, r3, r0
 8005182:	b003      	add	sp, #12
 8005184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005186:	f813 6b01 	ldrb.w	r6, [r3], #1
 800518a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800518e:	e7ed      	b.n	800516c <__exponent+0x44>
 8005190:	2330      	movs	r3, #48	@ 0x30
 8005192:	3130      	adds	r1, #48	@ 0x30
 8005194:	7083      	strb	r3, [r0, #2]
 8005196:	70c1      	strb	r1, [r0, #3]
 8005198:	1d03      	adds	r3, r0, #4
 800519a:	e7f1      	b.n	8005180 <__exponent+0x58>

0800519c <_printf_float>:
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	b091      	sub	sp, #68	@ 0x44
 80051a2:	460c      	mov	r4, r1
 80051a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80051a8:	4616      	mov	r6, r2
 80051aa:	461f      	mov	r7, r3
 80051ac:	4605      	mov	r5, r0
 80051ae:	f000 feeb 	bl	8005f88 <_localeconv_r>
 80051b2:	6803      	ldr	r3, [r0, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	9308      	str	r3, [sp, #32]
 80051b8:	f7fa ffca 	bl	8000150 <strlen>
 80051bc:	2300      	movs	r3, #0
 80051be:	930e      	str	r3, [sp, #56]	@ 0x38
 80051c0:	f8d8 3000 	ldr.w	r3, [r8]
 80051c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80051c6:	3307      	adds	r3, #7
 80051c8:	f023 0307 	bic.w	r3, r3, #7
 80051cc:	f103 0208 	add.w	r2, r3, #8
 80051d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80051d4:	f8d4 b000 	ldr.w	fp, [r4]
 80051d8:	f8c8 2000 	str.w	r2, [r8]
 80051dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80051e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051e6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80051ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80051f6:	4b9c      	ldr	r3, [pc, #624]	@ (8005468 <_printf_float+0x2cc>)
 80051f8:	f7fb fc08 	bl	8000a0c <__aeabi_dcmpun>
 80051fc:	bb70      	cbnz	r0, 800525c <_printf_float+0xc0>
 80051fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005202:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005206:	4b98      	ldr	r3, [pc, #608]	@ (8005468 <_printf_float+0x2cc>)
 8005208:	f7fb fbe2 	bl	80009d0 <__aeabi_dcmple>
 800520c:	bb30      	cbnz	r0, 800525c <_printf_float+0xc0>
 800520e:	2200      	movs	r2, #0
 8005210:	2300      	movs	r3, #0
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb fbd1 	bl	80009bc <__aeabi_dcmplt>
 800521a:	b110      	cbz	r0, 8005222 <_printf_float+0x86>
 800521c:	232d      	movs	r3, #45	@ 0x2d
 800521e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005222:	4a92      	ldr	r2, [pc, #584]	@ (800546c <_printf_float+0x2d0>)
 8005224:	4b92      	ldr	r3, [pc, #584]	@ (8005470 <_printf_float+0x2d4>)
 8005226:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800522a:	bf8c      	ite	hi
 800522c:	4690      	movhi	r8, r2
 800522e:	4698      	movls	r8, r3
 8005230:	2303      	movs	r3, #3
 8005232:	f04f 0900 	mov.w	r9, #0
 8005236:	6123      	str	r3, [r4, #16]
 8005238:	f02b 0304 	bic.w	r3, fp, #4
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	4633      	mov	r3, r6
 8005240:	4621      	mov	r1, r4
 8005242:	4628      	mov	r0, r5
 8005244:	9700      	str	r7, [sp, #0]
 8005246:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005248:	f000 f9d4 	bl	80055f4 <_printf_common>
 800524c:	3001      	adds	r0, #1
 800524e:	f040 8090 	bne.w	8005372 <_printf_float+0x1d6>
 8005252:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005256:	b011      	add	sp, #68	@ 0x44
 8005258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525c:	4642      	mov	r2, r8
 800525e:	464b      	mov	r3, r9
 8005260:	4640      	mov	r0, r8
 8005262:	4649      	mov	r1, r9
 8005264:	f7fb fbd2 	bl	8000a0c <__aeabi_dcmpun>
 8005268:	b148      	cbz	r0, 800527e <_printf_float+0xe2>
 800526a:	464b      	mov	r3, r9
 800526c:	2b00      	cmp	r3, #0
 800526e:	bfb8      	it	lt
 8005270:	232d      	movlt	r3, #45	@ 0x2d
 8005272:	4a80      	ldr	r2, [pc, #512]	@ (8005474 <_printf_float+0x2d8>)
 8005274:	bfb8      	it	lt
 8005276:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800527a:	4b7f      	ldr	r3, [pc, #508]	@ (8005478 <_printf_float+0x2dc>)
 800527c:	e7d3      	b.n	8005226 <_printf_float+0x8a>
 800527e:	6863      	ldr	r3, [r4, #4]
 8005280:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	d13f      	bne.n	8005308 <_printf_float+0x16c>
 8005288:	2306      	movs	r3, #6
 800528a:	6063      	str	r3, [r4, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005292:	6023      	str	r3, [r4, #0]
 8005294:	9206      	str	r2, [sp, #24]
 8005296:	aa0e      	add	r2, sp, #56	@ 0x38
 8005298:	e9cd a204 	strd	sl, r2, [sp, #16]
 800529c:	aa0d      	add	r2, sp, #52	@ 0x34
 800529e:	9203      	str	r2, [sp, #12]
 80052a0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80052a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052a8:	6863      	ldr	r3, [r4, #4]
 80052aa:	4642      	mov	r2, r8
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	4628      	mov	r0, r5
 80052b0:	464b      	mov	r3, r9
 80052b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80052b4:	f7ff fed4 	bl	8005060 <__cvt>
 80052b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052ba:	4680      	mov	r8, r0
 80052bc:	2947      	cmp	r1, #71	@ 0x47
 80052be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80052c0:	d128      	bne.n	8005314 <_printf_float+0x178>
 80052c2:	1cc8      	adds	r0, r1, #3
 80052c4:	db02      	blt.n	80052cc <_printf_float+0x130>
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	4299      	cmp	r1, r3
 80052ca:	dd40      	ble.n	800534e <_printf_float+0x1b2>
 80052cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80052d0:	fa5f fa8a 	uxtb.w	sl, sl
 80052d4:	4652      	mov	r2, sl
 80052d6:	3901      	subs	r1, #1
 80052d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80052dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80052de:	f7ff ff23 	bl	8005128 <__exponent>
 80052e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052e4:	4681      	mov	r9, r0
 80052e6:	1813      	adds	r3, r2, r0
 80052e8:	2a01      	cmp	r2, #1
 80052ea:	6123      	str	r3, [r4, #16]
 80052ec:	dc02      	bgt.n	80052f4 <_printf_float+0x158>
 80052ee:	6822      	ldr	r2, [r4, #0]
 80052f0:	07d2      	lsls	r2, r2, #31
 80052f2:	d501      	bpl.n	80052f8 <_printf_float+0x15c>
 80052f4:	3301      	adds	r3, #1
 80052f6:	6123      	str	r3, [r4, #16]
 80052f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d09e      	beq.n	800523e <_printf_float+0xa2>
 8005300:	232d      	movs	r3, #45	@ 0x2d
 8005302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005306:	e79a      	b.n	800523e <_printf_float+0xa2>
 8005308:	2947      	cmp	r1, #71	@ 0x47
 800530a:	d1bf      	bne.n	800528c <_printf_float+0xf0>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1bd      	bne.n	800528c <_printf_float+0xf0>
 8005310:	2301      	movs	r3, #1
 8005312:	e7ba      	b.n	800528a <_printf_float+0xee>
 8005314:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005318:	d9dc      	bls.n	80052d4 <_printf_float+0x138>
 800531a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800531e:	d118      	bne.n	8005352 <_printf_float+0x1b6>
 8005320:	2900      	cmp	r1, #0
 8005322:	6863      	ldr	r3, [r4, #4]
 8005324:	dd0b      	ble.n	800533e <_printf_float+0x1a2>
 8005326:	6121      	str	r1, [r4, #16]
 8005328:	b913      	cbnz	r3, 8005330 <_printf_float+0x194>
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	07d0      	lsls	r0, r2, #31
 800532e:	d502      	bpl.n	8005336 <_printf_float+0x19a>
 8005330:	3301      	adds	r3, #1
 8005332:	440b      	add	r3, r1
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	f04f 0900 	mov.w	r9, #0
 800533a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800533c:	e7dc      	b.n	80052f8 <_printf_float+0x15c>
 800533e:	b913      	cbnz	r3, 8005346 <_printf_float+0x1aa>
 8005340:	6822      	ldr	r2, [r4, #0]
 8005342:	07d2      	lsls	r2, r2, #31
 8005344:	d501      	bpl.n	800534a <_printf_float+0x1ae>
 8005346:	3302      	adds	r3, #2
 8005348:	e7f4      	b.n	8005334 <_printf_float+0x198>
 800534a:	2301      	movs	r3, #1
 800534c:	e7f2      	b.n	8005334 <_printf_float+0x198>
 800534e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005352:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005354:	4299      	cmp	r1, r3
 8005356:	db05      	blt.n	8005364 <_printf_float+0x1c8>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	6121      	str	r1, [r4, #16]
 800535c:	07d8      	lsls	r0, r3, #31
 800535e:	d5ea      	bpl.n	8005336 <_printf_float+0x19a>
 8005360:	1c4b      	adds	r3, r1, #1
 8005362:	e7e7      	b.n	8005334 <_printf_float+0x198>
 8005364:	2900      	cmp	r1, #0
 8005366:	bfcc      	ite	gt
 8005368:	2201      	movgt	r2, #1
 800536a:	f1c1 0202 	rsble	r2, r1, #2
 800536e:	4413      	add	r3, r2
 8005370:	e7e0      	b.n	8005334 <_printf_float+0x198>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	055a      	lsls	r2, r3, #21
 8005376:	d407      	bmi.n	8005388 <_printf_float+0x1ec>
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	4642      	mov	r2, r8
 800537c:	4631      	mov	r1, r6
 800537e:	4628      	mov	r0, r5
 8005380:	47b8      	blx	r7
 8005382:	3001      	adds	r0, #1
 8005384:	d12b      	bne.n	80053de <_printf_float+0x242>
 8005386:	e764      	b.n	8005252 <_printf_float+0xb6>
 8005388:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800538c:	f240 80dc 	bls.w	8005548 <_printf_float+0x3ac>
 8005390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005394:	2200      	movs	r2, #0
 8005396:	2300      	movs	r3, #0
 8005398:	f7fb fb06 	bl	80009a8 <__aeabi_dcmpeq>
 800539c:	2800      	cmp	r0, #0
 800539e:	d033      	beq.n	8005408 <_printf_float+0x26c>
 80053a0:	2301      	movs	r3, #1
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	4a35      	ldr	r2, [pc, #212]	@ (800547c <_printf_float+0x2e0>)
 80053a8:	47b8      	blx	r7
 80053aa:	3001      	adds	r0, #1
 80053ac:	f43f af51 	beq.w	8005252 <_printf_float+0xb6>
 80053b0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80053b4:	4543      	cmp	r3, r8
 80053b6:	db02      	blt.n	80053be <_printf_float+0x222>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	07d8      	lsls	r0, r3, #31
 80053bc:	d50f      	bpl.n	80053de <_printf_float+0x242>
 80053be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b8      	blx	r7
 80053c8:	3001      	adds	r0, #1
 80053ca:	f43f af42 	beq.w	8005252 <_printf_float+0xb6>
 80053ce:	f04f 0900 	mov.w	r9, #0
 80053d2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80053d6:	f104 0a1a 	add.w	sl, r4, #26
 80053da:	45c8      	cmp	r8, r9
 80053dc:	dc09      	bgt.n	80053f2 <_printf_float+0x256>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	079b      	lsls	r3, r3, #30
 80053e2:	f100 8102 	bmi.w	80055ea <_printf_float+0x44e>
 80053e6:	68e0      	ldr	r0, [r4, #12]
 80053e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053ea:	4298      	cmp	r0, r3
 80053ec:	bfb8      	it	lt
 80053ee:	4618      	movlt	r0, r3
 80053f0:	e731      	b.n	8005256 <_printf_float+0xba>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4652      	mov	r2, sl
 80053f6:	4631      	mov	r1, r6
 80053f8:	4628      	mov	r0, r5
 80053fa:	47b8      	blx	r7
 80053fc:	3001      	adds	r0, #1
 80053fe:	f43f af28 	beq.w	8005252 <_printf_float+0xb6>
 8005402:	f109 0901 	add.w	r9, r9, #1
 8005406:	e7e8      	b.n	80053da <_printf_float+0x23e>
 8005408:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	dc38      	bgt.n	8005480 <_printf_float+0x2e4>
 800540e:	2301      	movs	r3, #1
 8005410:	4631      	mov	r1, r6
 8005412:	4628      	mov	r0, r5
 8005414:	4a19      	ldr	r2, [pc, #100]	@ (800547c <_printf_float+0x2e0>)
 8005416:	47b8      	blx	r7
 8005418:	3001      	adds	r0, #1
 800541a:	f43f af1a 	beq.w	8005252 <_printf_float+0xb6>
 800541e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005422:	ea59 0303 	orrs.w	r3, r9, r3
 8005426:	d102      	bne.n	800542e <_printf_float+0x292>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	07d9      	lsls	r1, r3, #31
 800542c:	d5d7      	bpl.n	80053de <_printf_float+0x242>
 800542e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005432:	4631      	mov	r1, r6
 8005434:	4628      	mov	r0, r5
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	f43f af0a 	beq.w	8005252 <_printf_float+0xb6>
 800543e:	f04f 0a00 	mov.w	sl, #0
 8005442:	f104 0b1a 	add.w	fp, r4, #26
 8005446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005448:	425b      	negs	r3, r3
 800544a:	4553      	cmp	r3, sl
 800544c:	dc01      	bgt.n	8005452 <_printf_float+0x2b6>
 800544e:	464b      	mov	r3, r9
 8005450:	e793      	b.n	800537a <_printf_float+0x1de>
 8005452:	2301      	movs	r3, #1
 8005454:	465a      	mov	r2, fp
 8005456:	4631      	mov	r1, r6
 8005458:	4628      	mov	r0, r5
 800545a:	47b8      	blx	r7
 800545c:	3001      	adds	r0, #1
 800545e:	f43f aef8 	beq.w	8005252 <_printf_float+0xb6>
 8005462:	f10a 0a01 	add.w	sl, sl, #1
 8005466:	e7ee      	b.n	8005446 <_printf_float+0x2aa>
 8005468:	7fefffff 	.word	0x7fefffff
 800546c:	080097ea 	.word	0x080097ea
 8005470:	080097e6 	.word	0x080097e6
 8005474:	080097f2 	.word	0x080097f2
 8005478:	080097ee 	.word	0x080097ee
 800547c:	080097f6 	.word	0x080097f6
 8005480:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005482:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005486:	4553      	cmp	r3, sl
 8005488:	bfa8      	it	ge
 800548a:	4653      	movge	r3, sl
 800548c:	2b00      	cmp	r3, #0
 800548e:	4699      	mov	r9, r3
 8005490:	dc36      	bgt.n	8005500 <_printf_float+0x364>
 8005492:	f04f 0b00 	mov.w	fp, #0
 8005496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800549a:	f104 021a 	add.w	r2, r4, #26
 800549e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80054a2:	eba3 0309 	sub.w	r3, r3, r9
 80054a6:	455b      	cmp	r3, fp
 80054a8:	dc31      	bgt.n	800550e <_printf_float+0x372>
 80054aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054ac:	459a      	cmp	sl, r3
 80054ae:	dc3a      	bgt.n	8005526 <_printf_float+0x38a>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	07da      	lsls	r2, r3, #31
 80054b4:	d437      	bmi.n	8005526 <_printf_float+0x38a>
 80054b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054b8:	ebaa 0903 	sub.w	r9, sl, r3
 80054bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054be:	ebaa 0303 	sub.w	r3, sl, r3
 80054c2:	4599      	cmp	r9, r3
 80054c4:	bfa8      	it	ge
 80054c6:	4699      	movge	r9, r3
 80054c8:	f1b9 0f00 	cmp.w	r9, #0
 80054cc:	dc33      	bgt.n	8005536 <_printf_float+0x39a>
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054d6:	f104 0b1a 	add.w	fp, r4, #26
 80054da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054dc:	ebaa 0303 	sub.w	r3, sl, r3
 80054e0:	eba3 0309 	sub.w	r3, r3, r9
 80054e4:	4543      	cmp	r3, r8
 80054e6:	f77f af7a 	ble.w	80053de <_printf_float+0x242>
 80054ea:	2301      	movs	r3, #1
 80054ec:	465a      	mov	r2, fp
 80054ee:	4631      	mov	r1, r6
 80054f0:	4628      	mov	r0, r5
 80054f2:	47b8      	blx	r7
 80054f4:	3001      	adds	r0, #1
 80054f6:	f43f aeac 	beq.w	8005252 <_printf_float+0xb6>
 80054fa:	f108 0801 	add.w	r8, r8, #1
 80054fe:	e7ec      	b.n	80054da <_printf_float+0x33e>
 8005500:	4642      	mov	r2, r8
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	d1c2      	bne.n	8005492 <_printf_float+0x2f6>
 800550c:	e6a1      	b.n	8005252 <_printf_float+0xb6>
 800550e:	2301      	movs	r3, #1
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	920a      	str	r2, [sp, #40]	@ 0x28
 8005516:	47b8      	blx	r7
 8005518:	3001      	adds	r0, #1
 800551a:	f43f ae9a 	beq.w	8005252 <_printf_float+0xb6>
 800551e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005520:	f10b 0b01 	add.w	fp, fp, #1
 8005524:	e7bb      	b.n	800549e <_printf_float+0x302>
 8005526:	4631      	mov	r1, r6
 8005528:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800552c:	4628      	mov	r0, r5
 800552e:	47b8      	blx	r7
 8005530:	3001      	adds	r0, #1
 8005532:	d1c0      	bne.n	80054b6 <_printf_float+0x31a>
 8005534:	e68d      	b.n	8005252 <_printf_float+0xb6>
 8005536:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005538:	464b      	mov	r3, r9
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	4442      	add	r2, r8
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	d1c3      	bne.n	80054ce <_printf_float+0x332>
 8005546:	e684      	b.n	8005252 <_printf_float+0xb6>
 8005548:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800554c:	f1ba 0f01 	cmp.w	sl, #1
 8005550:	dc01      	bgt.n	8005556 <_printf_float+0x3ba>
 8005552:	07db      	lsls	r3, r3, #31
 8005554:	d536      	bpl.n	80055c4 <_printf_float+0x428>
 8005556:	2301      	movs	r3, #1
 8005558:	4642      	mov	r2, r8
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	47b8      	blx	r7
 8005560:	3001      	adds	r0, #1
 8005562:	f43f ae76 	beq.w	8005252 <_printf_float+0xb6>
 8005566:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	f43f ae6e 	beq.w	8005252 <_printf_float+0xb6>
 8005576:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800557a:	2200      	movs	r2, #0
 800557c:	2300      	movs	r3, #0
 800557e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005582:	f7fb fa11 	bl	80009a8 <__aeabi_dcmpeq>
 8005586:	b9c0      	cbnz	r0, 80055ba <_printf_float+0x41e>
 8005588:	4653      	mov	r3, sl
 800558a:	f108 0201 	add.w	r2, r8, #1
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	d10c      	bne.n	80055b2 <_printf_float+0x416>
 8005598:	e65b      	b.n	8005252 <_printf_float+0xb6>
 800559a:	2301      	movs	r3, #1
 800559c:	465a      	mov	r2, fp
 800559e:	4631      	mov	r1, r6
 80055a0:	4628      	mov	r0, r5
 80055a2:	47b8      	blx	r7
 80055a4:	3001      	adds	r0, #1
 80055a6:	f43f ae54 	beq.w	8005252 <_printf_float+0xb6>
 80055aa:	f108 0801 	add.w	r8, r8, #1
 80055ae:	45d0      	cmp	r8, sl
 80055b0:	dbf3      	blt.n	800559a <_printf_float+0x3fe>
 80055b2:	464b      	mov	r3, r9
 80055b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80055b8:	e6e0      	b.n	800537c <_printf_float+0x1e0>
 80055ba:	f04f 0800 	mov.w	r8, #0
 80055be:	f104 0b1a 	add.w	fp, r4, #26
 80055c2:	e7f4      	b.n	80055ae <_printf_float+0x412>
 80055c4:	2301      	movs	r3, #1
 80055c6:	4642      	mov	r2, r8
 80055c8:	e7e1      	b.n	800558e <_printf_float+0x3f2>
 80055ca:	2301      	movs	r3, #1
 80055cc:	464a      	mov	r2, r9
 80055ce:	4631      	mov	r1, r6
 80055d0:	4628      	mov	r0, r5
 80055d2:	47b8      	blx	r7
 80055d4:	3001      	adds	r0, #1
 80055d6:	f43f ae3c 	beq.w	8005252 <_printf_float+0xb6>
 80055da:	f108 0801 	add.w	r8, r8, #1
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80055e2:	1a5b      	subs	r3, r3, r1
 80055e4:	4543      	cmp	r3, r8
 80055e6:	dcf0      	bgt.n	80055ca <_printf_float+0x42e>
 80055e8:	e6fd      	b.n	80053e6 <_printf_float+0x24a>
 80055ea:	f04f 0800 	mov.w	r8, #0
 80055ee:	f104 0919 	add.w	r9, r4, #25
 80055f2:	e7f4      	b.n	80055de <_printf_float+0x442>

080055f4 <_printf_common>:
 80055f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	4616      	mov	r6, r2
 80055fa:	4698      	mov	r8, r3
 80055fc:	688a      	ldr	r2, [r1, #8]
 80055fe:	690b      	ldr	r3, [r1, #16]
 8005600:	4607      	mov	r7, r0
 8005602:	4293      	cmp	r3, r2
 8005604:	bfb8      	it	lt
 8005606:	4613      	movlt	r3, r2
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800560e:	460c      	mov	r4, r1
 8005610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005614:	b10a      	cbz	r2, 800561a <_printf_common+0x26>
 8005616:	3301      	adds	r3, #1
 8005618:	6033      	str	r3, [r6, #0]
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	0699      	lsls	r1, r3, #26
 800561e:	bf42      	ittt	mi
 8005620:	6833      	ldrmi	r3, [r6, #0]
 8005622:	3302      	addmi	r3, #2
 8005624:	6033      	strmi	r3, [r6, #0]
 8005626:	6825      	ldr	r5, [r4, #0]
 8005628:	f015 0506 	ands.w	r5, r5, #6
 800562c:	d106      	bne.n	800563c <_printf_common+0x48>
 800562e:	f104 0a19 	add.w	sl, r4, #25
 8005632:	68e3      	ldr	r3, [r4, #12]
 8005634:	6832      	ldr	r2, [r6, #0]
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	42ab      	cmp	r3, r5
 800563a:	dc2b      	bgt.n	8005694 <_printf_common+0xa0>
 800563c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005640:	6822      	ldr	r2, [r4, #0]
 8005642:	3b00      	subs	r3, #0
 8005644:	bf18      	it	ne
 8005646:	2301      	movne	r3, #1
 8005648:	0692      	lsls	r2, r2, #26
 800564a:	d430      	bmi.n	80056ae <_printf_common+0xba>
 800564c:	4641      	mov	r1, r8
 800564e:	4638      	mov	r0, r7
 8005650:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005654:	47c8      	blx	r9
 8005656:	3001      	adds	r0, #1
 8005658:	d023      	beq.n	80056a2 <_printf_common+0xae>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	6922      	ldr	r2, [r4, #16]
 800565e:	f003 0306 	and.w	r3, r3, #6
 8005662:	2b04      	cmp	r3, #4
 8005664:	bf14      	ite	ne
 8005666:	2500      	movne	r5, #0
 8005668:	6833      	ldreq	r3, [r6, #0]
 800566a:	f04f 0600 	mov.w	r6, #0
 800566e:	bf08      	it	eq
 8005670:	68e5      	ldreq	r5, [r4, #12]
 8005672:	f104 041a 	add.w	r4, r4, #26
 8005676:	bf08      	it	eq
 8005678:	1aed      	subeq	r5, r5, r3
 800567a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800567e:	bf08      	it	eq
 8005680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005684:	4293      	cmp	r3, r2
 8005686:	bfc4      	itt	gt
 8005688:	1a9b      	subgt	r3, r3, r2
 800568a:	18ed      	addgt	r5, r5, r3
 800568c:	42b5      	cmp	r5, r6
 800568e:	d11a      	bne.n	80056c6 <_printf_common+0xd2>
 8005690:	2000      	movs	r0, #0
 8005692:	e008      	b.n	80056a6 <_printf_common+0xb2>
 8005694:	2301      	movs	r3, #1
 8005696:	4652      	mov	r2, sl
 8005698:	4641      	mov	r1, r8
 800569a:	4638      	mov	r0, r7
 800569c:	47c8      	blx	r9
 800569e:	3001      	adds	r0, #1
 80056a0:	d103      	bne.n	80056aa <_printf_common+0xb6>
 80056a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056aa:	3501      	adds	r5, #1
 80056ac:	e7c1      	b.n	8005632 <_printf_common+0x3e>
 80056ae:	2030      	movs	r0, #48	@ 0x30
 80056b0:	18e1      	adds	r1, r4, r3
 80056b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056bc:	4422      	add	r2, r4
 80056be:	3302      	adds	r3, #2
 80056c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056c4:	e7c2      	b.n	800564c <_printf_common+0x58>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4622      	mov	r2, r4
 80056ca:	4641      	mov	r1, r8
 80056cc:	4638      	mov	r0, r7
 80056ce:	47c8      	blx	r9
 80056d0:	3001      	adds	r0, #1
 80056d2:	d0e6      	beq.n	80056a2 <_printf_common+0xae>
 80056d4:	3601      	adds	r6, #1
 80056d6:	e7d9      	b.n	800568c <_printf_common+0x98>

080056d8 <_printf_i>:
 80056d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056dc:	7e0f      	ldrb	r7, [r1, #24]
 80056de:	4691      	mov	r9, r2
 80056e0:	2f78      	cmp	r7, #120	@ 0x78
 80056e2:	4680      	mov	r8, r0
 80056e4:	460c      	mov	r4, r1
 80056e6:	469a      	mov	sl, r3
 80056e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056ee:	d807      	bhi.n	8005700 <_printf_i+0x28>
 80056f0:	2f62      	cmp	r7, #98	@ 0x62
 80056f2:	d80a      	bhi.n	800570a <_printf_i+0x32>
 80056f4:	2f00      	cmp	r7, #0
 80056f6:	f000 80d1 	beq.w	800589c <_printf_i+0x1c4>
 80056fa:	2f58      	cmp	r7, #88	@ 0x58
 80056fc:	f000 80b8 	beq.w	8005870 <_printf_i+0x198>
 8005700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005708:	e03a      	b.n	8005780 <_printf_i+0xa8>
 800570a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800570e:	2b15      	cmp	r3, #21
 8005710:	d8f6      	bhi.n	8005700 <_printf_i+0x28>
 8005712:	a101      	add	r1, pc, #4	@ (adr r1, 8005718 <_printf_i+0x40>)
 8005714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005718:	08005771 	.word	0x08005771
 800571c:	08005785 	.word	0x08005785
 8005720:	08005701 	.word	0x08005701
 8005724:	08005701 	.word	0x08005701
 8005728:	08005701 	.word	0x08005701
 800572c:	08005701 	.word	0x08005701
 8005730:	08005785 	.word	0x08005785
 8005734:	08005701 	.word	0x08005701
 8005738:	08005701 	.word	0x08005701
 800573c:	08005701 	.word	0x08005701
 8005740:	08005701 	.word	0x08005701
 8005744:	08005883 	.word	0x08005883
 8005748:	080057af 	.word	0x080057af
 800574c:	0800583d 	.word	0x0800583d
 8005750:	08005701 	.word	0x08005701
 8005754:	08005701 	.word	0x08005701
 8005758:	080058a5 	.word	0x080058a5
 800575c:	08005701 	.word	0x08005701
 8005760:	080057af 	.word	0x080057af
 8005764:	08005701 	.word	0x08005701
 8005768:	08005701 	.word	0x08005701
 800576c:	08005845 	.word	0x08005845
 8005770:	6833      	ldr	r3, [r6, #0]
 8005772:	1d1a      	adds	r2, r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6032      	str	r2, [r6, #0]
 8005778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800577c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005780:	2301      	movs	r3, #1
 8005782:	e09c      	b.n	80058be <_printf_i+0x1e6>
 8005784:	6833      	ldr	r3, [r6, #0]
 8005786:	6820      	ldr	r0, [r4, #0]
 8005788:	1d19      	adds	r1, r3, #4
 800578a:	6031      	str	r1, [r6, #0]
 800578c:	0606      	lsls	r6, r0, #24
 800578e:	d501      	bpl.n	8005794 <_printf_i+0xbc>
 8005790:	681d      	ldr	r5, [r3, #0]
 8005792:	e003      	b.n	800579c <_printf_i+0xc4>
 8005794:	0645      	lsls	r5, r0, #25
 8005796:	d5fb      	bpl.n	8005790 <_printf_i+0xb8>
 8005798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800579c:	2d00      	cmp	r5, #0
 800579e:	da03      	bge.n	80057a8 <_printf_i+0xd0>
 80057a0:	232d      	movs	r3, #45	@ 0x2d
 80057a2:	426d      	negs	r5, r5
 80057a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057a8:	230a      	movs	r3, #10
 80057aa:	4858      	ldr	r0, [pc, #352]	@ (800590c <_printf_i+0x234>)
 80057ac:	e011      	b.n	80057d2 <_printf_i+0xfa>
 80057ae:	6821      	ldr	r1, [r4, #0]
 80057b0:	6833      	ldr	r3, [r6, #0]
 80057b2:	0608      	lsls	r0, r1, #24
 80057b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80057b8:	d402      	bmi.n	80057c0 <_printf_i+0xe8>
 80057ba:	0649      	lsls	r1, r1, #25
 80057bc:	bf48      	it	mi
 80057be:	b2ad      	uxthmi	r5, r5
 80057c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80057c2:	6033      	str	r3, [r6, #0]
 80057c4:	bf14      	ite	ne
 80057c6:	230a      	movne	r3, #10
 80057c8:	2308      	moveq	r3, #8
 80057ca:	4850      	ldr	r0, [pc, #320]	@ (800590c <_printf_i+0x234>)
 80057cc:	2100      	movs	r1, #0
 80057ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057d2:	6866      	ldr	r6, [r4, #4]
 80057d4:	2e00      	cmp	r6, #0
 80057d6:	60a6      	str	r6, [r4, #8]
 80057d8:	db05      	blt.n	80057e6 <_printf_i+0x10e>
 80057da:	6821      	ldr	r1, [r4, #0]
 80057dc:	432e      	orrs	r6, r5
 80057de:	f021 0104 	bic.w	r1, r1, #4
 80057e2:	6021      	str	r1, [r4, #0]
 80057e4:	d04b      	beq.n	800587e <_printf_i+0x1a6>
 80057e6:	4616      	mov	r6, r2
 80057e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80057ec:	fb03 5711 	mls	r7, r3, r1, r5
 80057f0:	5dc7      	ldrb	r7, [r0, r7]
 80057f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057f6:	462f      	mov	r7, r5
 80057f8:	42bb      	cmp	r3, r7
 80057fa:	460d      	mov	r5, r1
 80057fc:	d9f4      	bls.n	80057e8 <_printf_i+0x110>
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d10b      	bne.n	800581a <_printf_i+0x142>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	07df      	lsls	r7, r3, #31
 8005806:	d508      	bpl.n	800581a <_printf_i+0x142>
 8005808:	6923      	ldr	r3, [r4, #16]
 800580a:	6861      	ldr	r1, [r4, #4]
 800580c:	4299      	cmp	r1, r3
 800580e:	bfde      	ittt	le
 8005810:	2330      	movle	r3, #48	@ 0x30
 8005812:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005816:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800581a:	1b92      	subs	r2, r2, r6
 800581c:	6122      	str	r2, [r4, #16]
 800581e:	464b      	mov	r3, r9
 8005820:	4621      	mov	r1, r4
 8005822:	4640      	mov	r0, r8
 8005824:	f8cd a000 	str.w	sl, [sp]
 8005828:	aa03      	add	r2, sp, #12
 800582a:	f7ff fee3 	bl	80055f4 <_printf_common>
 800582e:	3001      	adds	r0, #1
 8005830:	d14a      	bne.n	80058c8 <_printf_i+0x1f0>
 8005832:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005836:	b004      	add	sp, #16
 8005838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	f043 0320 	orr.w	r3, r3, #32
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	2778      	movs	r7, #120	@ 0x78
 8005846:	4832      	ldr	r0, [pc, #200]	@ (8005910 <_printf_i+0x238>)
 8005848:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	6831      	ldr	r1, [r6, #0]
 8005850:	061f      	lsls	r7, r3, #24
 8005852:	f851 5b04 	ldr.w	r5, [r1], #4
 8005856:	d402      	bmi.n	800585e <_printf_i+0x186>
 8005858:	065f      	lsls	r7, r3, #25
 800585a:	bf48      	it	mi
 800585c:	b2ad      	uxthmi	r5, r5
 800585e:	6031      	str	r1, [r6, #0]
 8005860:	07d9      	lsls	r1, r3, #31
 8005862:	bf44      	itt	mi
 8005864:	f043 0320 	orrmi.w	r3, r3, #32
 8005868:	6023      	strmi	r3, [r4, #0]
 800586a:	b11d      	cbz	r5, 8005874 <_printf_i+0x19c>
 800586c:	2310      	movs	r3, #16
 800586e:	e7ad      	b.n	80057cc <_printf_i+0xf4>
 8005870:	4826      	ldr	r0, [pc, #152]	@ (800590c <_printf_i+0x234>)
 8005872:	e7e9      	b.n	8005848 <_printf_i+0x170>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	f023 0320 	bic.w	r3, r3, #32
 800587a:	6023      	str	r3, [r4, #0]
 800587c:	e7f6      	b.n	800586c <_printf_i+0x194>
 800587e:	4616      	mov	r6, r2
 8005880:	e7bd      	b.n	80057fe <_printf_i+0x126>
 8005882:	6833      	ldr	r3, [r6, #0]
 8005884:	6825      	ldr	r5, [r4, #0]
 8005886:	1d18      	adds	r0, r3, #4
 8005888:	6961      	ldr	r1, [r4, #20]
 800588a:	6030      	str	r0, [r6, #0]
 800588c:	062e      	lsls	r6, r5, #24
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	d501      	bpl.n	8005896 <_printf_i+0x1be>
 8005892:	6019      	str	r1, [r3, #0]
 8005894:	e002      	b.n	800589c <_printf_i+0x1c4>
 8005896:	0668      	lsls	r0, r5, #25
 8005898:	d5fb      	bpl.n	8005892 <_printf_i+0x1ba>
 800589a:	8019      	strh	r1, [r3, #0]
 800589c:	2300      	movs	r3, #0
 800589e:	4616      	mov	r6, r2
 80058a0:	6123      	str	r3, [r4, #16]
 80058a2:	e7bc      	b.n	800581e <_printf_i+0x146>
 80058a4:	6833      	ldr	r3, [r6, #0]
 80058a6:	2100      	movs	r1, #0
 80058a8:	1d1a      	adds	r2, r3, #4
 80058aa:	6032      	str	r2, [r6, #0]
 80058ac:	681e      	ldr	r6, [r3, #0]
 80058ae:	6862      	ldr	r2, [r4, #4]
 80058b0:	4630      	mov	r0, r6
 80058b2:	f000 fbe0 	bl	8006076 <memchr>
 80058b6:	b108      	cbz	r0, 80058bc <_printf_i+0x1e4>
 80058b8:	1b80      	subs	r0, r0, r6
 80058ba:	6060      	str	r0, [r4, #4]
 80058bc:	6863      	ldr	r3, [r4, #4]
 80058be:	6123      	str	r3, [r4, #16]
 80058c0:	2300      	movs	r3, #0
 80058c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058c6:	e7aa      	b.n	800581e <_printf_i+0x146>
 80058c8:	4632      	mov	r2, r6
 80058ca:	4649      	mov	r1, r9
 80058cc:	4640      	mov	r0, r8
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	47d0      	blx	sl
 80058d2:	3001      	adds	r0, #1
 80058d4:	d0ad      	beq.n	8005832 <_printf_i+0x15a>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	079b      	lsls	r3, r3, #30
 80058da:	d413      	bmi.n	8005904 <_printf_i+0x22c>
 80058dc:	68e0      	ldr	r0, [r4, #12]
 80058de:	9b03      	ldr	r3, [sp, #12]
 80058e0:	4298      	cmp	r0, r3
 80058e2:	bfb8      	it	lt
 80058e4:	4618      	movlt	r0, r3
 80058e6:	e7a6      	b.n	8005836 <_printf_i+0x15e>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4632      	mov	r2, r6
 80058ec:	4649      	mov	r1, r9
 80058ee:	4640      	mov	r0, r8
 80058f0:	47d0      	blx	sl
 80058f2:	3001      	adds	r0, #1
 80058f4:	d09d      	beq.n	8005832 <_printf_i+0x15a>
 80058f6:	3501      	adds	r5, #1
 80058f8:	68e3      	ldr	r3, [r4, #12]
 80058fa:	9903      	ldr	r1, [sp, #12]
 80058fc:	1a5b      	subs	r3, r3, r1
 80058fe:	42ab      	cmp	r3, r5
 8005900:	dcf2      	bgt.n	80058e8 <_printf_i+0x210>
 8005902:	e7eb      	b.n	80058dc <_printf_i+0x204>
 8005904:	2500      	movs	r5, #0
 8005906:	f104 0619 	add.w	r6, r4, #25
 800590a:	e7f5      	b.n	80058f8 <_printf_i+0x220>
 800590c:	080097f8 	.word	0x080097f8
 8005910:	08009809 	.word	0x08009809

08005914 <_scanf_float>:
 8005914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005918:	b087      	sub	sp, #28
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	688b      	ldr	r3, [r1, #8]
 800591e:	4691      	mov	r9, r2
 8005920:	1e5a      	subs	r2, r3, #1
 8005922:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005926:	bf82      	ittt	hi
 8005928:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800592c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005930:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005934:	460a      	mov	r2, r1
 8005936:	f04f 0500 	mov.w	r5, #0
 800593a:	bf88      	it	hi
 800593c:	608b      	strhi	r3, [r1, #8]
 800593e:	680b      	ldr	r3, [r1, #0]
 8005940:	4680      	mov	r8, r0
 8005942:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005946:	f842 3b1c 	str.w	r3, [r2], #28
 800594a:	460c      	mov	r4, r1
 800594c:	bf98      	it	ls
 800594e:	f04f 0b00 	movls.w	fp, #0
 8005952:	4616      	mov	r6, r2
 8005954:	46aa      	mov	sl, r5
 8005956:	462f      	mov	r7, r5
 8005958:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800595c:	9201      	str	r2, [sp, #4]
 800595e:	9502      	str	r5, [sp, #8]
 8005960:	68a2      	ldr	r2, [r4, #8]
 8005962:	b15a      	cbz	r2, 800597c <_scanf_float+0x68>
 8005964:	f8d9 3000 	ldr.w	r3, [r9]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b4e      	cmp	r3, #78	@ 0x4e
 800596c:	d862      	bhi.n	8005a34 <_scanf_float+0x120>
 800596e:	2b40      	cmp	r3, #64	@ 0x40
 8005970:	d83a      	bhi.n	80059e8 <_scanf_float+0xd4>
 8005972:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005976:	b2c8      	uxtb	r0, r1
 8005978:	280e      	cmp	r0, #14
 800597a:	d938      	bls.n	80059ee <_scanf_float+0xda>
 800597c:	b11f      	cbz	r7, 8005986 <_scanf_float+0x72>
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800598a:	f1ba 0f01 	cmp.w	sl, #1
 800598e:	f200 8114 	bhi.w	8005bba <_scanf_float+0x2a6>
 8005992:	9b01      	ldr	r3, [sp, #4]
 8005994:	429e      	cmp	r6, r3
 8005996:	f200 8105 	bhi.w	8005ba4 <_scanf_float+0x290>
 800599a:	2001      	movs	r0, #1
 800599c:	b007      	add	sp, #28
 800599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80059a6:	2a0d      	cmp	r2, #13
 80059a8:	d8e8      	bhi.n	800597c <_scanf_float+0x68>
 80059aa:	a101      	add	r1, pc, #4	@ (adr r1, 80059b0 <_scanf_float+0x9c>)
 80059ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059b0:	08005af9 	.word	0x08005af9
 80059b4:	0800597d 	.word	0x0800597d
 80059b8:	0800597d 	.word	0x0800597d
 80059bc:	0800597d 	.word	0x0800597d
 80059c0:	08005b55 	.word	0x08005b55
 80059c4:	08005b2f 	.word	0x08005b2f
 80059c8:	0800597d 	.word	0x0800597d
 80059cc:	0800597d 	.word	0x0800597d
 80059d0:	08005b07 	.word	0x08005b07
 80059d4:	0800597d 	.word	0x0800597d
 80059d8:	0800597d 	.word	0x0800597d
 80059dc:	0800597d 	.word	0x0800597d
 80059e0:	0800597d 	.word	0x0800597d
 80059e4:	08005ac3 	.word	0x08005ac3
 80059e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80059ec:	e7db      	b.n	80059a6 <_scanf_float+0x92>
 80059ee:	290e      	cmp	r1, #14
 80059f0:	d8c4      	bhi.n	800597c <_scanf_float+0x68>
 80059f2:	a001      	add	r0, pc, #4	@ (adr r0, 80059f8 <_scanf_float+0xe4>)
 80059f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80059f8:	08005ab3 	.word	0x08005ab3
 80059fc:	0800597d 	.word	0x0800597d
 8005a00:	08005ab3 	.word	0x08005ab3
 8005a04:	08005b43 	.word	0x08005b43
 8005a08:	0800597d 	.word	0x0800597d
 8005a0c:	08005a55 	.word	0x08005a55
 8005a10:	08005a99 	.word	0x08005a99
 8005a14:	08005a99 	.word	0x08005a99
 8005a18:	08005a99 	.word	0x08005a99
 8005a1c:	08005a99 	.word	0x08005a99
 8005a20:	08005a99 	.word	0x08005a99
 8005a24:	08005a99 	.word	0x08005a99
 8005a28:	08005a99 	.word	0x08005a99
 8005a2c:	08005a99 	.word	0x08005a99
 8005a30:	08005a99 	.word	0x08005a99
 8005a34:	2b6e      	cmp	r3, #110	@ 0x6e
 8005a36:	d809      	bhi.n	8005a4c <_scanf_float+0x138>
 8005a38:	2b60      	cmp	r3, #96	@ 0x60
 8005a3a:	d8b2      	bhi.n	80059a2 <_scanf_float+0x8e>
 8005a3c:	2b54      	cmp	r3, #84	@ 0x54
 8005a3e:	d07b      	beq.n	8005b38 <_scanf_float+0x224>
 8005a40:	2b59      	cmp	r3, #89	@ 0x59
 8005a42:	d19b      	bne.n	800597c <_scanf_float+0x68>
 8005a44:	2d07      	cmp	r5, #7
 8005a46:	d199      	bne.n	800597c <_scanf_float+0x68>
 8005a48:	2508      	movs	r5, #8
 8005a4a:	e02f      	b.n	8005aac <_scanf_float+0x198>
 8005a4c:	2b74      	cmp	r3, #116	@ 0x74
 8005a4e:	d073      	beq.n	8005b38 <_scanf_float+0x224>
 8005a50:	2b79      	cmp	r3, #121	@ 0x79
 8005a52:	e7f6      	b.n	8005a42 <_scanf_float+0x12e>
 8005a54:	6821      	ldr	r1, [r4, #0]
 8005a56:	05c8      	lsls	r0, r1, #23
 8005a58:	d51e      	bpl.n	8005a98 <_scanf_float+0x184>
 8005a5a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005a5e:	6021      	str	r1, [r4, #0]
 8005a60:	3701      	adds	r7, #1
 8005a62:	f1bb 0f00 	cmp.w	fp, #0
 8005a66:	d003      	beq.n	8005a70 <_scanf_float+0x15c>
 8005a68:	3201      	adds	r2, #1
 8005a6a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005a6e:	60a2      	str	r2, [r4, #8]
 8005a70:	68a3      	ldr	r3, [r4, #8]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	60a3      	str	r3, [r4, #8]
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	6123      	str	r3, [r4, #16]
 8005a7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f8c9 3004 	str.w	r3, [r9, #4]
 8005a88:	f340 8083 	ble.w	8005b92 <_scanf_float+0x27e>
 8005a8c:	f8d9 3000 	ldr.w	r3, [r9]
 8005a90:	3301      	adds	r3, #1
 8005a92:	f8c9 3000 	str.w	r3, [r9]
 8005a96:	e763      	b.n	8005960 <_scanf_float+0x4c>
 8005a98:	eb1a 0105 	adds.w	r1, sl, r5
 8005a9c:	f47f af6e 	bne.w	800597c <_scanf_float+0x68>
 8005aa0:	460d      	mov	r5, r1
 8005aa2:	468a      	mov	sl, r1
 8005aa4:	6822      	ldr	r2, [r4, #0]
 8005aa6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005aaa:	6022      	str	r2, [r4, #0]
 8005aac:	f806 3b01 	strb.w	r3, [r6], #1
 8005ab0:	e7de      	b.n	8005a70 <_scanf_float+0x15c>
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	0610      	lsls	r0, r2, #24
 8005ab6:	f57f af61 	bpl.w	800597c <_scanf_float+0x68>
 8005aba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005abe:	6022      	str	r2, [r4, #0]
 8005ac0:	e7f4      	b.n	8005aac <_scanf_float+0x198>
 8005ac2:	f1ba 0f00 	cmp.w	sl, #0
 8005ac6:	d10c      	bne.n	8005ae2 <_scanf_float+0x1ce>
 8005ac8:	b977      	cbnz	r7, 8005ae8 <_scanf_float+0x1d4>
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005ad0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005ad4:	d108      	bne.n	8005ae8 <_scanf_float+0x1d4>
 8005ad6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ada:	f04f 0a01 	mov.w	sl, #1
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	e7e4      	b.n	8005aac <_scanf_float+0x198>
 8005ae2:	f1ba 0f02 	cmp.w	sl, #2
 8005ae6:	d051      	beq.n	8005b8c <_scanf_float+0x278>
 8005ae8:	2d01      	cmp	r5, #1
 8005aea:	d002      	beq.n	8005af2 <_scanf_float+0x1de>
 8005aec:	2d04      	cmp	r5, #4
 8005aee:	f47f af45 	bne.w	800597c <_scanf_float+0x68>
 8005af2:	3501      	adds	r5, #1
 8005af4:	b2ed      	uxtb	r5, r5
 8005af6:	e7d9      	b.n	8005aac <_scanf_float+0x198>
 8005af8:	f1ba 0f01 	cmp.w	sl, #1
 8005afc:	f47f af3e 	bne.w	800597c <_scanf_float+0x68>
 8005b00:	f04f 0a02 	mov.w	sl, #2
 8005b04:	e7d2      	b.n	8005aac <_scanf_float+0x198>
 8005b06:	b975      	cbnz	r5, 8005b26 <_scanf_float+0x212>
 8005b08:	2f00      	cmp	r7, #0
 8005b0a:	f47f af38 	bne.w	800597e <_scanf_float+0x6a>
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005b14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005b18:	f040 80ff 	bne.w	8005d1a <_scanf_float+0x406>
 8005b1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b20:	2501      	movs	r5, #1
 8005b22:	6022      	str	r2, [r4, #0]
 8005b24:	e7c2      	b.n	8005aac <_scanf_float+0x198>
 8005b26:	2d03      	cmp	r5, #3
 8005b28:	d0e3      	beq.n	8005af2 <_scanf_float+0x1de>
 8005b2a:	2d05      	cmp	r5, #5
 8005b2c:	e7df      	b.n	8005aee <_scanf_float+0x1da>
 8005b2e:	2d02      	cmp	r5, #2
 8005b30:	f47f af24 	bne.w	800597c <_scanf_float+0x68>
 8005b34:	2503      	movs	r5, #3
 8005b36:	e7b9      	b.n	8005aac <_scanf_float+0x198>
 8005b38:	2d06      	cmp	r5, #6
 8005b3a:	f47f af1f 	bne.w	800597c <_scanf_float+0x68>
 8005b3e:	2507      	movs	r5, #7
 8005b40:	e7b4      	b.n	8005aac <_scanf_float+0x198>
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	0591      	lsls	r1, r2, #22
 8005b46:	f57f af19 	bpl.w	800597c <_scanf_float+0x68>
 8005b4a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005b4e:	6022      	str	r2, [r4, #0]
 8005b50:	9702      	str	r7, [sp, #8]
 8005b52:	e7ab      	b.n	8005aac <_scanf_float+0x198>
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005b5a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005b5e:	d005      	beq.n	8005b6c <_scanf_float+0x258>
 8005b60:	0550      	lsls	r0, r2, #21
 8005b62:	f57f af0b 	bpl.w	800597c <_scanf_float+0x68>
 8005b66:	2f00      	cmp	r7, #0
 8005b68:	f000 80d7 	beq.w	8005d1a <_scanf_float+0x406>
 8005b6c:	0591      	lsls	r1, r2, #22
 8005b6e:	bf58      	it	pl
 8005b70:	9902      	ldrpl	r1, [sp, #8]
 8005b72:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b76:	bf58      	it	pl
 8005b78:	1a79      	subpl	r1, r7, r1
 8005b7a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005b7e:	f04f 0700 	mov.w	r7, #0
 8005b82:	bf58      	it	pl
 8005b84:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b88:	6022      	str	r2, [r4, #0]
 8005b8a:	e78f      	b.n	8005aac <_scanf_float+0x198>
 8005b8c:	f04f 0a03 	mov.w	sl, #3
 8005b90:	e78c      	b.n	8005aac <_scanf_float+0x198>
 8005b92:	4649      	mov	r1, r9
 8005b94:	4640      	mov	r0, r8
 8005b96:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005b9a:	4798      	blx	r3
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	f43f aedf 	beq.w	8005960 <_scanf_float+0x4c>
 8005ba2:	e6eb      	b.n	800597c <_scanf_float+0x68>
 8005ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ba8:	464a      	mov	r2, r9
 8005baa:	4640      	mov	r0, r8
 8005bac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bb0:	4798      	blx	r3
 8005bb2:	6923      	ldr	r3, [r4, #16]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	6123      	str	r3, [r4, #16]
 8005bb8:	e6eb      	b.n	8005992 <_scanf_float+0x7e>
 8005bba:	1e6b      	subs	r3, r5, #1
 8005bbc:	2b06      	cmp	r3, #6
 8005bbe:	d824      	bhi.n	8005c0a <_scanf_float+0x2f6>
 8005bc0:	2d02      	cmp	r5, #2
 8005bc2:	d836      	bhi.n	8005c32 <_scanf_float+0x31e>
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	429e      	cmp	r6, r3
 8005bc8:	f67f aee7 	bls.w	800599a <_scanf_float+0x86>
 8005bcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bd0:	464a      	mov	r2, r9
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bd8:	4798      	blx	r3
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	6123      	str	r3, [r4, #16]
 8005be0:	e7f0      	b.n	8005bc4 <_scanf_float+0x2b0>
 8005be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005be6:	464a      	mov	r2, r9
 8005be8:	4640      	mov	r0, r8
 8005bea:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005bee:	4798      	blx	r3
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	6123      	str	r3, [r4, #16]
 8005bf6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005bfa:	fa5f fa8a 	uxtb.w	sl, sl
 8005bfe:	f1ba 0f02 	cmp.w	sl, #2
 8005c02:	d1ee      	bne.n	8005be2 <_scanf_float+0x2ce>
 8005c04:	3d03      	subs	r5, #3
 8005c06:	b2ed      	uxtb	r5, r5
 8005c08:	1b76      	subs	r6, r6, r5
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	05da      	lsls	r2, r3, #23
 8005c0e:	d530      	bpl.n	8005c72 <_scanf_float+0x35e>
 8005c10:	055b      	lsls	r3, r3, #21
 8005c12:	d511      	bpl.n	8005c38 <_scanf_float+0x324>
 8005c14:	9b01      	ldr	r3, [sp, #4]
 8005c16:	429e      	cmp	r6, r3
 8005c18:	f67f aebf 	bls.w	800599a <_scanf_float+0x86>
 8005c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c20:	464a      	mov	r2, r9
 8005c22:	4640      	mov	r0, r8
 8005c24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c28:	4798      	blx	r3
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	e7f0      	b.n	8005c14 <_scanf_float+0x300>
 8005c32:	46aa      	mov	sl, r5
 8005c34:	46b3      	mov	fp, r6
 8005c36:	e7de      	b.n	8005bf6 <_scanf_float+0x2e2>
 8005c38:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	2965      	cmp	r1, #101	@ 0x65
 8005c40:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005c44:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8005c48:	6123      	str	r3, [r4, #16]
 8005c4a:	d00c      	beq.n	8005c66 <_scanf_float+0x352>
 8005c4c:	2945      	cmp	r1, #69	@ 0x45
 8005c4e:	d00a      	beq.n	8005c66 <_scanf_float+0x352>
 8005c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c54:	464a      	mov	r2, r9
 8005c56:	4640      	mov	r0, r8
 8005c58:	4798      	blx	r3
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	1eb5      	subs	r5, r6, #2
 8005c64:	6123      	str	r3, [r4, #16]
 8005c66:	464a      	mov	r2, r9
 8005c68:	4640      	mov	r0, r8
 8005c6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c6e:	4798      	blx	r3
 8005c70:	462e      	mov	r6, r5
 8005c72:	6822      	ldr	r2, [r4, #0]
 8005c74:	f012 0210 	ands.w	r2, r2, #16
 8005c78:	d001      	beq.n	8005c7e <_scanf_float+0x36a>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e68e      	b.n	800599c <_scanf_float+0x88>
 8005c7e:	7032      	strb	r2, [r6, #0]
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c8a:	d125      	bne.n	8005cd8 <_scanf_float+0x3c4>
 8005c8c:	9b02      	ldr	r3, [sp, #8]
 8005c8e:	429f      	cmp	r7, r3
 8005c90:	d00a      	beq.n	8005ca8 <_scanf_float+0x394>
 8005c92:	1bda      	subs	r2, r3, r7
 8005c94:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005c98:	429e      	cmp	r6, r3
 8005c9a:	bf28      	it	cs
 8005c9c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	491f      	ldr	r1, [pc, #124]	@ (8005d20 <_scanf_float+0x40c>)
 8005ca4:	f000 f902 	bl	8005eac <siprintf>
 8005ca8:	2200      	movs	r2, #0
 8005caa:	4640      	mov	r0, r8
 8005cac:	9901      	ldr	r1, [sp, #4]
 8005cae:	f002 fbeb 	bl	8008488 <_strtod_r>
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	6825      	ldr	r5, [r4, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f015 0f02 	tst.w	r5, #2
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	460f      	mov	r7, r1
 8005cc0:	f103 0204 	add.w	r2, r3, #4
 8005cc4:	d015      	beq.n	8005cf2 <_scanf_float+0x3de>
 8005cc6:	9903      	ldr	r1, [sp, #12]
 8005cc8:	600a      	str	r2, [r1, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	e9c3 6700 	strd	r6, r7, [r3]
 8005cd0:	68e3      	ldr	r3, [r4, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60e3      	str	r3, [r4, #12]
 8005cd6:	e7d0      	b.n	8005c7a <_scanf_float+0x366>
 8005cd8:	9b04      	ldr	r3, [sp, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0e4      	beq.n	8005ca8 <_scanf_float+0x394>
 8005cde:	9905      	ldr	r1, [sp, #20]
 8005ce0:	230a      	movs	r3, #10
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	3101      	adds	r1, #1
 8005ce6:	f002 fc4f 	bl	8008588 <_strtol_r>
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	9e05      	ldr	r6, [sp, #20]
 8005cee:	1ac2      	subs	r2, r0, r3
 8005cf0:	e7d0      	b.n	8005c94 <_scanf_float+0x380>
 8005cf2:	076d      	lsls	r5, r5, #29
 8005cf4:	d4e7      	bmi.n	8005cc6 <_scanf_float+0x3b2>
 8005cf6:	9d03      	ldr	r5, [sp, #12]
 8005cf8:	602a      	str	r2, [r5, #0]
 8005cfa:	681d      	ldr	r5, [r3, #0]
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	f7fa fe84 	bl	8000a0c <__aeabi_dcmpun>
 8005d04:	b120      	cbz	r0, 8005d10 <_scanf_float+0x3fc>
 8005d06:	4807      	ldr	r0, [pc, #28]	@ (8005d24 <_scanf_float+0x410>)
 8005d08:	f000 f9c4 	bl	8006094 <nanf>
 8005d0c:	6028      	str	r0, [r5, #0]
 8005d0e:	e7df      	b.n	8005cd0 <_scanf_float+0x3bc>
 8005d10:	4630      	mov	r0, r6
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa fed8 	bl	8000ac8 <__aeabi_d2f>
 8005d18:	e7f8      	b.n	8005d0c <_scanf_float+0x3f8>
 8005d1a:	2700      	movs	r7, #0
 8005d1c:	e633      	b.n	8005986 <_scanf_float+0x72>
 8005d1e:	bf00      	nop
 8005d20:	0800981a 	.word	0x0800981a
 8005d24:	0800995b 	.word	0x0800995b

08005d28 <std>:
 8005d28:	2300      	movs	r3, #0
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d36:	6083      	str	r3, [r0, #8]
 8005d38:	8181      	strh	r1, [r0, #12]
 8005d3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d3c:	81c2      	strh	r2, [r0, #14]
 8005d3e:	6183      	str	r3, [r0, #24]
 8005d40:	4619      	mov	r1, r3
 8005d42:	2208      	movs	r2, #8
 8005d44:	305c      	adds	r0, #92	@ 0x5c
 8005d46:	f000 f916 	bl	8005f76 <memset>
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <std+0x58>)
 8005d4c:	6224      	str	r4, [r4, #32]
 8005d4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d50:	4b0c      	ldr	r3, [pc, #48]	@ (8005d84 <std+0x5c>)
 8005d52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d54:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <std+0x60>)
 8005d56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d58:	4b0c      	ldr	r3, [pc, #48]	@ (8005d8c <std+0x64>)
 8005d5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d90 <std+0x68>)
 8005d5e:	429c      	cmp	r4, r3
 8005d60:	d006      	beq.n	8005d70 <std+0x48>
 8005d62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d66:	4294      	cmp	r4, r2
 8005d68:	d002      	beq.n	8005d70 <std+0x48>
 8005d6a:	33d0      	adds	r3, #208	@ 0xd0
 8005d6c:	429c      	cmp	r4, r3
 8005d6e:	d105      	bne.n	8005d7c <std+0x54>
 8005d70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d78:	f000 b97a 	b.w	8006070 <__retarget_lock_init_recursive>
 8005d7c:	bd10      	pop	{r4, pc}
 8005d7e:	bf00      	nop
 8005d80:	08005ef1 	.word	0x08005ef1
 8005d84:	08005f13 	.word	0x08005f13
 8005d88:	08005f4b 	.word	0x08005f4b
 8005d8c:	08005f6f 	.word	0x08005f6f
 8005d90:	2000032c 	.word	0x2000032c

08005d94 <stdio_exit_handler>:
 8005d94:	4a02      	ldr	r2, [pc, #8]	@ (8005da0 <stdio_exit_handler+0xc>)
 8005d96:	4903      	ldr	r1, [pc, #12]	@ (8005da4 <stdio_exit_handler+0x10>)
 8005d98:	4803      	ldr	r0, [pc, #12]	@ (8005da8 <stdio_exit_handler+0x14>)
 8005d9a:	f000 b869 	b.w	8005e70 <_fwalk_sglue>
 8005d9e:	bf00      	nop
 8005da0:	20000010 	.word	0x20000010
 8005da4:	0800893d 	.word	0x0800893d
 8005da8:	20000020 	.word	0x20000020

08005dac <cleanup_stdio>:
 8005dac:	6841      	ldr	r1, [r0, #4]
 8005dae:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <cleanup_stdio+0x34>)
 8005db0:	b510      	push	{r4, lr}
 8005db2:	4299      	cmp	r1, r3
 8005db4:	4604      	mov	r4, r0
 8005db6:	d001      	beq.n	8005dbc <cleanup_stdio+0x10>
 8005db8:	f002 fdc0 	bl	800893c <_fflush_r>
 8005dbc:	68a1      	ldr	r1, [r4, #8]
 8005dbe:	4b09      	ldr	r3, [pc, #36]	@ (8005de4 <cleanup_stdio+0x38>)
 8005dc0:	4299      	cmp	r1, r3
 8005dc2:	d002      	beq.n	8005dca <cleanup_stdio+0x1e>
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f002 fdb9 	bl	800893c <_fflush_r>
 8005dca:	68e1      	ldr	r1, [r4, #12]
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <cleanup_stdio+0x3c>)
 8005dce:	4299      	cmp	r1, r3
 8005dd0:	d004      	beq.n	8005ddc <cleanup_stdio+0x30>
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd8:	f002 bdb0 	b.w	800893c <_fflush_r>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	bf00      	nop
 8005de0:	2000032c 	.word	0x2000032c
 8005de4:	20000394 	.word	0x20000394
 8005de8:	200003fc 	.word	0x200003fc

08005dec <global_stdio_init.part.0>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <global_stdio_init.part.0+0x30>)
 8005df0:	4c0b      	ldr	r4, [pc, #44]	@ (8005e20 <global_stdio_init.part.0+0x34>)
 8005df2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e24 <global_stdio_init.part.0+0x38>)
 8005df4:	4620      	mov	r0, r4
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	2104      	movs	r1, #4
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f7ff ff94 	bl	8005d28 <std>
 8005e00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e04:	2201      	movs	r2, #1
 8005e06:	2109      	movs	r1, #9
 8005e08:	f7ff ff8e 	bl	8005d28 <std>
 8005e0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e10:	2202      	movs	r2, #2
 8005e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e16:	2112      	movs	r1, #18
 8005e18:	f7ff bf86 	b.w	8005d28 <std>
 8005e1c:	20000464 	.word	0x20000464
 8005e20:	2000032c 	.word	0x2000032c
 8005e24:	08005d95 	.word	0x08005d95

08005e28 <__sfp_lock_acquire>:
 8005e28:	4801      	ldr	r0, [pc, #4]	@ (8005e30 <__sfp_lock_acquire+0x8>)
 8005e2a:	f000 b922 	b.w	8006072 <__retarget_lock_acquire_recursive>
 8005e2e:	bf00      	nop
 8005e30:	2000046d 	.word	0x2000046d

08005e34 <__sfp_lock_release>:
 8005e34:	4801      	ldr	r0, [pc, #4]	@ (8005e3c <__sfp_lock_release+0x8>)
 8005e36:	f000 b91d 	b.w	8006074 <__retarget_lock_release_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	2000046d 	.word	0x2000046d

08005e40 <__sinit>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	4604      	mov	r4, r0
 8005e44:	f7ff fff0 	bl	8005e28 <__sfp_lock_acquire>
 8005e48:	6a23      	ldr	r3, [r4, #32]
 8005e4a:	b11b      	cbz	r3, 8005e54 <__sinit+0x14>
 8005e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e50:	f7ff bff0 	b.w	8005e34 <__sfp_lock_release>
 8005e54:	4b04      	ldr	r3, [pc, #16]	@ (8005e68 <__sinit+0x28>)
 8005e56:	6223      	str	r3, [r4, #32]
 8005e58:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <__sinit+0x2c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f5      	bne.n	8005e4c <__sinit+0xc>
 8005e60:	f7ff ffc4 	bl	8005dec <global_stdio_init.part.0>
 8005e64:	e7f2      	b.n	8005e4c <__sinit+0xc>
 8005e66:	bf00      	nop
 8005e68:	08005dad 	.word	0x08005dad
 8005e6c:	20000464 	.word	0x20000464

08005e70 <_fwalk_sglue>:
 8005e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e74:	4607      	mov	r7, r0
 8005e76:	4688      	mov	r8, r1
 8005e78:	4614      	mov	r4, r2
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e80:	f1b9 0901 	subs.w	r9, r9, #1
 8005e84:	d505      	bpl.n	8005e92 <_fwalk_sglue+0x22>
 8005e86:	6824      	ldr	r4, [r4, #0]
 8005e88:	2c00      	cmp	r4, #0
 8005e8a:	d1f7      	bne.n	8005e7c <_fwalk_sglue+0xc>
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e92:	89ab      	ldrh	r3, [r5, #12]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d907      	bls.n	8005ea8 <_fwalk_sglue+0x38>
 8005e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	d003      	beq.n	8005ea8 <_fwalk_sglue+0x38>
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	47c0      	blx	r8
 8005ea6:	4306      	orrs	r6, r0
 8005ea8:	3568      	adds	r5, #104	@ 0x68
 8005eaa:	e7e9      	b.n	8005e80 <_fwalk_sglue+0x10>

08005eac <siprintf>:
 8005eac:	b40e      	push	{r1, r2, r3}
 8005eae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005eb2:	b510      	push	{r4, lr}
 8005eb4:	2400      	movs	r4, #0
 8005eb6:	b09d      	sub	sp, #116	@ 0x74
 8005eb8:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005eba:	9002      	str	r0, [sp, #8]
 8005ebc:	9006      	str	r0, [sp, #24]
 8005ebe:	9107      	str	r1, [sp, #28]
 8005ec0:	9104      	str	r1, [sp, #16]
 8005ec2:	4809      	ldr	r0, [pc, #36]	@ (8005ee8 <siprintf+0x3c>)
 8005ec4:	4909      	ldr	r1, [pc, #36]	@ (8005eec <siprintf+0x40>)
 8005ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eca:	9105      	str	r1, [sp, #20]
 8005ecc:	6800      	ldr	r0, [r0, #0]
 8005ece:	a902      	add	r1, sp, #8
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005ed4:	f002 fbb6 	bl	8008644 <_svfiprintf_r>
 8005ed8:	9b02      	ldr	r3, [sp, #8]
 8005eda:	701c      	strb	r4, [r3, #0]
 8005edc:	b01d      	add	sp, #116	@ 0x74
 8005ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee2:	b003      	add	sp, #12
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	2000001c 	.word	0x2000001c
 8005eec:	ffff0208 	.word	0xffff0208

08005ef0 <__sread>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef8:	f000 f86c 	bl	8005fd4 <_read_r>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	bfab      	itete	ge
 8005f00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f02:	89a3      	ldrhlt	r3, [r4, #12]
 8005f04:	181b      	addge	r3, r3, r0
 8005f06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f0a:	bfac      	ite	ge
 8005f0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f0e:	81a3      	strhlt	r3, [r4, #12]
 8005f10:	bd10      	pop	{r4, pc}

08005f12 <__swrite>:
 8005f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f16:	461f      	mov	r7, r3
 8005f18:	898b      	ldrh	r3, [r1, #12]
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	05db      	lsls	r3, r3, #23
 8005f1e:	460c      	mov	r4, r1
 8005f20:	4616      	mov	r6, r2
 8005f22:	d505      	bpl.n	8005f30 <__swrite+0x1e>
 8005f24:	2302      	movs	r3, #2
 8005f26:	2200      	movs	r2, #0
 8005f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2c:	f000 f840 	bl	8005fb0 <_lseek_r>
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	4632      	mov	r2, r6
 8005f34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f38:	81a3      	strh	r3, [r4, #12]
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f46:	f000 b857 	b.w	8005ff8 <_write_r>

08005f4a <__sseek>:
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f52:	f000 f82d 	bl	8005fb0 <_lseek_r>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	bf15      	itete	ne
 8005f5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f66:	81a3      	strheq	r3, [r4, #12]
 8005f68:	bf18      	it	ne
 8005f6a:	81a3      	strhne	r3, [r4, #12]
 8005f6c:	bd10      	pop	{r4, pc}

08005f6e <__sclose>:
 8005f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f72:	f000 b80d 	b.w	8005f90 <_close_r>

08005f76 <memset>:
 8005f76:	4603      	mov	r3, r0
 8005f78:	4402      	add	r2, r0
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d100      	bne.n	8005f80 <memset+0xa>
 8005f7e:	4770      	bx	lr
 8005f80:	f803 1b01 	strb.w	r1, [r3], #1
 8005f84:	e7f9      	b.n	8005f7a <memset+0x4>
	...

08005f88 <_localeconv_r>:
 8005f88:	4800      	ldr	r0, [pc, #0]	@ (8005f8c <_localeconv_r+0x4>)
 8005f8a:	4770      	bx	lr
 8005f8c:	2000015c 	.word	0x2000015c

08005f90 <_close_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	2300      	movs	r3, #0
 8005f94:	4d05      	ldr	r5, [pc, #20]	@ (8005fac <_close_r+0x1c>)
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fb fc17 	bl	80017ce <_close>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_close_r+0x1a>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_close_r+0x1a>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	20000468 	.word	0x20000468

08005fb0 <_lseek_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4d05      	ldr	r5, [pc, #20]	@ (8005fd0 <_lseek_r+0x20>)
 8005fbc:	602a      	str	r2, [r5, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f7fb fc29 	bl	8001816 <_lseek>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_lseek_r+0x1e>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_lseek_r+0x1e>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	20000468 	.word	0x20000468

08005fd4 <_read_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4608      	mov	r0, r1
 8005fda:	4611      	mov	r1, r2
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4d05      	ldr	r5, [pc, #20]	@ (8005ff4 <_read_r+0x20>)
 8005fe0:	602a      	str	r2, [r5, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f7fb fbba 	bl	800175c <_read>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_read_r+0x1e>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_read_r+0x1e>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	20000468 	.word	0x20000468

08005ff8 <_write_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	4611      	mov	r1, r2
 8006000:	2200      	movs	r2, #0
 8006002:	4d05      	ldr	r5, [pc, #20]	@ (8006018 <_write_r+0x20>)
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	f7fb fbc5 	bl	8001796 <_write>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_write_r+0x1e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_write_r+0x1e>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	20000468 	.word	0x20000468

0800601c <__errno>:
 800601c:	4b01      	ldr	r3, [pc, #4]	@ (8006024 <__errno+0x8>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	2000001c 	.word	0x2000001c

08006028 <__libc_init_array>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	2600      	movs	r6, #0
 800602c:	4d0c      	ldr	r5, [pc, #48]	@ (8006060 <__libc_init_array+0x38>)
 800602e:	4c0d      	ldr	r4, [pc, #52]	@ (8006064 <__libc_init_array+0x3c>)
 8006030:	1b64      	subs	r4, r4, r5
 8006032:	10a4      	asrs	r4, r4, #2
 8006034:	42a6      	cmp	r6, r4
 8006036:	d109      	bne.n	800604c <__libc_init_array+0x24>
 8006038:	f003 fb6c 	bl	8009714 <_init>
 800603c:	2600      	movs	r6, #0
 800603e:	4d0a      	ldr	r5, [pc, #40]	@ (8006068 <__libc_init_array+0x40>)
 8006040:	4c0a      	ldr	r4, [pc, #40]	@ (800606c <__libc_init_array+0x44>)
 8006042:	1b64      	subs	r4, r4, r5
 8006044:	10a4      	asrs	r4, r4, #2
 8006046:	42a6      	cmp	r6, r4
 8006048:	d105      	bne.n	8006056 <__libc_init_array+0x2e>
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006050:	4798      	blx	r3
 8006052:	3601      	adds	r6, #1
 8006054:	e7ee      	b.n	8006034 <__libc_init_array+0xc>
 8006056:	f855 3b04 	ldr.w	r3, [r5], #4
 800605a:	4798      	blx	r3
 800605c:	3601      	adds	r6, #1
 800605e:	e7f2      	b.n	8006046 <__libc_init_array+0x1e>
 8006060:	08009c14 	.word	0x08009c14
 8006064:	08009c14 	.word	0x08009c14
 8006068:	08009c14 	.word	0x08009c14
 800606c:	08009c18 	.word	0x08009c18

08006070 <__retarget_lock_init_recursive>:
 8006070:	4770      	bx	lr

08006072 <__retarget_lock_acquire_recursive>:
 8006072:	4770      	bx	lr

08006074 <__retarget_lock_release_recursive>:
 8006074:	4770      	bx	lr

08006076 <memchr>:
 8006076:	4603      	mov	r3, r0
 8006078:	b510      	push	{r4, lr}
 800607a:	b2c9      	uxtb	r1, r1
 800607c:	4402      	add	r2, r0
 800607e:	4293      	cmp	r3, r2
 8006080:	4618      	mov	r0, r3
 8006082:	d101      	bne.n	8006088 <memchr+0x12>
 8006084:	2000      	movs	r0, #0
 8006086:	e003      	b.n	8006090 <memchr+0x1a>
 8006088:	7804      	ldrb	r4, [r0, #0]
 800608a:	3301      	adds	r3, #1
 800608c:	428c      	cmp	r4, r1
 800608e:	d1f6      	bne.n	800607e <memchr+0x8>
 8006090:	bd10      	pop	{r4, pc}
	...

08006094 <nanf>:
 8006094:	4800      	ldr	r0, [pc, #0]	@ (8006098 <nanf+0x4>)
 8006096:	4770      	bx	lr
 8006098:	7fc00000 	.word	0x7fc00000

0800609c <quorem>:
 800609c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	6903      	ldr	r3, [r0, #16]
 80060a2:	690c      	ldr	r4, [r1, #16]
 80060a4:	4607      	mov	r7, r0
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	db7e      	blt.n	80061a8 <quorem+0x10c>
 80060aa:	3c01      	subs	r4, #1
 80060ac:	00a3      	lsls	r3, r4, #2
 80060ae:	f100 0514 	add.w	r5, r0, #20
 80060b2:	f101 0814 	add.w	r8, r1, #20
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060c6:	3301      	adds	r3, #1
 80060c8:	429a      	cmp	r2, r3
 80060ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80060ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060d2:	d32e      	bcc.n	8006132 <quorem+0x96>
 80060d4:	f04f 0a00 	mov.w	sl, #0
 80060d8:	46c4      	mov	ip, r8
 80060da:	46ae      	mov	lr, r5
 80060dc:	46d3      	mov	fp, sl
 80060de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060e2:	b298      	uxth	r0, r3
 80060e4:	fb06 a000 	mla	r0, r6, r0, sl
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	0c02      	lsrs	r2, r0, #16
 80060ec:	fb06 2303 	mla	r3, r6, r3, r2
 80060f0:	f8de 2000 	ldr.w	r2, [lr]
 80060f4:	b280      	uxth	r0, r0
 80060f6:	b292      	uxth	r2, r2
 80060f8:	1a12      	subs	r2, r2, r0
 80060fa:	445a      	add	r2, fp
 80060fc:	f8de 0000 	ldr.w	r0, [lr]
 8006100:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006104:	b29b      	uxth	r3, r3
 8006106:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800610a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800610e:	b292      	uxth	r2, r2
 8006110:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006114:	45e1      	cmp	r9, ip
 8006116:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800611a:	f84e 2b04 	str.w	r2, [lr], #4
 800611e:	d2de      	bcs.n	80060de <quorem+0x42>
 8006120:	9b00      	ldr	r3, [sp, #0]
 8006122:	58eb      	ldr	r3, [r5, r3]
 8006124:	b92b      	cbnz	r3, 8006132 <quorem+0x96>
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	3b04      	subs	r3, #4
 800612a:	429d      	cmp	r5, r3
 800612c:	461a      	mov	r2, r3
 800612e:	d32f      	bcc.n	8006190 <quorem+0xf4>
 8006130:	613c      	str	r4, [r7, #16]
 8006132:	4638      	mov	r0, r7
 8006134:	f001 f9ca 	bl	80074cc <__mcmp>
 8006138:	2800      	cmp	r0, #0
 800613a:	db25      	blt.n	8006188 <quorem+0xec>
 800613c:	4629      	mov	r1, r5
 800613e:	2000      	movs	r0, #0
 8006140:	f858 2b04 	ldr.w	r2, [r8], #4
 8006144:	f8d1 c000 	ldr.w	ip, [r1]
 8006148:	fa1f fe82 	uxth.w	lr, r2
 800614c:	fa1f f38c 	uxth.w	r3, ip
 8006150:	eba3 030e 	sub.w	r3, r3, lr
 8006154:	4403      	add	r3, r0
 8006156:	0c12      	lsrs	r2, r2, #16
 8006158:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800615c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006160:	b29b      	uxth	r3, r3
 8006162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006166:	45c1      	cmp	r9, r8
 8006168:	ea4f 4022 	mov.w	r0, r2, asr #16
 800616c:	f841 3b04 	str.w	r3, [r1], #4
 8006170:	d2e6      	bcs.n	8006140 <quorem+0xa4>
 8006172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800617a:	b922      	cbnz	r2, 8006186 <quorem+0xea>
 800617c:	3b04      	subs	r3, #4
 800617e:	429d      	cmp	r5, r3
 8006180:	461a      	mov	r2, r3
 8006182:	d30b      	bcc.n	800619c <quorem+0x100>
 8006184:	613c      	str	r4, [r7, #16]
 8006186:	3601      	adds	r6, #1
 8006188:	4630      	mov	r0, r6
 800618a:	b003      	add	sp, #12
 800618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	3b04      	subs	r3, #4
 8006194:	2a00      	cmp	r2, #0
 8006196:	d1cb      	bne.n	8006130 <quorem+0x94>
 8006198:	3c01      	subs	r4, #1
 800619a:	e7c6      	b.n	800612a <quorem+0x8e>
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	3b04      	subs	r3, #4
 80061a0:	2a00      	cmp	r2, #0
 80061a2:	d1ef      	bne.n	8006184 <quorem+0xe8>
 80061a4:	3c01      	subs	r4, #1
 80061a6:	e7ea      	b.n	800617e <quorem+0xe2>
 80061a8:	2000      	movs	r0, #0
 80061aa:	e7ee      	b.n	800618a <quorem+0xee>
 80061ac:	0000      	movs	r0, r0
	...

080061b0 <_dtoa_r>:
 80061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	4614      	mov	r4, r2
 80061b6:	461d      	mov	r5, r3
 80061b8:	69c7      	ldr	r7, [r0, #28]
 80061ba:	b097      	sub	sp, #92	@ 0x5c
 80061bc:	4681      	mov	r9, r0
 80061be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80061c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80061c4:	b97f      	cbnz	r7, 80061e6 <_dtoa_r+0x36>
 80061c6:	2010      	movs	r0, #16
 80061c8:	f000 fe0e 	bl	8006de8 <malloc>
 80061cc:	4602      	mov	r2, r0
 80061ce:	f8c9 001c 	str.w	r0, [r9, #28]
 80061d2:	b920      	cbnz	r0, 80061de <_dtoa_r+0x2e>
 80061d4:	21ef      	movs	r1, #239	@ 0xef
 80061d6:	4bac      	ldr	r3, [pc, #688]	@ (8006488 <_dtoa_r+0x2d8>)
 80061d8:	48ac      	ldr	r0, [pc, #688]	@ (800648c <_dtoa_r+0x2dc>)
 80061da:	f002 fc27 	bl	8008a2c <__assert_func>
 80061de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061e2:	6007      	str	r7, [r0, #0]
 80061e4:	60c7      	str	r7, [r0, #12]
 80061e6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061ea:	6819      	ldr	r1, [r3, #0]
 80061ec:	b159      	cbz	r1, 8006206 <_dtoa_r+0x56>
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	2301      	movs	r3, #1
 80061f2:	4093      	lsls	r3, r2
 80061f4:	604a      	str	r2, [r1, #4]
 80061f6:	608b      	str	r3, [r1, #8]
 80061f8:	4648      	mov	r0, r9
 80061fa:	f000 feeb 	bl	8006fd4 <_Bfree>
 80061fe:	2200      	movs	r2, #0
 8006200:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	1e2b      	subs	r3, r5, #0
 8006208:	bfaf      	iteee	ge
 800620a:	2300      	movge	r3, #0
 800620c:	2201      	movlt	r2, #1
 800620e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006212:	9307      	strlt	r3, [sp, #28]
 8006214:	bfa8      	it	ge
 8006216:	6033      	strge	r3, [r6, #0]
 8006218:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800621c:	4b9c      	ldr	r3, [pc, #624]	@ (8006490 <_dtoa_r+0x2e0>)
 800621e:	bfb8      	it	lt
 8006220:	6032      	strlt	r2, [r6, #0]
 8006222:	ea33 0308 	bics.w	r3, r3, r8
 8006226:	d112      	bne.n	800624e <_dtoa_r+0x9e>
 8006228:	f242 730f 	movw	r3, #9999	@ 0x270f
 800622c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006234:	4323      	orrs	r3, r4
 8006236:	f000 855e 	beq.w	8006cf6 <_dtoa_r+0xb46>
 800623a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800623c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006494 <_dtoa_r+0x2e4>
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 8560 	beq.w	8006d06 <_dtoa_r+0xb56>
 8006246:	f10a 0303 	add.w	r3, sl, #3
 800624a:	f000 bd5a 	b.w	8006d02 <_dtoa_r+0xb52>
 800624e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006252:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800625a:	2200      	movs	r2, #0
 800625c:	2300      	movs	r3, #0
 800625e:	f7fa fba3 	bl	80009a8 <__aeabi_dcmpeq>
 8006262:	4607      	mov	r7, r0
 8006264:	b158      	cbz	r0, 800627e <_dtoa_r+0xce>
 8006266:	2301      	movs	r3, #1
 8006268:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800626e:	b113      	cbz	r3, 8006276 <_dtoa_r+0xc6>
 8006270:	4b89      	ldr	r3, [pc, #548]	@ (8006498 <_dtoa_r+0x2e8>)
 8006272:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800649c <_dtoa_r+0x2ec>
 800627a:	f000 bd44 	b.w	8006d06 <_dtoa_r+0xb56>
 800627e:	ab14      	add	r3, sp, #80	@ 0x50
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	ab15      	add	r3, sp, #84	@ 0x54
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	4648      	mov	r0, r9
 8006288:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800628c:	f001 fa36 	bl	80076fc <__d2b>
 8006290:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006294:	9003      	str	r0, [sp, #12]
 8006296:	2e00      	cmp	r6, #0
 8006298:	d078      	beq.n	800638c <_dtoa_r+0x1dc>
 800629a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800629e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062a0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062ac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062b0:	9712      	str	r7, [sp, #72]	@ 0x48
 80062b2:	4619      	mov	r1, r3
 80062b4:	2200      	movs	r2, #0
 80062b6:	4b7a      	ldr	r3, [pc, #488]	@ (80064a0 <_dtoa_r+0x2f0>)
 80062b8:	f7f9 ff56 	bl	8000168 <__aeabi_dsub>
 80062bc:	a36c      	add	r3, pc, #432	@ (adr r3, 8006470 <_dtoa_r+0x2c0>)
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f7fa f909 	bl	80004d8 <__aeabi_dmul>
 80062c6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006478 <_dtoa_r+0x2c8>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f7f9 ff4e 	bl	800016c <__adddf3>
 80062d0:	4604      	mov	r4, r0
 80062d2:	4630      	mov	r0, r6
 80062d4:	460d      	mov	r5, r1
 80062d6:	f7fa f895 	bl	8000404 <__aeabi_i2d>
 80062da:	a369      	add	r3, pc, #420	@ (adr r3, 8006480 <_dtoa_r+0x2d0>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f7fa f8fa 	bl	80004d8 <__aeabi_dmul>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4620      	mov	r0, r4
 80062ea:	4629      	mov	r1, r5
 80062ec:	f7f9 ff3e 	bl	800016c <__adddf3>
 80062f0:	4604      	mov	r4, r0
 80062f2:	460d      	mov	r5, r1
 80062f4:	f7fa fba0 	bl	8000a38 <__aeabi_d2iz>
 80062f8:	2200      	movs	r2, #0
 80062fa:	4607      	mov	r7, r0
 80062fc:	2300      	movs	r3, #0
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa fb5b 	bl	80009bc <__aeabi_dcmplt>
 8006306:	b140      	cbz	r0, 800631a <_dtoa_r+0x16a>
 8006308:	4638      	mov	r0, r7
 800630a:	f7fa f87b 	bl	8000404 <__aeabi_i2d>
 800630e:	4622      	mov	r2, r4
 8006310:	462b      	mov	r3, r5
 8006312:	f7fa fb49 	bl	80009a8 <__aeabi_dcmpeq>
 8006316:	b900      	cbnz	r0, 800631a <_dtoa_r+0x16a>
 8006318:	3f01      	subs	r7, #1
 800631a:	2f16      	cmp	r7, #22
 800631c:	d854      	bhi.n	80063c8 <_dtoa_r+0x218>
 800631e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006322:	4b60      	ldr	r3, [pc, #384]	@ (80064a4 <_dtoa_r+0x2f4>)
 8006324:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f7fa fb46 	bl	80009bc <__aeabi_dcmplt>
 8006330:	2800      	cmp	r0, #0
 8006332:	d04b      	beq.n	80063cc <_dtoa_r+0x21c>
 8006334:	2300      	movs	r3, #0
 8006336:	3f01      	subs	r7, #1
 8006338:	930f      	str	r3, [sp, #60]	@ 0x3c
 800633a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800633c:	1b9b      	subs	r3, r3, r6
 800633e:	1e5a      	subs	r2, r3, #1
 8006340:	bf49      	itett	mi
 8006342:	f1c3 0301 	rsbmi	r3, r3, #1
 8006346:	2300      	movpl	r3, #0
 8006348:	9304      	strmi	r3, [sp, #16]
 800634a:	2300      	movmi	r3, #0
 800634c:	9209      	str	r2, [sp, #36]	@ 0x24
 800634e:	bf54      	ite	pl
 8006350:	9304      	strpl	r3, [sp, #16]
 8006352:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006354:	2f00      	cmp	r7, #0
 8006356:	db3b      	blt.n	80063d0 <_dtoa_r+0x220>
 8006358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800635a:	970e      	str	r7, [sp, #56]	@ 0x38
 800635c:	443b      	add	r3, r7
 800635e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006360:	2300      	movs	r3, #0
 8006362:	930a      	str	r3, [sp, #40]	@ 0x28
 8006364:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006366:	2b09      	cmp	r3, #9
 8006368:	d865      	bhi.n	8006436 <_dtoa_r+0x286>
 800636a:	2b05      	cmp	r3, #5
 800636c:	bfc4      	itt	gt
 800636e:	3b04      	subgt	r3, #4
 8006370:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006372:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006374:	bfc8      	it	gt
 8006376:	2400      	movgt	r4, #0
 8006378:	f1a3 0302 	sub.w	r3, r3, #2
 800637c:	bfd8      	it	le
 800637e:	2401      	movle	r4, #1
 8006380:	2b03      	cmp	r3, #3
 8006382:	d864      	bhi.n	800644e <_dtoa_r+0x29e>
 8006384:	e8df f003 	tbb	[pc, r3]
 8006388:	2c385553 	.word	0x2c385553
 800638c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006390:	441e      	add	r6, r3
 8006392:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006396:	2b20      	cmp	r3, #32
 8006398:	bfc1      	itttt	gt
 800639a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800639e:	fa08 f803 	lslgt.w	r8, r8, r3
 80063a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063aa:	bfd6      	itet	le
 80063ac:	f1c3 0320 	rsble	r3, r3, #32
 80063b0:	ea48 0003 	orrgt.w	r0, r8, r3
 80063b4:	fa04 f003 	lslle.w	r0, r4, r3
 80063b8:	f7fa f814 	bl	80003e4 <__aeabi_ui2d>
 80063bc:	2201      	movs	r2, #1
 80063be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063c2:	3e01      	subs	r6, #1
 80063c4:	9212      	str	r2, [sp, #72]	@ 0x48
 80063c6:	e774      	b.n	80062b2 <_dtoa_r+0x102>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e7b5      	b.n	8006338 <_dtoa_r+0x188>
 80063cc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80063ce:	e7b4      	b.n	800633a <_dtoa_r+0x18a>
 80063d0:	9b04      	ldr	r3, [sp, #16]
 80063d2:	1bdb      	subs	r3, r3, r7
 80063d4:	9304      	str	r3, [sp, #16]
 80063d6:	427b      	negs	r3, r7
 80063d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80063da:	2300      	movs	r3, #0
 80063dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80063de:	e7c1      	b.n	8006364 <_dtoa_r+0x1b4>
 80063e0:	2301      	movs	r3, #1
 80063e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063e6:	eb07 0b03 	add.w	fp, r7, r3
 80063ea:	f10b 0301 	add.w	r3, fp, #1
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	9308      	str	r3, [sp, #32]
 80063f2:	bfb8      	it	lt
 80063f4:	2301      	movlt	r3, #1
 80063f6:	e006      	b.n	8006406 <_dtoa_r+0x256>
 80063f8:	2301      	movs	r3, #1
 80063fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd28      	ble.n	8006454 <_dtoa_r+0x2a4>
 8006402:	469b      	mov	fp, r3
 8006404:	9308      	str	r3, [sp, #32]
 8006406:	2100      	movs	r1, #0
 8006408:	2204      	movs	r2, #4
 800640a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800640e:	f102 0514 	add.w	r5, r2, #20
 8006412:	429d      	cmp	r5, r3
 8006414:	d926      	bls.n	8006464 <_dtoa_r+0x2b4>
 8006416:	6041      	str	r1, [r0, #4]
 8006418:	4648      	mov	r0, r9
 800641a:	f000 fd9b 	bl	8006f54 <_Balloc>
 800641e:	4682      	mov	sl, r0
 8006420:	2800      	cmp	r0, #0
 8006422:	d143      	bne.n	80064ac <_dtoa_r+0x2fc>
 8006424:	4602      	mov	r2, r0
 8006426:	f240 11af 	movw	r1, #431	@ 0x1af
 800642a:	4b1f      	ldr	r3, [pc, #124]	@ (80064a8 <_dtoa_r+0x2f8>)
 800642c:	e6d4      	b.n	80061d8 <_dtoa_r+0x28>
 800642e:	2300      	movs	r3, #0
 8006430:	e7e3      	b.n	80063fa <_dtoa_r+0x24a>
 8006432:	2300      	movs	r3, #0
 8006434:	e7d5      	b.n	80063e2 <_dtoa_r+0x232>
 8006436:	2401      	movs	r4, #1
 8006438:	2300      	movs	r3, #0
 800643a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800643c:	9320      	str	r3, [sp, #128]	@ 0x80
 800643e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006442:	2200      	movs	r2, #0
 8006444:	2312      	movs	r3, #18
 8006446:	f8cd b020 	str.w	fp, [sp, #32]
 800644a:	9221      	str	r2, [sp, #132]	@ 0x84
 800644c:	e7db      	b.n	8006406 <_dtoa_r+0x256>
 800644e:	2301      	movs	r3, #1
 8006450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006452:	e7f4      	b.n	800643e <_dtoa_r+0x28e>
 8006454:	f04f 0b01 	mov.w	fp, #1
 8006458:	465b      	mov	r3, fp
 800645a:	f8cd b020 	str.w	fp, [sp, #32]
 800645e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006462:	e7d0      	b.n	8006406 <_dtoa_r+0x256>
 8006464:	3101      	adds	r1, #1
 8006466:	0052      	lsls	r2, r2, #1
 8006468:	e7d1      	b.n	800640e <_dtoa_r+0x25e>
 800646a:	bf00      	nop
 800646c:	f3af 8000 	nop.w
 8006470:	636f4361 	.word	0x636f4361
 8006474:	3fd287a7 	.word	0x3fd287a7
 8006478:	8b60c8b3 	.word	0x8b60c8b3
 800647c:	3fc68a28 	.word	0x3fc68a28
 8006480:	509f79fb 	.word	0x509f79fb
 8006484:	3fd34413 	.word	0x3fd34413
 8006488:	0800982c 	.word	0x0800982c
 800648c:	08009843 	.word	0x08009843
 8006490:	7ff00000 	.word	0x7ff00000
 8006494:	08009828 	.word	0x08009828
 8006498:	080097f7 	.word	0x080097f7
 800649c:	080097f6 	.word	0x080097f6
 80064a0:	3ff80000 	.word	0x3ff80000
 80064a4:	080099f0 	.word	0x080099f0
 80064a8:	0800989b 	.word	0x0800989b
 80064ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064b0:	6018      	str	r0, [r3, #0]
 80064b2:	9b08      	ldr	r3, [sp, #32]
 80064b4:	2b0e      	cmp	r3, #14
 80064b6:	f200 80a1 	bhi.w	80065fc <_dtoa_r+0x44c>
 80064ba:	2c00      	cmp	r4, #0
 80064bc:	f000 809e 	beq.w	80065fc <_dtoa_r+0x44c>
 80064c0:	2f00      	cmp	r7, #0
 80064c2:	dd33      	ble.n	800652c <_dtoa_r+0x37c>
 80064c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006738 <_dtoa_r+0x588>)
 80064c6:	f007 020f 	and.w	r2, r7, #15
 80064ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ce:	05f8      	lsls	r0, r7, #23
 80064d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80064d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064dc:	d516      	bpl.n	800650c <_dtoa_r+0x35c>
 80064de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064e2:	4b96      	ldr	r3, [pc, #600]	@ (800673c <_dtoa_r+0x58c>)
 80064e4:	2603      	movs	r6, #3
 80064e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064ea:	f7fa f91f 	bl	800072c <__aeabi_ddiv>
 80064ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064f2:	f004 040f 	and.w	r4, r4, #15
 80064f6:	4d91      	ldr	r5, [pc, #580]	@ (800673c <_dtoa_r+0x58c>)
 80064f8:	b954      	cbnz	r4, 8006510 <_dtoa_r+0x360>
 80064fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006502:	f7fa f913 	bl	800072c <__aeabi_ddiv>
 8006506:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800650a:	e028      	b.n	800655e <_dtoa_r+0x3ae>
 800650c:	2602      	movs	r6, #2
 800650e:	e7f2      	b.n	80064f6 <_dtoa_r+0x346>
 8006510:	07e1      	lsls	r1, r4, #31
 8006512:	d508      	bpl.n	8006526 <_dtoa_r+0x376>
 8006514:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006518:	e9d5 2300 	ldrd	r2, r3, [r5]
 800651c:	f7f9 ffdc 	bl	80004d8 <__aeabi_dmul>
 8006520:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006524:	3601      	adds	r6, #1
 8006526:	1064      	asrs	r4, r4, #1
 8006528:	3508      	adds	r5, #8
 800652a:	e7e5      	b.n	80064f8 <_dtoa_r+0x348>
 800652c:	f000 80af 	beq.w	800668e <_dtoa_r+0x4de>
 8006530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006534:	427c      	negs	r4, r7
 8006536:	4b80      	ldr	r3, [pc, #512]	@ (8006738 <_dtoa_r+0x588>)
 8006538:	f004 020f 	and.w	r2, r4, #15
 800653c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f7f9 ffc8 	bl	80004d8 <__aeabi_dmul>
 8006548:	2602      	movs	r6, #2
 800654a:	2300      	movs	r3, #0
 800654c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006550:	4d7a      	ldr	r5, [pc, #488]	@ (800673c <_dtoa_r+0x58c>)
 8006552:	1124      	asrs	r4, r4, #4
 8006554:	2c00      	cmp	r4, #0
 8006556:	f040 808f 	bne.w	8006678 <_dtoa_r+0x4c8>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1d3      	bne.n	8006506 <_dtoa_r+0x356>
 800655e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006562:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8094 	beq.w	8006692 <_dtoa_r+0x4e2>
 800656a:	2200      	movs	r2, #0
 800656c:	4620      	mov	r0, r4
 800656e:	4629      	mov	r1, r5
 8006570:	4b73      	ldr	r3, [pc, #460]	@ (8006740 <_dtoa_r+0x590>)
 8006572:	f7fa fa23 	bl	80009bc <__aeabi_dcmplt>
 8006576:	2800      	cmp	r0, #0
 8006578:	f000 808b 	beq.w	8006692 <_dtoa_r+0x4e2>
 800657c:	9b08      	ldr	r3, [sp, #32]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8087 	beq.w	8006692 <_dtoa_r+0x4e2>
 8006584:	f1bb 0f00 	cmp.w	fp, #0
 8006588:	dd34      	ble.n	80065f4 <_dtoa_r+0x444>
 800658a:	4620      	mov	r0, r4
 800658c:	2200      	movs	r2, #0
 800658e:	4629      	mov	r1, r5
 8006590:	4b6c      	ldr	r3, [pc, #432]	@ (8006744 <_dtoa_r+0x594>)
 8006592:	f7f9 ffa1 	bl	80004d8 <__aeabi_dmul>
 8006596:	465c      	mov	r4, fp
 8006598:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800659c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80065a0:	3601      	adds	r6, #1
 80065a2:	4630      	mov	r0, r6
 80065a4:	f7f9 ff2e 	bl	8000404 <__aeabi_i2d>
 80065a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065ac:	f7f9 ff94 	bl	80004d8 <__aeabi_dmul>
 80065b0:	2200      	movs	r2, #0
 80065b2:	4b65      	ldr	r3, [pc, #404]	@ (8006748 <_dtoa_r+0x598>)
 80065b4:	f7f9 fdda 	bl	800016c <__adddf3>
 80065b8:	4605      	mov	r5, r0
 80065ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065be:	2c00      	cmp	r4, #0
 80065c0:	d16a      	bne.n	8006698 <_dtoa_r+0x4e8>
 80065c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c6:	2200      	movs	r2, #0
 80065c8:	4b60      	ldr	r3, [pc, #384]	@ (800674c <_dtoa_r+0x59c>)
 80065ca:	f7f9 fdcd 	bl	8000168 <__aeabi_dsub>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065d6:	462a      	mov	r2, r5
 80065d8:	4633      	mov	r3, r6
 80065da:	f7fa fa0d 	bl	80009f8 <__aeabi_dcmpgt>
 80065de:	2800      	cmp	r0, #0
 80065e0:	f040 8298 	bne.w	8006b14 <_dtoa_r+0x964>
 80065e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065e8:	462a      	mov	r2, r5
 80065ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065ee:	f7fa f9e5 	bl	80009bc <__aeabi_dcmplt>
 80065f2:	bb38      	cbnz	r0, 8006644 <_dtoa_r+0x494>
 80065f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80065f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f2c0 8157 	blt.w	80068b2 <_dtoa_r+0x702>
 8006604:	2f0e      	cmp	r7, #14
 8006606:	f300 8154 	bgt.w	80068b2 <_dtoa_r+0x702>
 800660a:	4b4b      	ldr	r3, [pc, #300]	@ (8006738 <_dtoa_r+0x588>)
 800660c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006610:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006614:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006618:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800661a:	2b00      	cmp	r3, #0
 800661c:	f280 80e5 	bge.w	80067ea <_dtoa_r+0x63a>
 8006620:	9b08      	ldr	r3, [sp, #32]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f300 80e1 	bgt.w	80067ea <_dtoa_r+0x63a>
 8006628:	d10c      	bne.n	8006644 <_dtoa_r+0x494>
 800662a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800662e:	2200      	movs	r2, #0
 8006630:	4b46      	ldr	r3, [pc, #280]	@ (800674c <_dtoa_r+0x59c>)
 8006632:	f7f9 ff51 	bl	80004d8 <__aeabi_dmul>
 8006636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800663a:	f7fa f9d3 	bl	80009e4 <__aeabi_dcmpge>
 800663e:	2800      	cmp	r0, #0
 8006640:	f000 8266 	beq.w	8006b10 <_dtoa_r+0x960>
 8006644:	2400      	movs	r4, #0
 8006646:	4625      	mov	r5, r4
 8006648:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800664a:	4656      	mov	r6, sl
 800664c:	ea6f 0803 	mvn.w	r8, r3
 8006650:	2700      	movs	r7, #0
 8006652:	4621      	mov	r1, r4
 8006654:	4648      	mov	r0, r9
 8006656:	f000 fcbd 	bl	8006fd4 <_Bfree>
 800665a:	2d00      	cmp	r5, #0
 800665c:	f000 80bd 	beq.w	80067da <_dtoa_r+0x62a>
 8006660:	b12f      	cbz	r7, 800666e <_dtoa_r+0x4be>
 8006662:	42af      	cmp	r7, r5
 8006664:	d003      	beq.n	800666e <_dtoa_r+0x4be>
 8006666:	4639      	mov	r1, r7
 8006668:	4648      	mov	r0, r9
 800666a:	f000 fcb3 	bl	8006fd4 <_Bfree>
 800666e:	4629      	mov	r1, r5
 8006670:	4648      	mov	r0, r9
 8006672:	f000 fcaf 	bl	8006fd4 <_Bfree>
 8006676:	e0b0      	b.n	80067da <_dtoa_r+0x62a>
 8006678:	07e2      	lsls	r2, r4, #31
 800667a:	d505      	bpl.n	8006688 <_dtoa_r+0x4d8>
 800667c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006680:	f7f9 ff2a 	bl	80004d8 <__aeabi_dmul>
 8006684:	2301      	movs	r3, #1
 8006686:	3601      	adds	r6, #1
 8006688:	1064      	asrs	r4, r4, #1
 800668a:	3508      	adds	r5, #8
 800668c:	e762      	b.n	8006554 <_dtoa_r+0x3a4>
 800668e:	2602      	movs	r6, #2
 8006690:	e765      	b.n	800655e <_dtoa_r+0x3ae>
 8006692:	46b8      	mov	r8, r7
 8006694:	9c08      	ldr	r4, [sp, #32]
 8006696:	e784      	b.n	80065a2 <_dtoa_r+0x3f2>
 8006698:	4b27      	ldr	r3, [pc, #156]	@ (8006738 <_dtoa_r+0x588>)
 800669a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800669c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066a4:	4454      	add	r4, sl
 80066a6:	2900      	cmp	r1, #0
 80066a8:	d054      	beq.n	8006754 <_dtoa_r+0x5a4>
 80066aa:	2000      	movs	r0, #0
 80066ac:	4928      	ldr	r1, [pc, #160]	@ (8006750 <_dtoa_r+0x5a0>)
 80066ae:	f7fa f83d 	bl	800072c <__aeabi_ddiv>
 80066b2:	4633      	mov	r3, r6
 80066b4:	462a      	mov	r2, r5
 80066b6:	f7f9 fd57 	bl	8000168 <__aeabi_dsub>
 80066ba:	4656      	mov	r6, sl
 80066bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c4:	f7fa f9b8 	bl	8000a38 <__aeabi_d2iz>
 80066c8:	4605      	mov	r5, r0
 80066ca:	f7f9 fe9b 	bl	8000404 <__aeabi_i2d>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d6:	f7f9 fd47 	bl	8000168 <__aeabi_dsub>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	3530      	adds	r5, #48	@ 0x30
 80066e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066e8:	f806 5b01 	strb.w	r5, [r6], #1
 80066ec:	f7fa f966 	bl	80009bc <__aeabi_dcmplt>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d172      	bne.n	80067da <_dtoa_r+0x62a>
 80066f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066f8:	2000      	movs	r0, #0
 80066fa:	4911      	ldr	r1, [pc, #68]	@ (8006740 <_dtoa_r+0x590>)
 80066fc:	f7f9 fd34 	bl	8000168 <__aeabi_dsub>
 8006700:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006704:	f7fa f95a 	bl	80009bc <__aeabi_dcmplt>
 8006708:	2800      	cmp	r0, #0
 800670a:	f040 80b4 	bne.w	8006876 <_dtoa_r+0x6c6>
 800670e:	42a6      	cmp	r6, r4
 8006710:	f43f af70 	beq.w	80065f4 <_dtoa_r+0x444>
 8006714:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006718:	2200      	movs	r2, #0
 800671a:	4b0a      	ldr	r3, [pc, #40]	@ (8006744 <_dtoa_r+0x594>)
 800671c:	f7f9 fedc 	bl	80004d8 <__aeabi_dmul>
 8006720:	2200      	movs	r2, #0
 8006722:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800672a:	4b06      	ldr	r3, [pc, #24]	@ (8006744 <_dtoa_r+0x594>)
 800672c:	f7f9 fed4 	bl	80004d8 <__aeabi_dmul>
 8006730:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006734:	e7c4      	b.n	80066c0 <_dtoa_r+0x510>
 8006736:	bf00      	nop
 8006738:	080099f0 	.word	0x080099f0
 800673c:	080099c8 	.word	0x080099c8
 8006740:	3ff00000 	.word	0x3ff00000
 8006744:	40240000 	.word	0x40240000
 8006748:	401c0000 	.word	0x401c0000
 800674c:	40140000 	.word	0x40140000
 8006750:	3fe00000 	.word	0x3fe00000
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	f7f9 febe 	bl	80004d8 <__aeabi_dmul>
 800675c:	4656      	mov	r6, sl
 800675e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006762:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006768:	f7fa f966 	bl	8000a38 <__aeabi_d2iz>
 800676c:	4605      	mov	r5, r0
 800676e:	f7f9 fe49 	bl	8000404 <__aeabi_i2d>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800677a:	f7f9 fcf5 	bl	8000168 <__aeabi_dsub>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	3530      	adds	r5, #48	@ 0x30
 8006784:	f806 5b01 	strb.w	r5, [r6], #1
 8006788:	42a6      	cmp	r6, r4
 800678a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	d124      	bne.n	80067de <_dtoa_r+0x62e>
 8006794:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006798:	4bae      	ldr	r3, [pc, #696]	@ (8006a54 <_dtoa_r+0x8a4>)
 800679a:	f7f9 fce7 	bl	800016c <__adddf3>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067a6:	f7fa f927 	bl	80009f8 <__aeabi_dcmpgt>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d163      	bne.n	8006876 <_dtoa_r+0x6c6>
 80067ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067b2:	2000      	movs	r0, #0
 80067b4:	49a7      	ldr	r1, [pc, #668]	@ (8006a54 <_dtoa_r+0x8a4>)
 80067b6:	f7f9 fcd7 	bl	8000168 <__aeabi_dsub>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067c2:	f7fa f8fb 	bl	80009bc <__aeabi_dcmplt>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f43f af14 	beq.w	80065f4 <_dtoa_r+0x444>
 80067cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80067ce:	1e73      	subs	r3, r6, #1
 80067d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80067d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067d6:	2b30      	cmp	r3, #48	@ 0x30
 80067d8:	d0f8      	beq.n	80067cc <_dtoa_r+0x61c>
 80067da:	4647      	mov	r7, r8
 80067dc:	e03b      	b.n	8006856 <_dtoa_r+0x6a6>
 80067de:	4b9e      	ldr	r3, [pc, #632]	@ (8006a58 <_dtoa_r+0x8a8>)
 80067e0:	f7f9 fe7a 	bl	80004d8 <__aeabi_dmul>
 80067e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067e8:	e7bc      	b.n	8006764 <_dtoa_r+0x5b4>
 80067ea:	4656      	mov	r6, sl
 80067ec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80067f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067f4:	4620      	mov	r0, r4
 80067f6:	4629      	mov	r1, r5
 80067f8:	f7f9 ff98 	bl	800072c <__aeabi_ddiv>
 80067fc:	f7fa f91c 	bl	8000a38 <__aeabi_d2iz>
 8006800:	4680      	mov	r8, r0
 8006802:	f7f9 fdff 	bl	8000404 <__aeabi_i2d>
 8006806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800680a:	f7f9 fe65 	bl	80004d8 <__aeabi_dmul>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4620      	mov	r0, r4
 8006814:	4629      	mov	r1, r5
 8006816:	f7f9 fca7 	bl	8000168 <__aeabi_dsub>
 800681a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800681e:	9d08      	ldr	r5, [sp, #32]
 8006820:	f806 4b01 	strb.w	r4, [r6], #1
 8006824:	eba6 040a 	sub.w	r4, r6, sl
 8006828:	42a5      	cmp	r5, r4
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	d133      	bne.n	8006898 <_dtoa_r+0x6e8>
 8006830:	f7f9 fc9c 	bl	800016c <__adddf3>
 8006834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006838:	4604      	mov	r4, r0
 800683a:	460d      	mov	r5, r1
 800683c:	f7fa f8dc 	bl	80009f8 <__aeabi_dcmpgt>
 8006840:	b9c0      	cbnz	r0, 8006874 <_dtoa_r+0x6c4>
 8006842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006846:	4620      	mov	r0, r4
 8006848:	4629      	mov	r1, r5
 800684a:	f7fa f8ad 	bl	80009a8 <__aeabi_dcmpeq>
 800684e:	b110      	cbz	r0, 8006856 <_dtoa_r+0x6a6>
 8006850:	f018 0f01 	tst.w	r8, #1
 8006854:	d10e      	bne.n	8006874 <_dtoa_r+0x6c4>
 8006856:	4648      	mov	r0, r9
 8006858:	9903      	ldr	r1, [sp, #12]
 800685a:	f000 fbbb 	bl	8006fd4 <_Bfree>
 800685e:	2300      	movs	r3, #0
 8006860:	7033      	strb	r3, [r6, #0]
 8006862:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006864:	3701      	adds	r7, #1
 8006866:	601f      	str	r7, [r3, #0]
 8006868:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 824b 	beq.w	8006d06 <_dtoa_r+0xb56>
 8006870:	601e      	str	r6, [r3, #0]
 8006872:	e248      	b.n	8006d06 <_dtoa_r+0xb56>
 8006874:	46b8      	mov	r8, r7
 8006876:	4633      	mov	r3, r6
 8006878:	461e      	mov	r6, r3
 800687a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800687e:	2a39      	cmp	r2, #57	@ 0x39
 8006880:	d106      	bne.n	8006890 <_dtoa_r+0x6e0>
 8006882:	459a      	cmp	sl, r3
 8006884:	d1f8      	bne.n	8006878 <_dtoa_r+0x6c8>
 8006886:	2230      	movs	r2, #48	@ 0x30
 8006888:	f108 0801 	add.w	r8, r8, #1
 800688c:	f88a 2000 	strb.w	r2, [sl]
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	3201      	adds	r2, #1
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	e7a0      	b.n	80067da <_dtoa_r+0x62a>
 8006898:	2200      	movs	r2, #0
 800689a:	4b6f      	ldr	r3, [pc, #444]	@ (8006a58 <_dtoa_r+0x8a8>)
 800689c:	f7f9 fe1c 	bl	80004d8 <__aeabi_dmul>
 80068a0:	2200      	movs	r2, #0
 80068a2:	2300      	movs	r3, #0
 80068a4:	4604      	mov	r4, r0
 80068a6:	460d      	mov	r5, r1
 80068a8:	f7fa f87e 	bl	80009a8 <__aeabi_dcmpeq>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d09f      	beq.n	80067f0 <_dtoa_r+0x640>
 80068b0:	e7d1      	b.n	8006856 <_dtoa_r+0x6a6>
 80068b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	f000 80ea 	beq.w	8006a8e <_dtoa_r+0x8de>
 80068ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068bc:	2a01      	cmp	r2, #1
 80068be:	f300 80cd 	bgt.w	8006a5c <_dtoa_r+0x8ac>
 80068c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068c4:	2a00      	cmp	r2, #0
 80068c6:	f000 80c1 	beq.w	8006a4c <_dtoa_r+0x89c>
 80068ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068d0:	9e04      	ldr	r6, [sp, #16]
 80068d2:	9a04      	ldr	r2, [sp, #16]
 80068d4:	2101      	movs	r1, #1
 80068d6:	441a      	add	r2, r3
 80068d8:	9204      	str	r2, [sp, #16]
 80068da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068dc:	4648      	mov	r0, r9
 80068de:	441a      	add	r2, r3
 80068e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80068e2:	f000 fc75 	bl	80071d0 <__i2b>
 80068e6:	4605      	mov	r5, r0
 80068e8:	b166      	cbz	r6, 8006904 <_dtoa_r+0x754>
 80068ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	dd09      	ble.n	8006904 <_dtoa_r+0x754>
 80068f0:	42b3      	cmp	r3, r6
 80068f2:	bfa8      	it	ge
 80068f4:	4633      	movge	r3, r6
 80068f6:	9a04      	ldr	r2, [sp, #16]
 80068f8:	1af6      	subs	r6, r6, r3
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	9204      	str	r2, [sp, #16]
 80068fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	9309      	str	r3, [sp, #36]	@ 0x24
 8006904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006906:	b30b      	cbz	r3, 800694c <_dtoa_r+0x79c>
 8006908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80c6 	beq.w	8006a9c <_dtoa_r+0x8ec>
 8006910:	2c00      	cmp	r4, #0
 8006912:	f000 80c0 	beq.w	8006a96 <_dtoa_r+0x8e6>
 8006916:	4629      	mov	r1, r5
 8006918:	4622      	mov	r2, r4
 800691a:	4648      	mov	r0, r9
 800691c:	f000 fd10 	bl	8007340 <__pow5mult>
 8006920:	9a03      	ldr	r2, [sp, #12]
 8006922:	4601      	mov	r1, r0
 8006924:	4605      	mov	r5, r0
 8006926:	4648      	mov	r0, r9
 8006928:	f000 fc68 	bl	80071fc <__multiply>
 800692c:	9903      	ldr	r1, [sp, #12]
 800692e:	4680      	mov	r8, r0
 8006930:	4648      	mov	r0, r9
 8006932:	f000 fb4f 	bl	8006fd4 <_Bfree>
 8006936:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006938:	1b1b      	subs	r3, r3, r4
 800693a:	930a      	str	r3, [sp, #40]	@ 0x28
 800693c:	f000 80b1 	beq.w	8006aa2 <_dtoa_r+0x8f2>
 8006940:	4641      	mov	r1, r8
 8006942:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006944:	4648      	mov	r0, r9
 8006946:	f000 fcfb 	bl	8007340 <__pow5mult>
 800694a:	9003      	str	r0, [sp, #12]
 800694c:	2101      	movs	r1, #1
 800694e:	4648      	mov	r0, r9
 8006950:	f000 fc3e 	bl	80071d0 <__i2b>
 8006954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006956:	4604      	mov	r4, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 81d8 	beq.w	8006d0e <_dtoa_r+0xb5e>
 800695e:	461a      	mov	r2, r3
 8006960:	4601      	mov	r1, r0
 8006962:	4648      	mov	r0, r9
 8006964:	f000 fcec 	bl	8007340 <__pow5mult>
 8006968:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800696a:	4604      	mov	r4, r0
 800696c:	2b01      	cmp	r3, #1
 800696e:	f300 809f 	bgt.w	8006ab0 <_dtoa_r+0x900>
 8006972:	9b06      	ldr	r3, [sp, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 8097 	bne.w	8006aa8 <_dtoa_r+0x8f8>
 800697a:	9b07      	ldr	r3, [sp, #28]
 800697c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006980:	2b00      	cmp	r3, #0
 8006982:	f040 8093 	bne.w	8006aac <_dtoa_r+0x8fc>
 8006986:	9b07      	ldr	r3, [sp, #28]
 8006988:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800698c:	0d1b      	lsrs	r3, r3, #20
 800698e:	051b      	lsls	r3, r3, #20
 8006990:	b133      	cbz	r3, 80069a0 <_dtoa_r+0x7f0>
 8006992:	9b04      	ldr	r3, [sp, #16]
 8006994:	3301      	adds	r3, #1
 8006996:	9304      	str	r3, [sp, #16]
 8006998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699a:	3301      	adds	r3, #1
 800699c:	9309      	str	r3, [sp, #36]	@ 0x24
 800699e:	2301      	movs	r3, #1
 80069a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 81b8 	beq.w	8006d1a <_dtoa_r+0xb6a>
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069b0:	6918      	ldr	r0, [r3, #16]
 80069b2:	f000 fbc1 	bl	8007138 <__hi0bits>
 80069b6:	f1c0 0020 	rsb	r0, r0, #32
 80069ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069bc:	4418      	add	r0, r3
 80069be:	f010 001f 	ands.w	r0, r0, #31
 80069c2:	f000 8082 	beq.w	8006aca <_dtoa_r+0x91a>
 80069c6:	f1c0 0320 	rsb	r3, r0, #32
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	dd73      	ble.n	8006ab6 <_dtoa_r+0x906>
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	f1c0 001c 	rsb	r0, r0, #28
 80069d4:	4403      	add	r3, r0
 80069d6:	9304      	str	r3, [sp, #16]
 80069d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069da:	4406      	add	r6, r0
 80069dc:	4403      	add	r3, r0
 80069de:	9309      	str	r3, [sp, #36]	@ 0x24
 80069e0:	9b04      	ldr	r3, [sp, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dd05      	ble.n	80069f2 <_dtoa_r+0x842>
 80069e6:	461a      	mov	r2, r3
 80069e8:	4648      	mov	r0, r9
 80069ea:	9903      	ldr	r1, [sp, #12]
 80069ec:	f000 fd02 	bl	80073f4 <__lshift>
 80069f0:	9003      	str	r0, [sp, #12]
 80069f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd05      	ble.n	8006a04 <_dtoa_r+0x854>
 80069f8:	4621      	mov	r1, r4
 80069fa:	461a      	mov	r2, r3
 80069fc:	4648      	mov	r0, r9
 80069fe:	f000 fcf9 	bl	80073f4 <__lshift>
 8006a02:	4604      	mov	r4, r0
 8006a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d061      	beq.n	8006ace <_dtoa_r+0x91e>
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	9803      	ldr	r0, [sp, #12]
 8006a0e:	f000 fd5d 	bl	80074cc <__mcmp>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	da5b      	bge.n	8006ace <_dtoa_r+0x91e>
 8006a16:	2300      	movs	r3, #0
 8006a18:	220a      	movs	r2, #10
 8006a1a:	4648      	mov	r0, r9
 8006a1c:	9903      	ldr	r1, [sp, #12]
 8006a1e:	f000 fafb 	bl	8007018 <__multadd>
 8006a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a24:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006a28:	9003      	str	r0, [sp, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8177 	beq.w	8006d1e <_dtoa_r+0xb6e>
 8006a30:	4629      	mov	r1, r5
 8006a32:	2300      	movs	r3, #0
 8006a34:	220a      	movs	r2, #10
 8006a36:	4648      	mov	r0, r9
 8006a38:	f000 faee 	bl	8007018 <__multadd>
 8006a3c:	f1bb 0f00 	cmp.w	fp, #0
 8006a40:	4605      	mov	r5, r0
 8006a42:	dc6f      	bgt.n	8006b24 <_dtoa_r+0x974>
 8006a44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	dc49      	bgt.n	8006ade <_dtoa_r+0x92e>
 8006a4a:	e06b      	b.n	8006b24 <_dtoa_r+0x974>
 8006a4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a52:	e73c      	b.n	80068ce <_dtoa_r+0x71e>
 8006a54:	3fe00000 	.word	0x3fe00000
 8006a58:	40240000 	.word	0x40240000
 8006a5c:	9b08      	ldr	r3, [sp, #32]
 8006a5e:	1e5c      	subs	r4, r3, #1
 8006a60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a62:	42a3      	cmp	r3, r4
 8006a64:	db09      	blt.n	8006a7a <_dtoa_r+0x8ca>
 8006a66:	1b1c      	subs	r4, r3, r4
 8006a68:	9b08      	ldr	r3, [sp, #32]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f6bf af30 	bge.w	80068d0 <_dtoa_r+0x720>
 8006a70:	9b04      	ldr	r3, [sp, #16]
 8006a72:	9a08      	ldr	r2, [sp, #32]
 8006a74:	1a9e      	subs	r6, r3, r2
 8006a76:	2300      	movs	r3, #0
 8006a78:	e72b      	b.n	80068d2 <_dtoa_r+0x722>
 8006a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a7e:	1ae3      	subs	r3, r4, r3
 8006a80:	441a      	add	r2, r3
 8006a82:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a84:	9e04      	ldr	r6, [sp, #16]
 8006a86:	2400      	movs	r4, #0
 8006a88:	9b08      	ldr	r3, [sp, #32]
 8006a8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a8c:	e721      	b.n	80068d2 <_dtoa_r+0x722>
 8006a8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a90:	9e04      	ldr	r6, [sp, #16]
 8006a92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a94:	e728      	b.n	80068e8 <_dtoa_r+0x738>
 8006a96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a9a:	e751      	b.n	8006940 <_dtoa_r+0x790>
 8006a9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a9e:	9903      	ldr	r1, [sp, #12]
 8006aa0:	e750      	b.n	8006944 <_dtoa_r+0x794>
 8006aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aa6:	e751      	b.n	800694c <_dtoa_r+0x79c>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e779      	b.n	80069a0 <_dtoa_r+0x7f0>
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	e777      	b.n	80069a0 <_dtoa_r+0x7f0>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ab4:	e779      	b.n	80069aa <_dtoa_r+0x7fa>
 8006ab6:	d093      	beq.n	80069e0 <_dtoa_r+0x830>
 8006ab8:	9a04      	ldr	r2, [sp, #16]
 8006aba:	331c      	adds	r3, #28
 8006abc:	441a      	add	r2, r3
 8006abe:	9204      	str	r2, [sp, #16]
 8006ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ac2:	441e      	add	r6, r3
 8006ac4:	441a      	add	r2, r3
 8006ac6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ac8:	e78a      	b.n	80069e0 <_dtoa_r+0x830>
 8006aca:	4603      	mov	r3, r0
 8006acc:	e7f4      	b.n	8006ab8 <_dtoa_r+0x908>
 8006ace:	9b08      	ldr	r3, [sp, #32]
 8006ad0:	46b8      	mov	r8, r7
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	dc20      	bgt.n	8006b18 <_dtoa_r+0x968>
 8006ad6:	469b      	mov	fp, r3
 8006ad8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	dd1e      	ble.n	8006b1c <_dtoa_r+0x96c>
 8006ade:	f1bb 0f00 	cmp.w	fp, #0
 8006ae2:	f47f adb1 	bne.w	8006648 <_dtoa_r+0x498>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	465b      	mov	r3, fp
 8006aea:	2205      	movs	r2, #5
 8006aec:	4648      	mov	r0, r9
 8006aee:	f000 fa93 	bl	8007018 <__multadd>
 8006af2:	4601      	mov	r1, r0
 8006af4:	4604      	mov	r4, r0
 8006af6:	9803      	ldr	r0, [sp, #12]
 8006af8:	f000 fce8 	bl	80074cc <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f77f ada3 	ble.w	8006648 <_dtoa_r+0x498>
 8006b02:	4656      	mov	r6, sl
 8006b04:	2331      	movs	r3, #49	@ 0x31
 8006b06:	f108 0801 	add.w	r8, r8, #1
 8006b0a:	f806 3b01 	strb.w	r3, [r6], #1
 8006b0e:	e59f      	b.n	8006650 <_dtoa_r+0x4a0>
 8006b10:	46b8      	mov	r8, r7
 8006b12:	9c08      	ldr	r4, [sp, #32]
 8006b14:	4625      	mov	r5, r4
 8006b16:	e7f4      	b.n	8006b02 <_dtoa_r+0x952>
 8006b18:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006b1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8101 	beq.w	8006d26 <_dtoa_r+0xb76>
 8006b24:	2e00      	cmp	r6, #0
 8006b26:	dd05      	ble.n	8006b34 <_dtoa_r+0x984>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	4648      	mov	r0, r9
 8006b2e:	f000 fc61 	bl	80073f4 <__lshift>
 8006b32:	4605      	mov	r5, r0
 8006b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d05c      	beq.n	8006bf4 <_dtoa_r+0xa44>
 8006b3a:	4648      	mov	r0, r9
 8006b3c:	6869      	ldr	r1, [r5, #4]
 8006b3e:	f000 fa09 	bl	8006f54 <_Balloc>
 8006b42:	4606      	mov	r6, r0
 8006b44:	b928      	cbnz	r0, 8006b52 <_dtoa_r+0x9a2>
 8006b46:	4602      	mov	r2, r0
 8006b48:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b4c:	4b80      	ldr	r3, [pc, #512]	@ (8006d50 <_dtoa_r+0xba0>)
 8006b4e:	f7ff bb43 	b.w	80061d8 <_dtoa_r+0x28>
 8006b52:	692a      	ldr	r2, [r5, #16]
 8006b54:	f105 010c 	add.w	r1, r5, #12
 8006b58:	3202      	adds	r2, #2
 8006b5a:	0092      	lsls	r2, r2, #2
 8006b5c:	300c      	adds	r0, #12
 8006b5e:	f001 ff51 	bl	8008a04 <memcpy>
 8006b62:	2201      	movs	r2, #1
 8006b64:	4631      	mov	r1, r6
 8006b66:	4648      	mov	r0, r9
 8006b68:	f000 fc44 	bl	80073f4 <__lshift>
 8006b6c:	462f      	mov	r7, r5
 8006b6e:	4605      	mov	r5, r0
 8006b70:	f10a 0301 	add.w	r3, sl, #1
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	eb0a 030b 	add.w	r3, sl, fp
 8006b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b7c:	9b06      	ldr	r3, [sp, #24]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b84:	9b04      	ldr	r3, [sp, #16]
 8006b86:	4621      	mov	r1, r4
 8006b88:	9803      	ldr	r0, [sp, #12]
 8006b8a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006b8e:	f7ff fa85 	bl	800609c <quorem>
 8006b92:	4603      	mov	r3, r0
 8006b94:	4639      	mov	r1, r7
 8006b96:	3330      	adds	r3, #48	@ 0x30
 8006b98:	9006      	str	r0, [sp, #24]
 8006b9a:	9803      	ldr	r0, [sp, #12]
 8006b9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b9e:	f000 fc95 	bl	80074cc <__mcmp>
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	9008      	str	r0, [sp, #32]
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4648      	mov	r0, r9
 8006baa:	f000 fcab 	bl	8007504 <__mdiff>
 8006bae:	68c2      	ldr	r2, [r0, #12]
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bb4:	bb02      	cbnz	r2, 8006bf8 <_dtoa_r+0xa48>
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	9803      	ldr	r0, [sp, #12]
 8006bba:	f000 fc87 	bl	80074cc <__mcmp>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4648      	mov	r0, r9
 8006bc6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006bca:	f000 fa03 	bl	8006fd4 <_Bfree>
 8006bce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006bd2:	9e04      	ldr	r6, [sp, #16]
 8006bd4:	ea42 0103 	orr.w	r1, r2, r3
 8006bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bda:	4319      	orrs	r1, r3
 8006bdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bde:	d10d      	bne.n	8006bfc <_dtoa_r+0xa4c>
 8006be0:	2b39      	cmp	r3, #57	@ 0x39
 8006be2:	d027      	beq.n	8006c34 <_dtoa_r+0xa84>
 8006be4:	9a08      	ldr	r2, [sp, #32]
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	dd01      	ble.n	8006bee <_dtoa_r+0xa3e>
 8006bea:	9b06      	ldr	r3, [sp, #24]
 8006bec:	3331      	adds	r3, #49	@ 0x31
 8006bee:	f88b 3000 	strb.w	r3, [fp]
 8006bf2:	e52e      	b.n	8006652 <_dtoa_r+0x4a2>
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	e7b9      	b.n	8006b6c <_dtoa_r+0x9bc>
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	e7e2      	b.n	8006bc2 <_dtoa_r+0xa12>
 8006bfc:	9908      	ldr	r1, [sp, #32]
 8006bfe:	2900      	cmp	r1, #0
 8006c00:	db04      	blt.n	8006c0c <_dtoa_r+0xa5c>
 8006c02:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006c04:	4301      	orrs	r1, r0
 8006c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c08:	4301      	orrs	r1, r0
 8006c0a:	d120      	bne.n	8006c4e <_dtoa_r+0xa9e>
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	ddee      	ble.n	8006bee <_dtoa_r+0xa3e>
 8006c10:	2201      	movs	r2, #1
 8006c12:	9903      	ldr	r1, [sp, #12]
 8006c14:	4648      	mov	r0, r9
 8006c16:	9304      	str	r3, [sp, #16]
 8006c18:	f000 fbec 	bl	80073f4 <__lshift>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	9003      	str	r0, [sp, #12]
 8006c20:	f000 fc54 	bl	80074cc <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	dc02      	bgt.n	8006c30 <_dtoa_r+0xa80>
 8006c2a:	d1e0      	bne.n	8006bee <_dtoa_r+0xa3e>
 8006c2c:	07da      	lsls	r2, r3, #31
 8006c2e:	d5de      	bpl.n	8006bee <_dtoa_r+0xa3e>
 8006c30:	2b39      	cmp	r3, #57	@ 0x39
 8006c32:	d1da      	bne.n	8006bea <_dtoa_r+0xa3a>
 8006c34:	2339      	movs	r3, #57	@ 0x39
 8006c36:	f88b 3000 	strb.w	r3, [fp]
 8006c3a:	4633      	mov	r3, r6
 8006c3c:	461e      	mov	r6, r3
 8006c3e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	2a39      	cmp	r2, #57	@ 0x39
 8006c46:	d04e      	beq.n	8006ce6 <_dtoa_r+0xb36>
 8006c48:	3201      	adds	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	e501      	b.n	8006652 <_dtoa_r+0x4a2>
 8006c4e:	2a00      	cmp	r2, #0
 8006c50:	dd03      	ble.n	8006c5a <_dtoa_r+0xaaa>
 8006c52:	2b39      	cmp	r3, #57	@ 0x39
 8006c54:	d0ee      	beq.n	8006c34 <_dtoa_r+0xa84>
 8006c56:	3301      	adds	r3, #1
 8006c58:	e7c9      	b.n	8006bee <_dtoa_r+0xa3e>
 8006c5a:	9a04      	ldr	r2, [sp, #16]
 8006c5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c62:	428a      	cmp	r2, r1
 8006c64:	d028      	beq.n	8006cb8 <_dtoa_r+0xb08>
 8006c66:	2300      	movs	r3, #0
 8006c68:	220a      	movs	r2, #10
 8006c6a:	9903      	ldr	r1, [sp, #12]
 8006c6c:	4648      	mov	r0, r9
 8006c6e:	f000 f9d3 	bl	8007018 <__multadd>
 8006c72:	42af      	cmp	r7, r5
 8006c74:	9003      	str	r0, [sp, #12]
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	f04f 020a 	mov.w	r2, #10
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4648      	mov	r0, r9
 8006c82:	d107      	bne.n	8006c94 <_dtoa_r+0xae4>
 8006c84:	f000 f9c8 	bl	8007018 <__multadd>
 8006c88:	4607      	mov	r7, r0
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	9b04      	ldr	r3, [sp, #16]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	9304      	str	r3, [sp, #16]
 8006c92:	e777      	b.n	8006b84 <_dtoa_r+0x9d4>
 8006c94:	f000 f9c0 	bl	8007018 <__multadd>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	220a      	movs	r2, #10
 8006ca0:	4648      	mov	r0, r9
 8006ca2:	f000 f9b9 	bl	8007018 <__multadd>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	e7f0      	b.n	8006c8c <_dtoa_r+0xadc>
 8006caa:	f1bb 0f00 	cmp.w	fp, #0
 8006cae:	bfcc      	ite	gt
 8006cb0:	465e      	movgt	r6, fp
 8006cb2:	2601      	movle	r6, #1
 8006cb4:	2700      	movs	r7, #0
 8006cb6:	4456      	add	r6, sl
 8006cb8:	2201      	movs	r2, #1
 8006cba:	9903      	ldr	r1, [sp, #12]
 8006cbc:	4648      	mov	r0, r9
 8006cbe:	9304      	str	r3, [sp, #16]
 8006cc0:	f000 fb98 	bl	80073f4 <__lshift>
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	9003      	str	r0, [sp, #12]
 8006cc8:	f000 fc00 	bl	80074cc <__mcmp>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	dcb4      	bgt.n	8006c3a <_dtoa_r+0xa8a>
 8006cd0:	d102      	bne.n	8006cd8 <_dtoa_r+0xb28>
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	07db      	lsls	r3, r3, #31
 8006cd6:	d4b0      	bmi.n	8006c3a <_dtoa_r+0xa8a>
 8006cd8:	4633      	mov	r3, r6
 8006cda:	461e      	mov	r6, r3
 8006cdc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ce0:	2a30      	cmp	r2, #48	@ 0x30
 8006ce2:	d0fa      	beq.n	8006cda <_dtoa_r+0xb2a>
 8006ce4:	e4b5      	b.n	8006652 <_dtoa_r+0x4a2>
 8006ce6:	459a      	cmp	sl, r3
 8006ce8:	d1a8      	bne.n	8006c3c <_dtoa_r+0xa8c>
 8006cea:	2331      	movs	r3, #49	@ 0x31
 8006cec:	f108 0801 	add.w	r8, r8, #1
 8006cf0:	f88a 3000 	strb.w	r3, [sl]
 8006cf4:	e4ad      	b.n	8006652 <_dtoa_r+0x4a2>
 8006cf6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cf8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006d54 <_dtoa_r+0xba4>
 8006cfc:	b11b      	cbz	r3, 8006d06 <_dtoa_r+0xb56>
 8006cfe:	f10a 0308 	add.w	r3, sl, #8
 8006d02:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4650      	mov	r0, sl
 8006d08:	b017      	add	sp, #92	@ 0x5c
 8006d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	f77f ae2e 	ble.w	8006972 <_dtoa_r+0x7c2>
 8006d16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	e64d      	b.n	80069ba <_dtoa_r+0x80a>
 8006d1e:	f1bb 0f00 	cmp.w	fp, #0
 8006d22:	f77f aed9 	ble.w	8006ad8 <_dtoa_r+0x928>
 8006d26:	4656      	mov	r6, sl
 8006d28:	4621      	mov	r1, r4
 8006d2a:	9803      	ldr	r0, [sp, #12]
 8006d2c:	f7ff f9b6 	bl	800609c <quorem>
 8006d30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006d34:	f806 3b01 	strb.w	r3, [r6], #1
 8006d38:	eba6 020a 	sub.w	r2, r6, sl
 8006d3c:	4593      	cmp	fp, r2
 8006d3e:	ddb4      	ble.n	8006caa <_dtoa_r+0xafa>
 8006d40:	2300      	movs	r3, #0
 8006d42:	220a      	movs	r2, #10
 8006d44:	4648      	mov	r0, r9
 8006d46:	9903      	ldr	r1, [sp, #12]
 8006d48:	f000 f966 	bl	8007018 <__multadd>
 8006d4c:	9003      	str	r0, [sp, #12]
 8006d4e:	e7eb      	b.n	8006d28 <_dtoa_r+0xb78>
 8006d50:	0800989b 	.word	0x0800989b
 8006d54:	0800981f 	.word	0x0800981f

08006d58 <_free_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d040      	beq.n	8006de2 <_free_r+0x8a>
 8006d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d64:	1f0c      	subs	r4, r1, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bfb8      	it	lt
 8006d6a:	18e4      	addlt	r4, r4, r3
 8006d6c:	f000 f8e6 	bl	8006f3c <__malloc_lock>
 8006d70:	4a1c      	ldr	r2, [pc, #112]	@ (8006de4 <_free_r+0x8c>)
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	b933      	cbnz	r3, 8006d84 <_free_r+0x2c>
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	6014      	str	r4, [r2, #0]
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d80:	f000 b8e2 	b.w	8006f48 <__malloc_unlock>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d908      	bls.n	8006d9a <_free_r+0x42>
 8006d88:	6820      	ldr	r0, [r4, #0]
 8006d8a:	1821      	adds	r1, r4, r0
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf01      	itttt	eq
 8006d90:	6819      	ldreq	r1, [r3, #0]
 8006d92:	685b      	ldreq	r3, [r3, #4]
 8006d94:	1809      	addeq	r1, r1, r0
 8006d96:	6021      	streq	r1, [r4, #0]
 8006d98:	e7ed      	b.n	8006d76 <_free_r+0x1e>
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b10b      	cbz	r3, 8006da4 <_free_r+0x4c>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d9fa      	bls.n	8006d9a <_free_r+0x42>
 8006da4:	6811      	ldr	r1, [r2, #0]
 8006da6:	1850      	adds	r0, r2, r1
 8006da8:	42a0      	cmp	r0, r4
 8006daa:	d10b      	bne.n	8006dc4 <_free_r+0x6c>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	4401      	add	r1, r0
 8006db0:	1850      	adds	r0, r2, r1
 8006db2:	4283      	cmp	r3, r0
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	d1e0      	bne.n	8006d7a <_free_r+0x22>
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4408      	add	r0, r1
 8006dbe:	6010      	str	r0, [r2, #0]
 8006dc0:	6053      	str	r3, [r2, #4]
 8006dc2:	e7da      	b.n	8006d7a <_free_r+0x22>
 8006dc4:	d902      	bls.n	8006dcc <_free_r+0x74>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	e7d6      	b.n	8006d7a <_free_r+0x22>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	1821      	adds	r1, r4, r0
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf01      	itttt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	1809      	addeq	r1, r1, r0
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	6063      	str	r3, [r4, #4]
 8006dde:	6054      	str	r4, [r2, #4]
 8006de0:	e7cb      	b.n	8006d7a <_free_r+0x22>
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20000474 	.word	0x20000474

08006de8 <malloc>:
 8006de8:	4b02      	ldr	r3, [pc, #8]	@ (8006df4 <malloc+0xc>)
 8006dea:	4601      	mov	r1, r0
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	f000 b825 	b.w	8006e3c <_malloc_r>
 8006df2:	bf00      	nop
 8006df4:	2000001c 	.word	0x2000001c

08006df8 <sbrk_aligned>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8006e38 <sbrk_aligned+0x40>)
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	6831      	ldr	r1, [r6, #0]
 8006e00:	4605      	mov	r5, r0
 8006e02:	b911      	cbnz	r1, 8006e0a <sbrk_aligned+0x12>
 8006e04:	f001 fdee 	bl	80089e4 <_sbrk_r>
 8006e08:	6030      	str	r0, [r6, #0]
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f001 fde9 	bl	80089e4 <_sbrk_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	d103      	bne.n	8006e1e <sbrk_aligned+0x26>
 8006e16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
 8006e1e:	1cc4      	adds	r4, r0, #3
 8006e20:	f024 0403 	bic.w	r4, r4, #3
 8006e24:	42a0      	cmp	r0, r4
 8006e26:	d0f8      	beq.n	8006e1a <sbrk_aligned+0x22>
 8006e28:	1a21      	subs	r1, r4, r0
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f001 fdda 	bl	80089e4 <_sbrk_r>
 8006e30:	3001      	adds	r0, #1
 8006e32:	d1f2      	bne.n	8006e1a <sbrk_aligned+0x22>
 8006e34:	e7ef      	b.n	8006e16 <sbrk_aligned+0x1e>
 8006e36:	bf00      	nop
 8006e38:	20000470 	.word	0x20000470

08006e3c <_malloc_r>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	1ccd      	adds	r5, r1, #3
 8006e42:	f025 0503 	bic.w	r5, r5, #3
 8006e46:	3508      	adds	r5, #8
 8006e48:	2d0c      	cmp	r5, #12
 8006e4a:	bf38      	it	cc
 8006e4c:	250c      	movcc	r5, #12
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	4606      	mov	r6, r0
 8006e52:	db01      	blt.n	8006e58 <_malloc_r+0x1c>
 8006e54:	42a9      	cmp	r1, r5
 8006e56:	d904      	bls.n	8006e62 <_malloc_r+0x26>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f38 <_malloc_r+0xfc>
 8006e66:	f000 f869 	bl	8006f3c <__malloc_lock>
 8006e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e6e:	461c      	mov	r4, r3
 8006e70:	bb44      	cbnz	r4, 8006ec4 <_malloc_r+0x88>
 8006e72:	4629      	mov	r1, r5
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff ffbf 	bl	8006df8 <sbrk_aligned>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	d158      	bne.n	8006f32 <_malloc_r+0xf6>
 8006e80:	f8d8 4000 	ldr.w	r4, [r8]
 8006e84:	4627      	mov	r7, r4
 8006e86:	2f00      	cmp	r7, #0
 8006e88:	d143      	bne.n	8006f12 <_malloc_r+0xd6>
 8006e8a:	2c00      	cmp	r4, #0
 8006e8c:	d04b      	beq.n	8006f26 <_malloc_r+0xea>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	4639      	mov	r1, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	eb04 0903 	add.w	r9, r4, r3
 8006e98:	f001 fda4 	bl	80089e4 <_sbrk_r>
 8006e9c:	4581      	cmp	r9, r0
 8006e9e:	d142      	bne.n	8006f26 <_malloc_r+0xea>
 8006ea0:	6821      	ldr	r1, [r4, #0]
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	1a6d      	subs	r5, r5, r1
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7ff ffa6 	bl	8006df8 <sbrk_aligned>
 8006eac:	3001      	adds	r0, #1
 8006eae:	d03a      	beq.n	8006f26 <_malloc_r+0xea>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	442b      	add	r3, r5
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	bb62      	cbnz	r2, 8006f18 <_malloc_r+0xdc>
 8006ebe:	f8c8 7000 	str.w	r7, [r8]
 8006ec2:	e00f      	b.n	8006ee4 <_malloc_r+0xa8>
 8006ec4:	6822      	ldr	r2, [r4, #0]
 8006ec6:	1b52      	subs	r2, r2, r5
 8006ec8:	d420      	bmi.n	8006f0c <_malloc_r+0xd0>
 8006eca:	2a0b      	cmp	r2, #11
 8006ecc:	d917      	bls.n	8006efe <_malloc_r+0xc2>
 8006ece:	1961      	adds	r1, r4, r5
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	6025      	str	r5, [r4, #0]
 8006ed4:	bf18      	it	ne
 8006ed6:	6059      	strne	r1, [r3, #4]
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	bf08      	it	eq
 8006edc:	f8c8 1000 	streq.w	r1, [r8]
 8006ee0:	5162      	str	r2, [r4, r5]
 8006ee2:	604b      	str	r3, [r1, #4]
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 f82f 	bl	8006f48 <__malloc_unlock>
 8006eea:	f104 000b 	add.w	r0, r4, #11
 8006eee:	1d23      	adds	r3, r4, #4
 8006ef0:	f020 0007 	bic.w	r0, r0, #7
 8006ef4:	1ac2      	subs	r2, r0, r3
 8006ef6:	bf1c      	itt	ne
 8006ef8:	1a1b      	subne	r3, r3, r0
 8006efa:	50a3      	strne	r3, [r4, r2]
 8006efc:	e7af      	b.n	8006e5e <_malloc_r+0x22>
 8006efe:	6862      	ldr	r2, [r4, #4]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	bf0c      	ite	eq
 8006f04:	f8c8 2000 	streq.w	r2, [r8]
 8006f08:	605a      	strne	r2, [r3, #4]
 8006f0a:	e7eb      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	6864      	ldr	r4, [r4, #4]
 8006f10:	e7ae      	b.n	8006e70 <_malloc_r+0x34>
 8006f12:	463c      	mov	r4, r7
 8006f14:	687f      	ldr	r7, [r7, #4]
 8006f16:	e7b6      	b.n	8006e86 <_malloc_r+0x4a>
 8006f18:	461a      	mov	r2, r3
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	d1fb      	bne.n	8006f18 <_malloc_r+0xdc>
 8006f20:	2300      	movs	r3, #0
 8006f22:	6053      	str	r3, [r2, #4]
 8006f24:	e7de      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f26:	230c      	movs	r3, #12
 8006f28:	4630      	mov	r0, r6
 8006f2a:	6033      	str	r3, [r6, #0]
 8006f2c:	f000 f80c 	bl	8006f48 <__malloc_unlock>
 8006f30:	e794      	b.n	8006e5c <_malloc_r+0x20>
 8006f32:	6005      	str	r5, [r0, #0]
 8006f34:	e7d6      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f36:	bf00      	nop
 8006f38:	20000474 	.word	0x20000474

08006f3c <__malloc_lock>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	@ (8006f44 <__malloc_lock+0x8>)
 8006f3e:	f7ff b898 	b.w	8006072 <__retarget_lock_acquire_recursive>
 8006f42:	bf00      	nop
 8006f44:	2000046c 	.word	0x2000046c

08006f48 <__malloc_unlock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	@ (8006f50 <__malloc_unlock+0x8>)
 8006f4a:	f7ff b893 	b.w	8006074 <__retarget_lock_release_recursive>
 8006f4e:	bf00      	nop
 8006f50:	2000046c 	.word	0x2000046c

08006f54 <_Balloc>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	69c6      	ldr	r6, [r0, #28]
 8006f58:	4604      	mov	r4, r0
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	b976      	cbnz	r6, 8006f7c <_Balloc+0x28>
 8006f5e:	2010      	movs	r0, #16
 8006f60:	f7ff ff42 	bl	8006de8 <malloc>
 8006f64:	4602      	mov	r2, r0
 8006f66:	61e0      	str	r0, [r4, #28]
 8006f68:	b920      	cbnz	r0, 8006f74 <_Balloc+0x20>
 8006f6a:	216b      	movs	r1, #107	@ 0x6b
 8006f6c:	4b17      	ldr	r3, [pc, #92]	@ (8006fcc <_Balloc+0x78>)
 8006f6e:	4818      	ldr	r0, [pc, #96]	@ (8006fd0 <_Balloc+0x7c>)
 8006f70:	f001 fd5c 	bl	8008a2c <__assert_func>
 8006f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f78:	6006      	str	r6, [r0, #0]
 8006f7a:	60c6      	str	r6, [r0, #12]
 8006f7c:	69e6      	ldr	r6, [r4, #28]
 8006f7e:	68f3      	ldr	r3, [r6, #12]
 8006f80:	b183      	cbz	r3, 8006fa4 <_Balloc+0x50>
 8006f82:	69e3      	ldr	r3, [r4, #28]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f8a:	b9b8      	cbnz	r0, 8006fbc <_Balloc+0x68>
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f92:	1d72      	adds	r2, r6, #5
 8006f94:	4620      	mov	r0, r4
 8006f96:	0092      	lsls	r2, r2, #2
 8006f98:	f001 fd66 	bl	8008a68 <_calloc_r>
 8006f9c:	b160      	cbz	r0, 8006fb8 <_Balloc+0x64>
 8006f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fa2:	e00e      	b.n	8006fc2 <_Balloc+0x6e>
 8006fa4:	2221      	movs	r2, #33	@ 0x21
 8006fa6:	2104      	movs	r1, #4
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f001 fd5d 	bl	8008a68 <_calloc_r>
 8006fae:	69e3      	ldr	r3, [r4, #28]
 8006fb0:	60f0      	str	r0, [r6, #12]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e4      	bne.n	8006f82 <_Balloc+0x2e>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	6802      	ldr	r2, [r0, #0]
 8006fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fc8:	e7f7      	b.n	8006fba <_Balloc+0x66>
 8006fca:	bf00      	nop
 8006fcc:	0800982c 	.word	0x0800982c
 8006fd0:	080098ac 	.word	0x080098ac

08006fd4 <_Bfree>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	69c6      	ldr	r6, [r0, #28]
 8006fd8:	4605      	mov	r5, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	b976      	cbnz	r6, 8006ffc <_Bfree+0x28>
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f7ff ff02 	bl	8006de8 <malloc>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	61e8      	str	r0, [r5, #28]
 8006fe8:	b920      	cbnz	r0, 8006ff4 <_Bfree+0x20>
 8006fea:	218f      	movs	r1, #143	@ 0x8f
 8006fec:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <_Bfree+0x3c>)
 8006fee:	4809      	ldr	r0, [pc, #36]	@ (8007014 <_Bfree+0x40>)
 8006ff0:	f001 fd1c 	bl	8008a2c <__assert_func>
 8006ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff8:	6006      	str	r6, [r0, #0]
 8006ffa:	60c6      	str	r6, [r0, #12]
 8006ffc:	b13c      	cbz	r4, 800700e <_Bfree+0x3a>
 8006ffe:	69eb      	ldr	r3, [r5, #28]
 8007000:	6862      	ldr	r2, [r4, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007008:	6021      	str	r1, [r4, #0]
 800700a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	0800982c 	.word	0x0800982c
 8007014:	080098ac 	.word	0x080098ac

08007018 <__multadd>:
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	4607      	mov	r7, r0
 800701e:	460c      	mov	r4, r1
 8007020:	461e      	mov	r6, r3
 8007022:	2000      	movs	r0, #0
 8007024:	690d      	ldr	r5, [r1, #16]
 8007026:	f101 0c14 	add.w	ip, r1, #20
 800702a:	f8dc 3000 	ldr.w	r3, [ip]
 800702e:	3001      	adds	r0, #1
 8007030:	b299      	uxth	r1, r3
 8007032:	fb02 6101 	mla	r1, r2, r1, r6
 8007036:	0c1e      	lsrs	r6, r3, #16
 8007038:	0c0b      	lsrs	r3, r1, #16
 800703a:	fb02 3306 	mla	r3, r2, r6, r3
 800703e:	b289      	uxth	r1, r1
 8007040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007044:	4285      	cmp	r5, r0
 8007046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800704a:	f84c 1b04 	str.w	r1, [ip], #4
 800704e:	dcec      	bgt.n	800702a <__multadd+0x12>
 8007050:	b30e      	cbz	r6, 8007096 <__multadd+0x7e>
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	42ab      	cmp	r3, r5
 8007056:	dc19      	bgt.n	800708c <__multadd+0x74>
 8007058:	6861      	ldr	r1, [r4, #4]
 800705a:	4638      	mov	r0, r7
 800705c:	3101      	adds	r1, #1
 800705e:	f7ff ff79 	bl	8006f54 <_Balloc>
 8007062:	4680      	mov	r8, r0
 8007064:	b928      	cbnz	r0, 8007072 <__multadd+0x5a>
 8007066:	4602      	mov	r2, r0
 8007068:	21ba      	movs	r1, #186	@ 0xba
 800706a:	4b0c      	ldr	r3, [pc, #48]	@ (800709c <__multadd+0x84>)
 800706c:	480c      	ldr	r0, [pc, #48]	@ (80070a0 <__multadd+0x88>)
 800706e:	f001 fcdd 	bl	8008a2c <__assert_func>
 8007072:	6922      	ldr	r2, [r4, #16]
 8007074:	f104 010c 	add.w	r1, r4, #12
 8007078:	3202      	adds	r2, #2
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	300c      	adds	r0, #12
 800707e:	f001 fcc1 	bl	8008a04 <memcpy>
 8007082:	4621      	mov	r1, r4
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff ffa5 	bl	8006fd4 <_Bfree>
 800708a:	4644      	mov	r4, r8
 800708c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007090:	3501      	adds	r5, #1
 8007092:	615e      	str	r6, [r3, #20]
 8007094:	6125      	str	r5, [r4, #16]
 8007096:	4620      	mov	r0, r4
 8007098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709c:	0800989b 	.word	0x0800989b
 80070a0:	080098ac 	.word	0x080098ac

080070a4 <__s2b>:
 80070a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a8:	4615      	mov	r5, r2
 80070aa:	2209      	movs	r2, #9
 80070ac:	461f      	mov	r7, r3
 80070ae:	3308      	adds	r3, #8
 80070b0:	460c      	mov	r4, r1
 80070b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80070b6:	4606      	mov	r6, r0
 80070b8:	2201      	movs	r2, #1
 80070ba:	2100      	movs	r1, #0
 80070bc:	429a      	cmp	r2, r3
 80070be:	db09      	blt.n	80070d4 <__s2b+0x30>
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff ff47 	bl	8006f54 <_Balloc>
 80070c6:	b940      	cbnz	r0, 80070da <__s2b+0x36>
 80070c8:	4602      	mov	r2, r0
 80070ca:	21d3      	movs	r1, #211	@ 0xd3
 80070cc:	4b18      	ldr	r3, [pc, #96]	@ (8007130 <__s2b+0x8c>)
 80070ce:	4819      	ldr	r0, [pc, #100]	@ (8007134 <__s2b+0x90>)
 80070d0:	f001 fcac 	bl	8008a2c <__assert_func>
 80070d4:	0052      	lsls	r2, r2, #1
 80070d6:	3101      	adds	r1, #1
 80070d8:	e7f0      	b.n	80070bc <__s2b+0x18>
 80070da:	9b08      	ldr	r3, [sp, #32]
 80070dc:	2d09      	cmp	r5, #9
 80070de:	6143      	str	r3, [r0, #20]
 80070e0:	f04f 0301 	mov.w	r3, #1
 80070e4:	6103      	str	r3, [r0, #16]
 80070e6:	dd16      	ble.n	8007116 <__s2b+0x72>
 80070e8:	f104 0909 	add.w	r9, r4, #9
 80070ec:	46c8      	mov	r8, r9
 80070ee:	442c      	add	r4, r5
 80070f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80070f4:	4601      	mov	r1, r0
 80070f6:	220a      	movs	r2, #10
 80070f8:	4630      	mov	r0, r6
 80070fa:	3b30      	subs	r3, #48	@ 0x30
 80070fc:	f7ff ff8c 	bl	8007018 <__multadd>
 8007100:	45a0      	cmp	r8, r4
 8007102:	d1f5      	bne.n	80070f0 <__s2b+0x4c>
 8007104:	f1a5 0408 	sub.w	r4, r5, #8
 8007108:	444c      	add	r4, r9
 800710a:	1b2d      	subs	r5, r5, r4
 800710c:	1963      	adds	r3, r4, r5
 800710e:	42bb      	cmp	r3, r7
 8007110:	db04      	blt.n	800711c <__s2b+0x78>
 8007112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007116:	2509      	movs	r5, #9
 8007118:	340a      	adds	r4, #10
 800711a:	e7f6      	b.n	800710a <__s2b+0x66>
 800711c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007120:	4601      	mov	r1, r0
 8007122:	220a      	movs	r2, #10
 8007124:	4630      	mov	r0, r6
 8007126:	3b30      	subs	r3, #48	@ 0x30
 8007128:	f7ff ff76 	bl	8007018 <__multadd>
 800712c:	e7ee      	b.n	800710c <__s2b+0x68>
 800712e:	bf00      	nop
 8007130:	0800989b 	.word	0x0800989b
 8007134:	080098ac 	.word	0x080098ac

08007138 <__hi0bits>:
 8007138:	4603      	mov	r3, r0
 800713a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800713e:	bf3a      	itte	cc
 8007140:	0403      	lslcc	r3, r0, #16
 8007142:	2010      	movcc	r0, #16
 8007144:	2000      	movcs	r0, #0
 8007146:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800714a:	bf3c      	itt	cc
 800714c:	021b      	lslcc	r3, r3, #8
 800714e:	3008      	addcc	r0, #8
 8007150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007154:	bf3c      	itt	cc
 8007156:	011b      	lslcc	r3, r3, #4
 8007158:	3004      	addcc	r0, #4
 800715a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800715e:	bf3c      	itt	cc
 8007160:	009b      	lslcc	r3, r3, #2
 8007162:	3002      	addcc	r0, #2
 8007164:	2b00      	cmp	r3, #0
 8007166:	db05      	blt.n	8007174 <__hi0bits+0x3c>
 8007168:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800716c:	f100 0001 	add.w	r0, r0, #1
 8007170:	bf08      	it	eq
 8007172:	2020      	moveq	r0, #32
 8007174:	4770      	bx	lr

08007176 <__lo0bits>:
 8007176:	6803      	ldr	r3, [r0, #0]
 8007178:	4602      	mov	r2, r0
 800717a:	f013 0007 	ands.w	r0, r3, #7
 800717e:	d00b      	beq.n	8007198 <__lo0bits+0x22>
 8007180:	07d9      	lsls	r1, r3, #31
 8007182:	d421      	bmi.n	80071c8 <__lo0bits+0x52>
 8007184:	0798      	lsls	r0, r3, #30
 8007186:	bf49      	itett	mi
 8007188:	085b      	lsrmi	r3, r3, #1
 800718a:	089b      	lsrpl	r3, r3, #2
 800718c:	2001      	movmi	r0, #1
 800718e:	6013      	strmi	r3, [r2, #0]
 8007190:	bf5c      	itt	pl
 8007192:	2002      	movpl	r0, #2
 8007194:	6013      	strpl	r3, [r2, #0]
 8007196:	4770      	bx	lr
 8007198:	b299      	uxth	r1, r3
 800719a:	b909      	cbnz	r1, 80071a0 <__lo0bits+0x2a>
 800719c:	2010      	movs	r0, #16
 800719e:	0c1b      	lsrs	r3, r3, #16
 80071a0:	b2d9      	uxtb	r1, r3
 80071a2:	b909      	cbnz	r1, 80071a8 <__lo0bits+0x32>
 80071a4:	3008      	adds	r0, #8
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	0719      	lsls	r1, r3, #28
 80071aa:	bf04      	itt	eq
 80071ac:	091b      	lsreq	r3, r3, #4
 80071ae:	3004      	addeq	r0, #4
 80071b0:	0799      	lsls	r1, r3, #30
 80071b2:	bf04      	itt	eq
 80071b4:	089b      	lsreq	r3, r3, #2
 80071b6:	3002      	addeq	r0, #2
 80071b8:	07d9      	lsls	r1, r3, #31
 80071ba:	d403      	bmi.n	80071c4 <__lo0bits+0x4e>
 80071bc:	085b      	lsrs	r3, r3, #1
 80071be:	f100 0001 	add.w	r0, r0, #1
 80071c2:	d003      	beq.n	80071cc <__lo0bits+0x56>
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	4770      	bx	lr
 80071c8:	2000      	movs	r0, #0
 80071ca:	4770      	bx	lr
 80071cc:	2020      	movs	r0, #32
 80071ce:	4770      	bx	lr

080071d0 <__i2b>:
 80071d0:	b510      	push	{r4, lr}
 80071d2:	460c      	mov	r4, r1
 80071d4:	2101      	movs	r1, #1
 80071d6:	f7ff febd 	bl	8006f54 <_Balloc>
 80071da:	4602      	mov	r2, r0
 80071dc:	b928      	cbnz	r0, 80071ea <__i2b+0x1a>
 80071de:	f240 1145 	movw	r1, #325	@ 0x145
 80071e2:	4b04      	ldr	r3, [pc, #16]	@ (80071f4 <__i2b+0x24>)
 80071e4:	4804      	ldr	r0, [pc, #16]	@ (80071f8 <__i2b+0x28>)
 80071e6:	f001 fc21 	bl	8008a2c <__assert_func>
 80071ea:	2301      	movs	r3, #1
 80071ec:	6144      	str	r4, [r0, #20]
 80071ee:	6103      	str	r3, [r0, #16]
 80071f0:	bd10      	pop	{r4, pc}
 80071f2:	bf00      	nop
 80071f4:	0800989b 	.word	0x0800989b
 80071f8:	080098ac 	.word	0x080098ac

080071fc <__multiply>:
 80071fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007200:	4617      	mov	r7, r2
 8007202:	690a      	ldr	r2, [r1, #16]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4689      	mov	r9, r1
 8007208:	429a      	cmp	r2, r3
 800720a:	bfa2      	ittt	ge
 800720c:	463b      	movge	r3, r7
 800720e:	460f      	movge	r7, r1
 8007210:	4699      	movge	r9, r3
 8007212:	693d      	ldr	r5, [r7, #16]
 8007214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	eb05 060a 	add.w	r6, r5, sl
 8007220:	42b3      	cmp	r3, r6
 8007222:	b085      	sub	sp, #20
 8007224:	bfb8      	it	lt
 8007226:	3101      	addlt	r1, #1
 8007228:	f7ff fe94 	bl	8006f54 <_Balloc>
 800722c:	b930      	cbnz	r0, 800723c <__multiply+0x40>
 800722e:	4602      	mov	r2, r0
 8007230:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007234:	4b40      	ldr	r3, [pc, #256]	@ (8007338 <__multiply+0x13c>)
 8007236:	4841      	ldr	r0, [pc, #260]	@ (800733c <__multiply+0x140>)
 8007238:	f001 fbf8 	bl	8008a2c <__assert_func>
 800723c:	f100 0414 	add.w	r4, r0, #20
 8007240:	4623      	mov	r3, r4
 8007242:	2200      	movs	r2, #0
 8007244:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007248:	4573      	cmp	r3, lr
 800724a:	d320      	bcc.n	800728e <__multiply+0x92>
 800724c:	f107 0814 	add.w	r8, r7, #20
 8007250:	f109 0114 	add.w	r1, r9, #20
 8007254:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007258:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800725c:	9302      	str	r3, [sp, #8]
 800725e:	1beb      	subs	r3, r5, r7
 8007260:	3b15      	subs	r3, #21
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	3304      	adds	r3, #4
 8007268:	3715      	adds	r7, #21
 800726a:	42bd      	cmp	r5, r7
 800726c:	bf38      	it	cc
 800726e:	2304      	movcc	r3, #4
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	9b02      	ldr	r3, [sp, #8]
 8007274:	9103      	str	r1, [sp, #12]
 8007276:	428b      	cmp	r3, r1
 8007278:	d80c      	bhi.n	8007294 <__multiply+0x98>
 800727a:	2e00      	cmp	r6, #0
 800727c:	dd03      	ble.n	8007286 <__multiply+0x8a>
 800727e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007282:	2b00      	cmp	r3, #0
 8007284:	d055      	beq.n	8007332 <__multiply+0x136>
 8007286:	6106      	str	r6, [r0, #16]
 8007288:	b005      	add	sp, #20
 800728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728e:	f843 2b04 	str.w	r2, [r3], #4
 8007292:	e7d9      	b.n	8007248 <__multiply+0x4c>
 8007294:	f8b1 a000 	ldrh.w	sl, [r1]
 8007298:	f1ba 0f00 	cmp.w	sl, #0
 800729c:	d01f      	beq.n	80072de <__multiply+0xe2>
 800729e:	46c4      	mov	ip, r8
 80072a0:	46a1      	mov	r9, r4
 80072a2:	2700      	movs	r7, #0
 80072a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072a8:	f8d9 3000 	ldr.w	r3, [r9]
 80072ac:	fa1f fb82 	uxth.w	fp, r2
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	fb0a 330b 	mla	r3, sl, fp, r3
 80072b6:	443b      	add	r3, r7
 80072b8:	f8d9 7000 	ldr.w	r7, [r9]
 80072bc:	0c12      	lsrs	r2, r2, #16
 80072be:	0c3f      	lsrs	r7, r7, #16
 80072c0:	fb0a 7202 	mla	r2, sl, r2, r7
 80072c4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ce:	4565      	cmp	r5, ip
 80072d0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80072d4:	f849 3b04 	str.w	r3, [r9], #4
 80072d8:	d8e4      	bhi.n	80072a4 <__multiply+0xa8>
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	50e7      	str	r7, [r4, r3]
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	3104      	adds	r1, #4
 80072e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80072e6:	f1b9 0f00 	cmp.w	r9, #0
 80072ea:	d020      	beq.n	800732e <__multiply+0x132>
 80072ec:	4647      	mov	r7, r8
 80072ee:	46a4      	mov	ip, r4
 80072f0:	f04f 0a00 	mov.w	sl, #0
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	f8b7 b000 	ldrh.w	fp, [r7]
 80072fa:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	fb09 220b 	mla	r2, r9, fp, r2
 8007304:	4452      	add	r2, sl
 8007306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800730a:	f84c 3b04 	str.w	r3, [ip], #4
 800730e:	f857 3b04 	ldr.w	r3, [r7], #4
 8007312:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007316:	f8bc 3000 	ldrh.w	r3, [ip]
 800731a:	42bd      	cmp	r5, r7
 800731c:	fb09 330a 	mla	r3, r9, sl, r3
 8007320:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007324:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007328:	d8e5      	bhi.n	80072f6 <__multiply+0xfa>
 800732a:	9a01      	ldr	r2, [sp, #4]
 800732c:	50a3      	str	r3, [r4, r2]
 800732e:	3404      	adds	r4, #4
 8007330:	e79f      	b.n	8007272 <__multiply+0x76>
 8007332:	3e01      	subs	r6, #1
 8007334:	e7a1      	b.n	800727a <__multiply+0x7e>
 8007336:	bf00      	nop
 8007338:	0800989b 	.word	0x0800989b
 800733c:	080098ac 	.word	0x080098ac

08007340 <__pow5mult>:
 8007340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007344:	4615      	mov	r5, r2
 8007346:	f012 0203 	ands.w	r2, r2, #3
 800734a:	4607      	mov	r7, r0
 800734c:	460e      	mov	r6, r1
 800734e:	d007      	beq.n	8007360 <__pow5mult+0x20>
 8007350:	4c25      	ldr	r4, [pc, #148]	@ (80073e8 <__pow5mult+0xa8>)
 8007352:	3a01      	subs	r2, #1
 8007354:	2300      	movs	r3, #0
 8007356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800735a:	f7ff fe5d 	bl	8007018 <__multadd>
 800735e:	4606      	mov	r6, r0
 8007360:	10ad      	asrs	r5, r5, #2
 8007362:	d03d      	beq.n	80073e0 <__pow5mult+0xa0>
 8007364:	69fc      	ldr	r4, [r7, #28]
 8007366:	b97c      	cbnz	r4, 8007388 <__pow5mult+0x48>
 8007368:	2010      	movs	r0, #16
 800736a:	f7ff fd3d 	bl	8006de8 <malloc>
 800736e:	4602      	mov	r2, r0
 8007370:	61f8      	str	r0, [r7, #28]
 8007372:	b928      	cbnz	r0, 8007380 <__pow5mult+0x40>
 8007374:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007378:	4b1c      	ldr	r3, [pc, #112]	@ (80073ec <__pow5mult+0xac>)
 800737a:	481d      	ldr	r0, [pc, #116]	@ (80073f0 <__pow5mult+0xb0>)
 800737c:	f001 fb56 	bl	8008a2c <__assert_func>
 8007380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007384:	6004      	str	r4, [r0, #0]
 8007386:	60c4      	str	r4, [r0, #12]
 8007388:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800738c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007390:	b94c      	cbnz	r4, 80073a6 <__pow5mult+0x66>
 8007392:	f240 2171 	movw	r1, #625	@ 0x271
 8007396:	4638      	mov	r0, r7
 8007398:	f7ff ff1a 	bl	80071d0 <__i2b>
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	07eb      	lsls	r3, r5, #31
 80073ac:	d50a      	bpl.n	80073c4 <__pow5mult+0x84>
 80073ae:	4631      	mov	r1, r6
 80073b0:	4622      	mov	r2, r4
 80073b2:	4638      	mov	r0, r7
 80073b4:	f7ff ff22 	bl	80071fc <__multiply>
 80073b8:	4680      	mov	r8, r0
 80073ba:	4631      	mov	r1, r6
 80073bc:	4638      	mov	r0, r7
 80073be:	f7ff fe09 	bl	8006fd4 <_Bfree>
 80073c2:	4646      	mov	r6, r8
 80073c4:	106d      	asrs	r5, r5, #1
 80073c6:	d00b      	beq.n	80073e0 <__pow5mult+0xa0>
 80073c8:	6820      	ldr	r0, [r4, #0]
 80073ca:	b938      	cbnz	r0, 80073dc <__pow5mult+0x9c>
 80073cc:	4622      	mov	r2, r4
 80073ce:	4621      	mov	r1, r4
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7ff ff13 	bl	80071fc <__multiply>
 80073d6:	6020      	str	r0, [r4, #0]
 80073d8:	f8c0 9000 	str.w	r9, [r0]
 80073dc:	4604      	mov	r4, r0
 80073de:	e7e4      	b.n	80073aa <__pow5mult+0x6a>
 80073e0:	4630      	mov	r0, r6
 80073e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e6:	bf00      	nop
 80073e8:	080099bc 	.word	0x080099bc
 80073ec:	0800982c 	.word	0x0800982c
 80073f0:	080098ac 	.word	0x080098ac

080073f4 <__lshift>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	4607      	mov	r7, r0
 80073fc:	4691      	mov	r9, r2
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	6849      	ldr	r1, [r1, #4]
 8007402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007406:	68a3      	ldr	r3, [r4, #8]
 8007408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800740c:	f108 0601 	add.w	r6, r8, #1
 8007410:	42b3      	cmp	r3, r6
 8007412:	db0b      	blt.n	800742c <__lshift+0x38>
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff fd9d 	bl	8006f54 <_Balloc>
 800741a:	4605      	mov	r5, r0
 800741c:	b948      	cbnz	r0, 8007432 <__lshift+0x3e>
 800741e:	4602      	mov	r2, r0
 8007420:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007424:	4b27      	ldr	r3, [pc, #156]	@ (80074c4 <__lshift+0xd0>)
 8007426:	4828      	ldr	r0, [pc, #160]	@ (80074c8 <__lshift+0xd4>)
 8007428:	f001 fb00 	bl	8008a2c <__assert_func>
 800742c:	3101      	adds	r1, #1
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	e7ee      	b.n	8007410 <__lshift+0x1c>
 8007432:	2300      	movs	r3, #0
 8007434:	f100 0114 	add.w	r1, r0, #20
 8007438:	f100 0210 	add.w	r2, r0, #16
 800743c:	4618      	mov	r0, r3
 800743e:	4553      	cmp	r3, sl
 8007440:	db33      	blt.n	80074aa <__lshift+0xb6>
 8007442:	6920      	ldr	r0, [r4, #16]
 8007444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007448:	f104 0314 	add.w	r3, r4, #20
 800744c:	f019 091f 	ands.w	r9, r9, #31
 8007450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007458:	d02b      	beq.n	80074b2 <__lshift+0xbe>
 800745a:	468a      	mov	sl, r1
 800745c:	2200      	movs	r2, #0
 800745e:	f1c9 0e20 	rsb	lr, r9, #32
 8007462:	6818      	ldr	r0, [r3, #0]
 8007464:	fa00 f009 	lsl.w	r0, r0, r9
 8007468:	4310      	orrs	r0, r2
 800746a:	f84a 0b04 	str.w	r0, [sl], #4
 800746e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007472:	459c      	cmp	ip, r3
 8007474:	fa22 f20e 	lsr.w	r2, r2, lr
 8007478:	d8f3      	bhi.n	8007462 <__lshift+0x6e>
 800747a:	ebac 0304 	sub.w	r3, ip, r4
 800747e:	3b15      	subs	r3, #21
 8007480:	f023 0303 	bic.w	r3, r3, #3
 8007484:	3304      	adds	r3, #4
 8007486:	f104 0015 	add.w	r0, r4, #21
 800748a:	4560      	cmp	r0, ip
 800748c:	bf88      	it	hi
 800748e:	2304      	movhi	r3, #4
 8007490:	50ca      	str	r2, [r1, r3]
 8007492:	b10a      	cbz	r2, 8007498 <__lshift+0xa4>
 8007494:	f108 0602 	add.w	r6, r8, #2
 8007498:	3e01      	subs	r6, #1
 800749a:	4638      	mov	r0, r7
 800749c:	4621      	mov	r1, r4
 800749e:	612e      	str	r6, [r5, #16]
 80074a0:	f7ff fd98 	bl	8006fd4 <_Bfree>
 80074a4:	4628      	mov	r0, r5
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80074ae:	3301      	adds	r3, #1
 80074b0:	e7c5      	b.n	800743e <__lshift+0x4a>
 80074b2:	3904      	subs	r1, #4
 80074b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b8:	459c      	cmp	ip, r3
 80074ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80074be:	d8f9      	bhi.n	80074b4 <__lshift+0xc0>
 80074c0:	e7ea      	b.n	8007498 <__lshift+0xa4>
 80074c2:	bf00      	nop
 80074c4:	0800989b 	.word	0x0800989b
 80074c8:	080098ac 	.word	0x080098ac

080074cc <__mcmp>:
 80074cc:	4603      	mov	r3, r0
 80074ce:	690a      	ldr	r2, [r1, #16]
 80074d0:	6900      	ldr	r0, [r0, #16]
 80074d2:	b530      	push	{r4, r5, lr}
 80074d4:	1a80      	subs	r0, r0, r2
 80074d6:	d10e      	bne.n	80074f6 <__mcmp+0x2a>
 80074d8:	3314      	adds	r3, #20
 80074da:	3114      	adds	r1, #20
 80074dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80074e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074ec:	4295      	cmp	r5, r2
 80074ee:	d003      	beq.n	80074f8 <__mcmp+0x2c>
 80074f0:	d205      	bcs.n	80074fe <__mcmp+0x32>
 80074f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074f6:	bd30      	pop	{r4, r5, pc}
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d3f3      	bcc.n	80074e4 <__mcmp+0x18>
 80074fc:	e7fb      	b.n	80074f6 <__mcmp+0x2a>
 80074fe:	2001      	movs	r0, #1
 8007500:	e7f9      	b.n	80074f6 <__mcmp+0x2a>
	...

08007504 <__mdiff>:
 8007504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	4689      	mov	r9, r1
 800750a:	4606      	mov	r6, r0
 800750c:	4611      	mov	r1, r2
 800750e:	4648      	mov	r0, r9
 8007510:	4614      	mov	r4, r2
 8007512:	f7ff ffdb 	bl	80074cc <__mcmp>
 8007516:	1e05      	subs	r5, r0, #0
 8007518:	d112      	bne.n	8007540 <__mdiff+0x3c>
 800751a:	4629      	mov	r1, r5
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff fd19 	bl	8006f54 <_Balloc>
 8007522:	4602      	mov	r2, r0
 8007524:	b928      	cbnz	r0, 8007532 <__mdiff+0x2e>
 8007526:	f240 2137 	movw	r1, #567	@ 0x237
 800752a:	4b3e      	ldr	r3, [pc, #248]	@ (8007624 <__mdiff+0x120>)
 800752c:	483e      	ldr	r0, [pc, #248]	@ (8007628 <__mdiff+0x124>)
 800752e:	f001 fa7d 	bl	8008a2c <__assert_func>
 8007532:	2301      	movs	r3, #1
 8007534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007538:	4610      	mov	r0, r2
 800753a:	b003      	add	sp, #12
 800753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007540:	bfbc      	itt	lt
 8007542:	464b      	movlt	r3, r9
 8007544:	46a1      	movlt	r9, r4
 8007546:	4630      	mov	r0, r6
 8007548:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800754c:	bfba      	itte	lt
 800754e:	461c      	movlt	r4, r3
 8007550:	2501      	movlt	r5, #1
 8007552:	2500      	movge	r5, #0
 8007554:	f7ff fcfe 	bl	8006f54 <_Balloc>
 8007558:	4602      	mov	r2, r0
 800755a:	b918      	cbnz	r0, 8007564 <__mdiff+0x60>
 800755c:	f240 2145 	movw	r1, #581	@ 0x245
 8007560:	4b30      	ldr	r3, [pc, #192]	@ (8007624 <__mdiff+0x120>)
 8007562:	e7e3      	b.n	800752c <__mdiff+0x28>
 8007564:	f100 0b14 	add.w	fp, r0, #20
 8007568:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800756c:	f109 0310 	add.w	r3, r9, #16
 8007570:	60c5      	str	r5, [r0, #12]
 8007572:	f04f 0c00 	mov.w	ip, #0
 8007576:	f109 0514 	add.w	r5, r9, #20
 800757a:	46d9      	mov	r9, fp
 800757c:	6926      	ldr	r6, [r4, #16]
 800757e:	f104 0e14 	add.w	lr, r4, #20
 8007582:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007586:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007592:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007596:	b281      	uxth	r1, r0
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	fa1f f38a 	uxth.w	r3, sl
 800759e:	1a5b      	subs	r3, r3, r1
 80075a0:	0c00      	lsrs	r0, r0, #16
 80075a2:	4463      	add	r3, ip
 80075a4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80075a8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80075b2:	4576      	cmp	r6, lr
 80075b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075b8:	f849 3b04 	str.w	r3, [r9], #4
 80075bc:	d8e6      	bhi.n	800758c <__mdiff+0x88>
 80075be:	1b33      	subs	r3, r6, r4
 80075c0:	3b15      	subs	r3, #21
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	3415      	adds	r4, #21
 80075c8:	3304      	adds	r3, #4
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	bf38      	it	cc
 80075ce:	2304      	movcc	r3, #4
 80075d0:	441d      	add	r5, r3
 80075d2:	445b      	add	r3, fp
 80075d4:	461e      	mov	r6, r3
 80075d6:	462c      	mov	r4, r5
 80075d8:	4544      	cmp	r4, r8
 80075da:	d30e      	bcc.n	80075fa <__mdiff+0xf6>
 80075dc:	f108 0103 	add.w	r1, r8, #3
 80075e0:	1b49      	subs	r1, r1, r5
 80075e2:	f021 0103 	bic.w	r1, r1, #3
 80075e6:	3d03      	subs	r5, #3
 80075e8:	45a8      	cmp	r8, r5
 80075ea:	bf38      	it	cc
 80075ec:	2100      	movcc	r1, #0
 80075ee:	440b      	add	r3, r1
 80075f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075f4:	b199      	cbz	r1, 800761e <__mdiff+0x11a>
 80075f6:	6117      	str	r7, [r2, #16]
 80075f8:	e79e      	b.n	8007538 <__mdiff+0x34>
 80075fa:	46e6      	mov	lr, ip
 80075fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007600:	fa1f fc81 	uxth.w	ip, r1
 8007604:	44f4      	add	ip, lr
 8007606:	0c08      	lsrs	r0, r1, #16
 8007608:	4471      	add	r1, lr
 800760a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800760e:	b289      	uxth	r1, r1
 8007610:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007614:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007618:	f846 1b04 	str.w	r1, [r6], #4
 800761c:	e7dc      	b.n	80075d8 <__mdiff+0xd4>
 800761e:	3f01      	subs	r7, #1
 8007620:	e7e6      	b.n	80075f0 <__mdiff+0xec>
 8007622:	bf00      	nop
 8007624:	0800989b 	.word	0x0800989b
 8007628:	080098ac 	.word	0x080098ac

0800762c <__ulp>:
 800762c:	4b0e      	ldr	r3, [pc, #56]	@ (8007668 <__ulp+0x3c>)
 800762e:	400b      	ands	r3, r1
 8007630:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007634:	2b00      	cmp	r3, #0
 8007636:	dc08      	bgt.n	800764a <__ulp+0x1e>
 8007638:	425b      	negs	r3, r3
 800763a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800763e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007642:	da04      	bge.n	800764e <__ulp+0x22>
 8007644:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007648:	4113      	asrs	r3, r2
 800764a:	2200      	movs	r2, #0
 800764c:	e008      	b.n	8007660 <__ulp+0x34>
 800764e:	f1a2 0314 	sub.w	r3, r2, #20
 8007652:	2b1e      	cmp	r3, #30
 8007654:	bfd6      	itet	le
 8007656:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800765a:	2201      	movgt	r2, #1
 800765c:	40da      	lsrle	r2, r3
 800765e:	2300      	movs	r3, #0
 8007660:	4619      	mov	r1, r3
 8007662:	4610      	mov	r0, r2
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	7ff00000 	.word	0x7ff00000

0800766c <__b2d>:
 800766c:	6902      	ldr	r2, [r0, #16]
 800766e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007670:	f100 0614 	add.w	r6, r0, #20
 8007674:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007678:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800767c:	4f1e      	ldr	r7, [pc, #120]	@ (80076f8 <__b2d+0x8c>)
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff fd5a 	bl	8007138 <__hi0bits>
 8007684:	4603      	mov	r3, r0
 8007686:	f1c0 0020 	rsb	r0, r0, #32
 800768a:	2b0a      	cmp	r3, #10
 800768c:	f1a2 0504 	sub.w	r5, r2, #4
 8007690:	6008      	str	r0, [r1, #0]
 8007692:	dc12      	bgt.n	80076ba <__b2d+0x4e>
 8007694:	42ae      	cmp	r6, r5
 8007696:	bf2c      	ite	cs
 8007698:	2200      	movcs	r2, #0
 800769a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800769e:	f1c3 0c0b 	rsb	ip, r3, #11
 80076a2:	3315      	adds	r3, #21
 80076a4:	fa24 fe0c 	lsr.w	lr, r4, ip
 80076a8:	fa04 f303 	lsl.w	r3, r4, r3
 80076ac:	fa22 f20c 	lsr.w	r2, r2, ip
 80076b0:	ea4e 0107 	orr.w	r1, lr, r7
 80076b4:	431a      	orrs	r2, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ba:	42ae      	cmp	r6, r5
 80076bc:	bf36      	itet	cc
 80076be:	f1a2 0508 	subcc.w	r5, r2, #8
 80076c2:	2200      	movcs	r2, #0
 80076c4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80076c8:	3b0b      	subs	r3, #11
 80076ca:	d012      	beq.n	80076f2 <__b2d+0x86>
 80076cc:	f1c3 0720 	rsb	r7, r3, #32
 80076d0:	fa22 f107 	lsr.w	r1, r2, r7
 80076d4:	409c      	lsls	r4, r3
 80076d6:	430c      	orrs	r4, r1
 80076d8:	42b5      	cmp	r5, r6
 80076da:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80076de:	bf94      	ite	ls
 80076e0:	2400      	movls	r4, #0
 80076e2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80076e6:	409a      	lsls	r2, r3
 80076e8:	40fc      	lsrs	r4, r7
 80076ea:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80076ee:	4322      	orrs	r2, r4
 80076f0:	e7e1      	b.n	80076b6 <__b2d+0x4a>
 80076f2:	ea44 0107 	orr.w	r1, r4, r7
 80076f6:	e7de      	b.n	80076b6 <__b2d+0x4a>
 80076f8:	3ff00000 	.word	0x3ff00000

080076fc <__d2b>:
 80076fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007700:	2101      	movs	r1, #1
 8007702:	4690      	mov	r8, r2
 8007704:	4699      	mov	r9, r3
 8007706:	9e08      	ldr	r6, [sp, #32]
 8007708:	f7ff fc24 	bl	8006f54 <_Balloc>
 800770c:	4604      	mov	r4, r0
 800770e:	b930      	cbnz	r0, 800771e <__d2b+0x22>
 8007710:	4602      	mov	r2, r0
 8007712:	f240 310f 	movw	r1, #783	@ 0x30f
 8007716:	4b23      	ldr	r3, [pc, #140]	@ (80077a4 <__d2b+0xa8>)
 8007718:	4823      	ldr	r0, [pc, #140]	@ (80077a8 <__d2b+0xac>)
 800771a:	f001 f987 	bl	8008a2c <__assert_func>
 800771e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007722:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007726:	b10d      	cbz	r5, 800772c <__d2b+0x30>
 8007728:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	f1b8 0300 	subs.w	r3, r8, #0
 8007732:	d024      	beq.n	800777e <__d2b+0x82>
 8007734:	4668      	mov	r0, sp
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	f7ff fd1d 	bl	8007176 <__lo0bits>
 800773c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007740:	b1d8      	cbz	r0, 800777a <__d2b+0x7e>
 8007742:	f1c0 0320 	rsb	r3, r0, #32
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	430b      	orrs	r3, r1
 800774c:	40c2      	lsrs	r2, r0
 800774e:	6163      	str	r3, [r4, #20]
 8007750:	9201      	str	r2, [sp, #4]
 8007752:	9b01      	ldr	r3, [sp, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf0c      	ite	eq
 8007758:	2201      	moveq	r2, #1
 800775a:	2202      	movne	r2, #2
 800775c:	61a3      	str	r3, [r4, #24]
 800775e:	6122      	str	r2, [r4, #16]
 8007760:	b1ad      	cbz	r5, 800778e <__d2b+0x92>
 8007762:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007766:	4405      	add	r5, r0
 8007768:	6035      	str	r5, [r6, #0]
 800776a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800776e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007770:	6018      	str	r0, [r3, #0]
 8007772:	4620      	mov	r0, r4
 8007774:	b002      	add	sp, #8
 8007776:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800777a:	6161      	str	r1, [r4, #20]
 800777c:	e7e9      	b.n	8007752 <__d2b+0x56>
 800777e:	a801      	add	r0, sp, #4
 8007780:	f7ff fcf9 	bl	8007176 <__lo0bits>
 8007784:	9b01      	ldr	r3, [sp, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	6163      	str	r3, [r4, #20]
 800778a:	3020      	adds	r0, #32
 800778c:	e7e7      	b.n	800775e <__d2b+0x62>
 800778e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007792:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007796:	6030      	str	r0, [r6, #0]
 8007798:	6918      	ldr	r0, [r3, #16]
 800779a:	f7ff fccd 	bl	8007138 <__hi0bits>
 800779e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077a2:	e7e4      	b.n	800776e <__d2b+0x72>
 80077a4:	0800989b 	.word	0x0800989b
 80077a8:	080098ac 	.word	0x080098ac

080077ac <__ratio>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	b085      	sub	sp, #20
 80077b2:	e9cd 1000 	strd	r1, r0, [sp]
 80077b6:	a902      	add	r1, sp, #8
 80077b8:	f7ff ff58 	bl	800766c <__b2d>
 80077bc:	468b      	mov	fp, r1
 80077be:	4606      	mov	r6, r0
 80077c0:	460f      	mov	r7, r1
 80077c2:	9800      	ldr	r0, [sp, #0]
 80077c4:	a903      	add	r1, sp, #12
 80077c6:	f7ff ff51 	bl	800766c <__b2d>
 80077ca:	460d      	mov	r5, r1
 80077cc:	9b01      	ldr	r3, [sp, #4]
 80077ce:	4689      	mov	r9, r1
 80077d0:	6919      	ldr	r1, [r3, #16]
 80077d2:	9b00      	ldr	r3, [sp, #0]
 80077d4:	4604      	mov	r4, r0
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	4630      	mov	r0, r6
 80077da:	1ac9      	subs	r1, r1, r3
 80077dc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80077e0:	1a9b      	subs	r3, r3, r2
 80077e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfcd      	iteet	gt
 80077ea:	463a      	movgt	r2, r7
 80077ec:	462a      	movle	r2, r5
 80077ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80077f2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80077f6:	bfd8      	it	le
 80077f8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80077fc:	464b      	mov	r3, r9
 80077fe:	4622      	mov	r2, r4
 8007800:	4659      	mov	r1, fp
 8007802:	f7f8 ff93 	bl	800072c <__aeabi_ddiv>
 8007806:	b005      	add	sp, #20
 8007808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800780c <__copybits>:
 800780c:	3901      	subs	r1, #1
 800780e:	b570      	push	{r4, r5, r6, lr}
 8007810:	1149      	asrs	r1, r1, #5
 8007812:	6914      	ldr	r4, [r2, #16]
 8007814:	3101      	adds	r1, #1
 8007816:	f102 0314 	add.w	r3, r2, #20
 800781a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800781e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007822:	1f05      	subs	r5, r0, #4
 8007824:	42a3      	cmp	r3, r4
 8007826:	d30c      	bcc.n	8007842 <__copybits+0x36>
 8007828:	1aa3      	subs	r3, r4, r2
 800782a:	3b11      	subs	r3, #17
 800782c:	f023 0303 	bic.w	r3, r3, #3
 8007830:	3211      	adds	r2, #17
 8007832:	42a2      	cmp	r2, r4
 8007834:	bf88      	it	hi
 8007836:	2300      	movhi	r3, #0
 8007838:	4418      	add	r0, r3
 800783a:	2300      	movs	r3, #0
 800783c:	4288      	cmp	r0, r1
 800783e:	d305      	bcc.n	800784c <__copybits+0x40>
 8007840:	bd70      	pop	{r4, r5, r6, pc}
 8007842:	f853 6b04 	ldr.w	r6, [r3], #4
 8007846:	f845 6f04 	str.w	r6, [r5, #4]!
 800784a:	e7eb      	b.n	8007824 <__copybits+0x18>
 800784c:	f840 3b04 	str.w	r3, [r0], #4
 8007850:	e7f4      	b.n	800783c <__copybits+0x30>

08007852 <__any_on>:
 8007852:	f100 0214 	add.w	r2, r0, #20
 8007856:	6900      	ldr	r0, [r0, #16]
 8007858:	114b      	asrs	r3, r1, #5
 800785a:	4298      	cmp	r0, r3
 800785c:	b510      	push	{r4, lr}
 800785e:	db11      	blt.n	8007884 <__any_on+0x32>
 8007860:	dd0a      	ble.n	8007878 <__any_on+0x26>
 8007862:	f011 011f 	ands.w	r1, r1, #31
 8007866:	d007      	beq.n	8007878 <__any_on+0x26>
 8007868:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800786c:	fa24 f001 	lsr.w	r0, r4, r1
 8007870:	fa00 f101 	lsl.w	r1, r0, r1
 8007874:	428c      	cmp	r4, r1
 8007876:	d10b      	bne.n	8007890 <__any_on+0x3e>
 8007878:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800787c:	4293      	cmp	r3, r2
 800787e:	d803      	bhi.n	8007888 <__any_on+0x36>
 8007880:	2000      	movs	r0, #0
 8007882:	bd10      	pop	{r4, pc}
 8007884:	4603      	mov	r3, r0
 8007886:	e7f7      	b.n	8007878 <__any_on+0x26>
 8007888:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800788c:	2900      	cmp	r1, #0
 800788e:	d0f5      	beq.n	800787c <__any_on+0x2a>
 8007890:	2001      	movs	r0, #1
 8007892:	e7f6      	b.n	8007882 <__any_on+0x30>

08007894 <sulp>:
 8007894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007898:	460f      	mov	r7, r1
 800789a:	4690      	mov	r8, r2
 800789c:	f7ff fec6 	bl	800762c <__ulp>
 80078a0:	4604      	mov	r4, r0
 80078a2:	460d      	mov	r5, r1
 80078a4:	f1b8 0f00 	cmp.w	r8, #0
 80078a8:	d011      	beq.n	80078ce <sulp+0x3a>
 80078aa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80078ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	dd0b      	ble.n	80078ce <sulp+0x3a>
 80078b6:	2400      	movs	r4, #0
 80078b8:	051b      	lsls	r3, r3, #20
 80078ba:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80078be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80078c2:	4622      	mov	r2, r4
 80078c4:	462b      	mov	r3, r5
 80078c6:	f7f8 fe07 	bl	80004d8 <__aeabi_dmul>
 80078ca:	4604      	mov	r4, r0
 80078cc:	460d      	mov	r5, r1
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080078d8 <_strtod_l>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	b09f      	sub	sp, #124	@ 0x7c
 80078de:	9217      	str	r2, [sp, #92]	@ 0x5c
 80078e0:	2200      	movs	r2, #0
 80078e2:	460c      	mov	r4, r1
 80078e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80078e6:	f04f 0a00 	mov.w	sl, #0
 80078ea:	f04f 0b00 	mov.w	fp, #0
 80078ee:	460a      	mov	r2, r1
 80078f0:	9005      	str	r0, [sp, #20]
 80078f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80078f4:	7811      	ldrb	r1, [r2, #0]
 80078f6:	292b      	cmp	r1, #43	@ 0x2b
 80078f8:	d048      	beq.n	800798c <_strtod_l+0xb4>
 80078fa:	d836      	bhi.n	800796a <_strtod_l+0x92>
 80078fc:	290d      	cmp	r1, #13
 80078fe:	d830      	bhi.n	8007962 <_strtod_l+0x8a>
 8007900:	2908      	cmp	r1, #8
 8007902:	d830      	bhi.n	8007966 <_strtod_l+0x8e>
 8007904:	2900      	cmp	r1, #0
 8007906:	d039      	beq.n	800797c <_strtod_l+0xa4>
 8007908:	2200      	movs	r2, #0
 800790a:	920e      	str	r2, [sp, #56]	@ 0x38
 800790c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800790e:	782a      	ldrb	r2, [r5, #0]
 8007910:	2a30      	cmp	r2, #48	@ 0x30
 8007912:	f040 80b0 	bne.w	8007a76 <_strtod_l+0x19e>
 8007916:	786a      	ldrb	r2, [r5, #1]
 8007918:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800791c:	2a58      	cmp	r2, #88	@ 0x58
 800791e:	d16c      	bne.n	80079fa <_strtod_l+0x122>
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007924:	4a8f      	ldr	r2, [pc, #572]	@ (8007b64 <_strtod_l+0x28c>)
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	ab1a      	add	r3, sp, #104	@ 0x68
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	9805      	ldr	r0, [sp, #20]
 800792e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007930:	a919      	add	r1, sp, #100	@ 0x64
 8007932:	f001 f915 	bl	8008b60 <__gethex>
 8007936:	f010 060f 	ands.w	r6, r0, #15
 800793a:	4604      	mov	r4, r0
 800793c:	d005      	beq.n	800794a <_strtod_l+0x72>
 800793e:	2e06      	cmp	r6, #6
 8007940:	d126      	bne.n	8007990 <_strtod_l+0xb8>
 8007942:	2300      	movs	r3, #0
 8007944:	3501      	adds	r5, #1
 8007946:	9519      	str	r5, [sp, #100]	@ 0x64
 8007948:	930e      	str	r3, [sp, #56]	@ 0x38
 800794a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8582 	bne.w	8008456 <_strtod_l+0xb7e>
 8007952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007954:	b1bb      	cbz	r3, 8007986 <_strtod_l+0xae>
 8007956:	4650      	mov	r0, sl
 8007958:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800795c:	b01f      	add	sp, #124	@ 0x7c
 800795e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007962:	2920      	cmp	r1, #32
 8007964:	d1d0      	bne.n	8007908 <_strtod_l+0x30>
 8007966:	3201      	adds	r2, #1
 8007968:	e7c3      	b.n	80078f2 <_strtod_l+0x1a>
 800796a:	292d      	cmp	r1, #45	@ 0x2d
 800796c:	d1cc      	bne.n	8007908 <_strtod_l+0x30>
 800796e:	2101      	movs	r1, #1
 8007970:	910e      	str	r1, [sp, #56]	@ 0x38
 8007972:	1c51      	adds	r1, r2, #1
 8007974:	9119      	str	r1, [sp, #100]	@ 0x64
 8007976:	7852      	ldrb	r2, [r2, #1]
 8007978:	2a00      	cmp	r2, #0
 800797a:	d1c7      	bne.n	800790c <_strtod_l+0x34>
 800797c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800797e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 8566 	bne.w	8008452 <_strtod_l+0xb7a>
 8007986:	4650      	mov	r0, sl
 8007988:	4659      	mov	r1, fp
 800798a:	e7e7      	b.n	800795c <_strtod_l+0x84>
 800798c:	2100      	movs	r1, #0
 800798e:	e7ef      	b.n	8007970 <_strtod_l+0x98>
 8007990:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007992:	b13a      	cbz	r2, 80079a4 <_strtod_l+0xcc>
 8007994:	2135      	movs	r1, #53	@ 0x35
 8007996:	a81c      	add	r0, sp, #112	@ 0x70
 8007998:	f7ff ff38 	bl	800780c <__copybits>
 800799c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800799e:	9805      	ldr	r0, [sp, #20]
 80079a0:	f7ff fb18 	bl	8006fd4 <_Bfree>
 80079a4:	3e01      	subs	r6, #1
 80079a6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80079a8:	2e04      	cmp	r6, #4
 80079aa:	d806      	bhi.n	80079ba <_strtod_l+0xe2>
 80079ac:	e8df f006 	tbb	[pc, r6]
 80079b0:	201d0314 	.word	0x201d0314
 80079b4:	14          	.byte	0x14
 80079b5:	00          	.byte	0x00
 80079b6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80079ba:	05e1      	lsls	r1, r4, #23
 80079bc:	bf48      	it	mi
 80079be:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80079c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079c6:	0d1b      	lsrs	r3, r3, #20
 80079c8:	051b      	lsls	r3, r3, #20
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1bd      	bne.n	800794a <_strtod_l+0x72>
 80079ce:	f7fe fb25 	bl	800601c <__errno>
 80079d2:	2322      	movs	r3, #34	@ 0x22
 80079d4:	6003      	str	r3, [r0, #0]
 80079d6:	e7b8      	b.n	800794a <_strtod_l+0x72>
 80079d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80079dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80079e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80079e4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80079e8:	e7e7      	b.n	80079ba <_strtod_l+0xe2>
 80079ea:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007b68 <_strtod_l+0x290>
 80079ee:	e7e4      	b.n	80079ba <_strtod_l+0xe2>
 80079f0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80079f4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80079f8:	e7df      	b.n	80079ba <_strtod_l+0xe2>
 80079fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b30      	cmp	r3, #48	@ 0x30
 8007a04:	d0f9      	beq.n	80079fa <_strtod_l+0x122>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d09f      	beq.n	800794a <_strtod_l+0x72>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	2700      	movs	r7, #0
 8007a0e:	220a      	movs	r2, #10
 8007a10:	46b9      	mov	r9, r7
 8007a12:	9308      	str	r3, [sp, #32]
 8007a14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a16:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007a18:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a1a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007a1c:	7805      	ldrb	r5, [r0, #0]
 8007a1e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007a22:	b2d9      	uxtb	r1, r3
 8007a24:	2909      	cmp	r1, #9
 8007a26:	d928      	bls.n	8007a7a <_strtod_l+0x1a2>
 8007a28:	2201      	movs	r2, #1
 8007a2a:	4950      	ldr	r1, [pc, #320]	@ (8007b6c <_strtod_l+0x294>)
 8007a2c:	f000 ffc8 	bl	80089c0 <strncmp>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d032      	beq.n	8007a9a <_strtod_l+0x1c2>
 8007a34:	2000      	movs	r0, #0
 8007a36:	462a      	mov	r2, r5
 8007a38:	4603      	mov	r3, r0
 8007a3a:	464d      	mov	r5, r9
 8007a3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a3e:	2a65      	cmp	r2, #101	@ 0x65
 8007a40:	d001      	beq.n	8007a46 <_strtod_l+0x16e>
 8007a42:	2a45      	cmp	r2, #69	@ 0x45
 8007a44:	d114      	bne.n	8007a70 <_strtod_l+0x198>
 8007a46:	b91d      	cbnz	r5, 8007a50 <_strtod_l+0x178>
 8007a48:	9a08      	ldr	r2, [sp, #32]
 8007a4a:	4302      	orrs	r2, r0
 8007a4c:	d096      	beq.n	800797c <_strtod_l+0xa4>
 8007a4e:	2500      	movs	r5, #0
 8007a50:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007a52:	1c62      	adds	r2, r4, #1
 8007a54:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a56:	7862      	ldrb	r2, [r4, #1]
 8007a58:	2a2b      	cmp	r2, #43	@ 0x2b
 8007a5a:	d07a      	beq.n	8007b52 <_strtod_l+0x27a>
 8007a5c:	2a2d      	cmp	r2, #45	@ 0x2d
 8007a5e:	d07e      	beq.n	8007b5e <_strtod_l+0x286>
 8007a60:	f04f 0c00 	mov.w	ip, #0
 8007a64:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007a68:	2909      	cmp	r1, #9
 8007a6a:	f240 8085 	bls.w	8007b78 <_strtod_l+0x2a0>
 8007a6e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007a70:	f04f 0800 	mov.w	r8, #0
 8007a74:	e0a5      	b.n	8007bc2 <_strtod_l+0x2ea>
 8007a76:	2300      	movs	r3, #0
 8007a78:	e7c8      	b.n	8007a0c <_strtod_l+0x134>
 8007a7a:	f1b9 0f08 	cmp.w	r9, #8
 8007a7e:	bfd8      	it	le
 8007a80:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007a82:	f100 0001 	add.w	r0, r0, #1
 8007a86:	bfd6      	itet	le
 8007a88:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a8c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007a90:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007a92:	f109 0901 	add.w	r9, r9, #1
 8007a96:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a98:	e7bf      	b.n	8007a1a <_strtod_l+0x142>
 8007a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007aa0:	785a      	ldrb	r2, [r3, #1]
 8007aa2:	f1b9 0f00 	cmp.w	r9, #0
 8007aa6:	d03b      	beq.n	8007b20 <_strtod_l+0x248>
 8007aa8:	464d      	mov	r5, r9
 8007aaa:	900a      	str	r0, [sp, #40]	@ 0x28
 8007aac:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007ab0:	2b09      	cmp	r3, #9
 8007ab2:	d912      	bls.n	8007ada <_strtod_l+0x202>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e7c2      	b.n	8007a3e <_strtod_l+0x166>
 8007ab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007aba:	3001      	adds	r0, #1
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ac0:	785a      	ldrb	r2, [r3, #1]
 8007ac2:	2a30      	cmp	r2, #48	@ 0x30
 8007ac4:	d0f8      	beq.n	8007ab8 <_strtod_l+0x1e0>
 8007ac6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007aca:	2b08      	cmp	r3, #8
 8007acc:	f200 84c8 	bhi.w	8008460 <_strtod_l+0xb88>
 8007ad0:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ad8:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ada:	3a30      	subs	r2, #48	@ 0x30
 8007adc:	f100 0301 	add.w	r3, r0, #1
 8007ae0:	d018      	beq.n	8007b14 <_strtod_l+0x23c>
 8007ae2:	462e      	mov	r6, r5
 8007ae4:	f04f 0e0a 	mov.w	lr, #10
 8007ae8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007aea:	4419      	add	r1, r3
 8007aec:	910a      	str	r1, [sp, #40]	@ 0x28
 8007aee:	1c71      	adds	r1, r6, #1
 8007af0:	eba1 0c05 	sub.w	ip, r1, r5
 8007af4:	4563      	cmp	r3, ip
 8007af6:	dc15      	bgt.n	8007b24 <_strtod_l+0x24c>
 8007af8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007afc:	182b      	adds	r3, r5, r0
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	f105 0501 	add.w	r5, r5, #1
 8007b04:	4405      	add	r5, r0
 8007b06:	dc1a      	bgt.n	8007b3e <_strtod_l+0x266>
 8007b08:	230a      	movs	r3, #10
 8007b0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b0c:	fb03 2301 	mla	r3, r3, r1, r2
 8007b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b12:	2300      	movs	r3, #0
 8007b14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b16:	4618      	mov	r0, r3
 8007b18:	1c51      	adds	r1, r2, #1
 8007b1a:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b1c:	7852      	ldrb	r2, [r2, #1]
 8007b1e:	e7c5      	b.n	8007aac <_strtod_l+0x1d4>
 8007b20:	4648      	mov	r0, r9
 8007b22:	e7ce      	b.n	8007ac2 <_strtod_l+0x1ea>
 8007b24:	2e08      	cmp	r6, #8
 8007b26:	dc05      	bgt.n	8007b34 <_strtod_l+0x25c>
 8007b28:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b2a:	fb0e f606 	mul.w	r6, lr, r6
 8007b2e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007b30:	460e      	mov	r6, r1
 8007b32:	e7dc      	b.n	8007aee <_strtod_l+0x216>
 8007b34:	2910      	cmp	r1, #16
 8007b36:	bfd8      	it	le
 8007b38:	fb0e f707 	mulle.w	r7, lr, r7
 8007b3c:	e7f8      	b.n	8007b30 <_strtod_l+0x258>
 8007b3e:	2b0f      	cmp	r3, #15
 8007b40:	bfdc      	itt	le
 8007b42:	230a      	movle	r3, #10
 8007b44:	fb03 2707 	mlale	r7, r3, r7, r2
 8007b48:	e7e3      	b.n	8007b12 <_strtod_l+0x23a>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e77a      	b.n	8007a48 <_strtod_l+0x170>
 8007b52:	f04f 0c00 	mov.w	ip, #0
 8007b56:	1ca2      	adds	r2, r4, #2
 8007b58:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b5a:	78a2      	ldrb	r2, [r4, #2]
 8007b5c:	e782      	b.n	8007a64 <_strtod_l+0x18c>
 8007b5e:	f04f 0c01 	mov.w	ip, #1
 8007b62:	e7f8      	b.n	8007b56 <_strtod_l+0x27e>
 8007b64:	08009acc 	.word	0x08009acc
 8007b68:	7ff00000 	.word	0x7ff00000
 8007b6c:	08009905 	.word	0x08009905
 8007b70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b72:	1c51      	adds	r1, r2, #1
 8007b74:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b76:	7852      	ldrb	r2, [r2, #1]
 8007b78:	2a30      	cmp	r2, #48	@ 0x30
 8007b7a:	d0f9      	beq.n	8007b70 <_strtod_l+0x298>
 8007b7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007b80:	2908      	cmp	r1, #8
 8007b82:	f63f af75 	bhi.w	8007a70 <_strtod_l+0x198>
 8007b86:	f04f 080a 	mov.w	r8, #10
 8007b8a:	3a30      	subs	r2, #48	@ 0x30
 8007b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b90:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007b92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b94:	1c56      	adds	r6, r2, #1
 8007b96:	9619      	str	r6, [sp, #100]	@ 0x64
 8007b98:	7852      	ldrb	r2, [r2, #1]
 8007b9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007b9e:	f1be 0f09 	cmp.w	lr, #9
 8007ba2:	d939      	bls.n	8007c18 <_strtod_l+0x340>
 8007ba4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007ba6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007baa:	1a76      	subs	r6, r6, r1
 8007bac:	2e08      	cmp	r6, #8
 8007bae:	dc03      	bgt.n	8007bb8 <_strtod_l+0x2e0>
 8007bb0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bb2:	4588      	cmp	r8, r1
 8007bb4:	bfa8      	it	ge
 8007bb6:	4688      	movge	r8, r1
 8007bb8:	f1bc 0f00 	cmp.w	ip, #0
 8007bbc:	d001      	beq.n	8007bc2 <_strtod_l+0x2ea>
 8007bbe:	f1c8 0800 	rsb	r8, r8, #0
 8007bc2:	2d00      	cmp	r5, #0
 8007bc4:	d14e      	bne.n	8007c64 <_strtod_l+0x38c>
 8007bc6:	9908      	ldr	r1, [sp, #32]
 8007bc8:	4308      	orrs	r0, r1
 8007bca:	f47f aebe 	bne.w	800794a <_strtod_l+0x72>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f47f aed4 	bne.w	800797c <_strtod_l+0xa4>
 8007bd4:	2a69      	cmp	r2, #105	@ 0x69
 8007bd6:	d028      	beq.n	8007c2a <_strtod_l+0x352>
 8007bd8:	dc25      	bgt.n	8007c26 <_strtod_l+0x34e>
 8007bda:	2a49      	cmp	r2, #73	@ 0x49
 8007bdc:	d025      	beq.n	8007c2a <_strtod_l+0x352>
 8007bde:	2a4e      	cmp	r2, #78	@ 0x4e
 8007be0:	f47f aecc 	bne.w	800797c <_strtod_l+0xa4>
 8007be4:	4999      	ldr	r1, [pc, #612]	@ (8007e4c <_strtod_l+0x574>)
 8007be6:	a819      	add	r0, sp, #100	@ 0x64
 8007be8:	f001 f9dc 	bl	8008fa4 <__match>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f43f aec5 	beq.w	800797c <_strtod_l+0xa4>
 8007bf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b28      	cmp	r3, #40	@ 0x28
 8007bf8:	d12e      	bne.n	8007c58 <_strtod_l+0x380>
 8007bfa:	4995      	ldr	r1, [pc, #596]	@ (8007e50 <_strtod_l+0x578>)
 8007bfc:	aa1c      	add	r2, sp, #112	@ 0x70
 8007bfe:	a819      	add	r0, sp, #100	@ 0x64
 8007c00:	f001 f9e4 	bl	8008fcc <__hexnan>
 8007c04:	2805      	cmp	r0, #5
 8007c06:	d127      	bne.n	8007c58 <_strtod_l+0x380>
 8007c08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007c0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007c12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007c16:	e698      	b.n	800794a <_strtod_l+0x72>
 8007c18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c1a:	fb08 2101 	mla	r1, r8, r1, r2
 8007c1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007c22:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c24:	e7b5      	b.n	8007b92 <_strtod_l+0x2ba>
 8007c26:	2a6e      	cmp	r2, #110	@ 0x6e
 8007c28:	e7da      	b.n	8007be0 <_strtod_l+0x308>
 8007c2a:	498a      	ldr	r1, [pc, #552]	@ (8007e54 <_strtod_l+0x57c>)
 8007c2c:	a819      	add	r0, sp, #100	@ 0x64
 8007c2e:	f001 f9b9 	bl	8008fa4 <__match>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	f43f aea2 	beq.w	800797c <_strtod_l+0xa4>
 8007c38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c3a:	4987      	ldr	r1, [pc, #540]	@ (8007e58 <_strtod_l+0x580>)
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	a819      	add	r0, sp, #100	@ 0x64
 8007c40:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c42:	f001 f9af 	bl	8008fa4 <__match>
 8007c46:	b910      	cbnz	r0, 8007c4e <_strtod_l+0x376>
 8007c48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c4e:	f04f 0a00 	mov.w	sl, #0
 8007c52:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007e5c <_strtod_l+0x584>
 8007c56:	e678      	b.n	800794a <_strtod_l+0x72>
 8007c58:	4881      	ldr	r0, [pc, #516]	@ (8007e60 <_strtod_l+0x588>)
 8007c5a:	f000 fee1 	bl	8008a20 <nan>
 8007c5e:	4682      	mov	sl, r0
 8007c60:	468b      	mov	fp, r1
 8007c62:	e672      	b.n	800794a <_strtod_l+0x72>
 8007c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c66:	f1b9 0f00 	cmp.w	r9, #0
 8007c6a:	bf08      	it	eq
 8007c6c:	46a9      	moveq	r9, r5
 8007c6e:	eba8 0303 	sub.w	r3, r8, r3
 8007c72:	2d10      	cmp	r5, #16
 8007c74:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007c76:	462c      	mov	r4, r5
 8007c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7a:	bfa8      	it	ge
 8007c7c:	2410      	movge	r4, #16
 8007c7e:	f7f8 fbb1 	bl	80003e4 <__aeabi_ui2d>
 8007c82:	2d09      	cmp	r5, #9
 8007c84:	4682      	mov	sl, r0
 8007c86:	468b      	mov	fp, r1
 8007c88:	dc11      	bgt.n	8007cae <_strtod_l+0x3d6>
 8007c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f43f ae5c 	beq.w	800794a <_strtod_l+0x72>
 8007c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c94:	dd76      	ble.n	8007d84 <_strtod_l+0x4ac>
 8007c96:	2b16      	cmp	r3, #22
 8007c98:	dc5d      	bgt.n	8007d56 <_strtod_l+0x47e>
 8007c9a:	4972      	ldr	r1, [pc, #456]	@ (8007e64 <_strtod_l+0x58c>)
 8007c9c:	4652      	mov	r2, sl
 8007c9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ca2:	465b      	mov	r3, fp
 8007ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ca8:	f7f8 fc16 	bl	80004d8 <__aeabi_dmul>
 8007cac:	e7d7      	b.n	8007c5e <_strtod_l+0x386>
 8007cae:	4b6d      	ldr	r3, [pc, #436]	@ (8007e64 <_strtod_l+0x58c>)
 8007cb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007cb8:	f7f8 fc0e 	bl	80004d8 <__aeabi_dmul>
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	468b      	mov	fp, r1
 8007cc2:	f7f8 fb8f 	bl	80003e4 <__aeabi_ui2d>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4650      	mov	r0, sl
 8007ccc:	4659      	mov	r1, fp
 8007cce:	f7f8 fa4d 	bl	800016c <__adddf3>
 8007cd2:	2d0f      	cmp	r5, #15
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	468b      	mov	fp, r1
 8007cd8:	ddd7      	ble.n	8007c8a <_strtod_l+0x3b2>
 8007cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cdc:	1b2c      	subs	r4, r5, r4
 8007cde:	441c      	add	r4, r3
 8007ce0:	2c00      	cmp	r4, #0
 8007ce2:	f340 8093 	ble.w	8007e0c <_strtod_l+0x534>
 8007ce6:	f014 030f 	ands.w	r3, r4, #15
 8007cea:	d00a      	beq.n	8007d02 <_strtod_l+0x42a>
 8007cec:	495d      	ldr	r1, [pc, #372]	@ (8007e64 <_strtod_l+0x58c>)
 8007cee:	4652      	mov	r2, sl
 8007cf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf8:	465b      	mov	r3, fp
 8007cfa:	f7f8 fbed 	bl	80004d8 <__aeabi_dmul>
 8007cfe:	4682      	mov	sl, r0
 8007d00:	468b      	mov	fp, r1
 8007d02:	f034 040f 	bics.w	r4, r4, #15
 8007d06:	d073      	beq.n	8007df0 <_strtod_l+0x518>
 8007d08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007d0c:	dd49      	ble.n	8007da2 <_strtod_l+0x4ca>
 8007d0e:	2400      	movs	r4, #0
 8007d10:	46a0      	mov	r8, r4
 8007d12:	46a1      	mov	r9, r4
 8007d14:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d16:	2322      	movs	r3, #34	@ 0x22
 8007d18:	f04f 0a00 	mov.w	sl, #0
 8007d1c:	9a05      	ldr	r2, [sp, #20]
 8007d1e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007e5c <_strtod_l+0x584>
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f43f ae0f 	beq.w	800794a <_strtod_l+0x72>
 8007d2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d2e:	9805      	ldr	r0, [sp, #20]
 8007d30:	f7ff f950 	bl	8006fd4 <_Bfree>
 8007d34:	4649      	mov	r1, r9
 8007d36:	9805      	ldr	r0, [sp, #20]
 8007d38:	f7ff f94c 	bl	8006fd4 <_Bfree>
 8007d3c:	4641      	mov	r1, r8
 8007d3e:	9805      	ldr	r0, [sp, #20]
 8007d40:	f7ff f948 	bl	8006fd4 <_Bfree>
 8007d44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d46:	9805      	ldr	r0, [sp, #20]
 8007d48:	f7ff f944 	bl	8006fd4 <_Bfree>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	9805      	ldr	r0, [sp, #20]
 8007d50:	f7ff f940 	bl	8006fd4 <_Bfree>
 8007d54:	e5f9      	b.n	800794a <_strtod_l+0x72>
 8007d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	dbbc      	blt.n	8007cda <_strtod_l+0x402>
 8007d60:	4c40      	ldr	r4, [pc, #256]	@ (8007e64 <_strtod_l+0x58c>)
 8007d62:	f1c5 050f 	rsb	r5, r5, #15
 8007d66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d6a:	4652      	mov	r2, sl
 8007d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d70:	465b      	mov	r3, fp
 8007d72:	f7f8 fbb1 	bl	80004d8 <__aeabi_dmul>
 8007d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d78:	1b5d      	subs	r5, r3, r5
 8007d7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d82:	e791      	b.n	8007ca8 <_strtod_l+0x3d0>
 8007d84:	3316      	adds	r3, #22
 8007d86:	dba8      	blt.n	8007cda <_strtod_l+0x402>
 8007d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	eba3 0808 	sub.w	r8, r3, r8
 8007d90:	4b34      	ldr	r3, [pc, #208]	@ (8007e64 <_strtod_l+0x58c>)
 8007d92:	4659      	mov	r1, fp
 8007d94:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007d98:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007d9c:	f7f8 fcc6 	bl	800072c <__aeabi_ddiv>
 8007da0:	e75d      	b.n	8007c5e <_strtod_l+0x386>
 8007da2:	2300      	movs	r3, #0
 8007da4:	4650      	mov	r0, sl
 8007da6:	4659      	mov	r1, fp
 8007da8:	461e      	mov	r6, r3
 8007daa:	4f2f      	ldr	r7, [pc, #188]	@ (8007e68 <_strtod_l+0x590>)
 8007dac:	1124      	asrs	r4, r4, #4
 8007dae:	2c01      	cmp	r4, #1
 8007db0:	dc21      	bgt.n	8007df6 <_strtod_l+0x51e>
 8007db2:	b10b      	cbz	r3, 8007db8 <_strtod_l+0x4e0>
 8007db4:	4682      	mov	sl, r0
 8007db6:	468b      	mov	fp, r1
 8007db8:	492b      	ldr	r1, [pc, #172]	@ (8007e68 <_strtod_l+0x590>)
 8007dba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007dbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dc8:	465b      	mov	r3, fp
 8007dca:	f7f8 fb85 	bl	80004d8 <__aeabi_dmul>
 8007dce:	4b23      	ldr	r3, [pc, #140]	@ (8007e5c <_strtod_l+0x584>)
 8007dd0:	460a      	mov	r2, r1
 8007dd2:	400b      	ands	r3, r1
 8007dd4:	4925      	ldr	r1, [pc, #148]	@ (8007e6c <_strtod_l+0x594>)
 8007dd6:	4682      	mov	sl, r0
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	d898      	bhi.n	8007d0e <_strtod_l+0x436>
 8007ddc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007de0:	428b      	cmp	r3, r1
 8007de2:	bf86      	itte	hi
 8007de4:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007de8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007e70 <_strtod_l+0x598>
 8007dec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007df0:	2300      	movs	r3, #0
 8007df2:	9308      	str	r3, [sp, #32]
 8007df4:	e076      	b.n	8007ee4 <_strtod_l+0x60c>
 8007df6:	07e2      	lsls	r2, r4, #31
 8007df8:	d504      	bpl.n	8007e04 <_strtod_l+0x52c>
 8007dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dfe:	f7f8 fb6b 	bl	80004d8 <__aeabi_dmul>
 8007e02:	2301      	movs	r3, #1
 8007e04:	3601      	adds	r6, #1
 8007e06:	1064      	asrs	r4, r4, #1
 8007e08:	3708      	adds	r7, #8
 8007e0a:	e7d0      	b.n	8007dae <_strtod_l+0x4d6>
 8007e0c:	d0f0      	beq.n	8007df0 <_strtod_l+0x518>
 8007e0e:	4264      	negs	r4, r4
 8007e10:	f014 020f 	ands.w	r2, r4, #15
 8007e14:	d00a      	beq.n	8007e2c <_strtod_l+0x554>
 8007e16:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <_strtod_l+0x58c>)
 8007e18:	4650      	mov	r0, sl
 8007e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e1e:	4659      	mov	r1, fp
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f7f8 fc82 	bl	800072c <__aeabi_ddiv>
 8007e28:	4682      	mov	sl, r0
 8007e2a:	468b      	mov	fp, r1
 8007e2c:	1124      	asrs	r4, r4, #4
 8007e2e:	d0df      	beq.n	8007df0 <_strtod_l+0x518>
 8007e30:	2c1f      	cmp	r4, #31
 8007e32:	dd1f      	ble.n	8007e74 <_strtod_l+0x59c>
 8007e34:	2400      	movs	r4, #0
 8007e36:	46a0      	mov	r8, r4
 8007e38:	46a1      	mov	r9, r4
 8007e3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e3c:	2322      	movs	r3, #34	@ 0x22
 8007e3e:	9a05      	ldr	r2, [sp, #20]
 8007e40:	f04f 0a00 	mov.w	sl, #0
 8007e44:	f04f 0b00 	mov.w	fp, #0
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	e76b      	b.n	8007d24 <_strtod_l+0x44c>
 8007e4c:	080097f3 	.word	0x080097f3
 8007e50:	08009ab8 	.word	0x08009ab8
 8007e54:	080097eb 	.word	0x080097eb
 8007e58:	08009822 	.word	0x08009822
 8007e5c:	7ff00000 	.word	0x7ff00000
 8007e60:	0800995b 	.word	0x0800995b
 8007e64:	080099f0 	.word	0x080099f0
 8007e68:	080099c8 	.word	0x080099c8
 8007e6c:	7ca00000 	.word	0x7ca00000
 8007e70:	7fefffff 	.word	0x7fefffff
 8007e74:	f014 0310 	ands.w	r3, r4, #16
 8007e78:	bf18      	it	ne
 8007e7a:	236a      	movne	r3, #106	@ 0x6a
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	9308      	str	r3, [sp, #32]
 8007e80:	4659      	mov	r1, fp
 8007e82:	2300      	movs	r3, #0
 8007e84:	4e77      	ldr	r6, [pc, #476]	@ (8008064 <_strtod_l+0x78c>)
 8007e86:	07e7      	lsls	r7, r4, #31
 8007e88:	d504      	bpl.n	8007e94 <_strtod_l+0x5bc>
 8007e8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e8e:	f7f8 fb23 	bl	80004d8 <__aeabi_dmul>
 8007e92:	2301      	movs	r3, #1
 8007e94:	1064      	asrs	r4, r4, #1
 8007e96:	f106 0608 	add.w	r6, r6, #8
 8007e9a:	d1f4      	bne.n	8007e86 <_strtod_l+0x5ae>
 8007e9c:	b10b      	cbz	r3, 8007ea2 <_strtod_l+0x5ca>
 8007e9e:	4682      	mov	sl, r0
 8007ea0:	468b      	mov	fp, r1
 8007ea2:	9b08      	ldr	r3, [sp, #32]
 8007ea4:	b1b3      	cbz	r3, 8007ed4 <_strtod_l+0x5fc>
 8007ea6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007eaa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	dd0f      	ble.n	8007ed4 <_strtod_l+0x5fc>
 8007eb4:	2b1f      	cmp	r3, #31
 8007eb6:	dd58      	ble.n	8007f6a <_strtod_l+0x692>
 8007eb8:	2b34      	cmp	r3, #52	@ 0x34
 8007eba:	bfd8      	it	le
 8007ebc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007ec0:	f04f 0a00 	mov.w	sl, #0
 8007ec4:	bfcf      	iteee	gt
 8007ec6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007eca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007ece:	4093      	lslle	r3, r2
 8007ed0:	ea03 0b01 	andle.w	fp, r3, r1
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4650      	mov	r0, sl
 8007eda:	4659      	mov	r1, fp
 8007edc:	f7f8 fd64 	bl	80009a8 <__aeabi_dcmpeq>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d1a7      	bne.n	8007e34 <_strtod_l+0x55c>
 8007ee4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ee6:	464a      	mov	r2, r9
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007eec:	462b      	mov	r3, r5
 8007eee:	9805      	ldr	r0, [sp, #20]
 8007ef0:	f7ff f8d8 	bl	80070a4 <__s2b>
 8007ef4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f43f af09 	beq.w	8007d0e <_strtod_l+0x436>
 8007efc:	2400      	movs	r4, #0
 8007efe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	eba3 0308 	sub.w	r3, r3, r8
 8007f08:	bfa8      	it	ge
 8007f0a:	2300      	movge	r3, #0
 8007f0c:	46a0      	mov	r8, r4
 8007f0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f10:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f14:	9316      	str	r3, [sp, #88]	@ 0x58
 8007f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f18:	9805      	ldr	r0, [sp, #20]
 8007f1a:	6859      	ldr	r1, [r3, #4]
 8007f1c:	f7ff f81a 	bl	8006f54 <_Balloc>
 8007f20:	4681      	mov	r9, r0
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f43f aef7 	beq.w	8007d16 <_strtod_l+0x43e>
 8007f28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f2a:	300c      	adds	r0, #12
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	f103 010c 	add.w	r1, r3, #12
 8007f32:	3202      	adds	r2, #2
 8007f34:	0092      	lsls	r2, r2, #2
 8007f36:	f000 fd65 	bl	8008a04 <memcpy>
 8007f3a:	ab1c      	add	r3, sp, #112	@ 0x70
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	9805      	ldr	r0, [sp, #20]
 8007f48:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007f4c:	f7ff fbd6 	bl	80076fc <__d2b>
 8007f50:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f43f aedf 	beq.w	8007d16 <_strtod_l+0x43e>
 8007f58:	2101      	movs	r1, #1
 8007f5a:	9805      	ldr	r0, [sp, #20]
 8007f5c:	f7ff f938 	bl	80071d0 <__i2b>
 8007f60:	4680      	mov	r8, r0
 8007f62:	b948      	cbnz	r0, 8007f78 <_strtod_l+0x6a0>
 8007f64:	f04f 0800 	mov.w	r8, #0
 8007f68:	e6d5      	b.n	8007d16 <_strtod_l+0x43e>
 8007f6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f72:	ea03 0a0a 	and.w	sl, r3, sl
 8007f76:	e7ad      	b.n	8007ed4 <_strtod_l+0x5fc>
 8007f78:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007f7a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007f7c:	2d00      	cmp	r5, #0
 8007f7e:	bfab      	itete	ge
 8007f80:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007f82:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007f84:	18ef      	addge	r7, r5, r3
 8007f86:	1b5e      	sublt	r6, r3, r5
 8007f88:	9b08      	ldr	r3, [sp, #32]
 8007f8a:	bfa8      	it	ge
 8007f8c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007f8e:	eba5 0503 	sub.w	r5, r5, r3
 8007f92:	4415      	add	r5, r2
 8007f94:	4b34      	ldr	r3, [pc, #208]	@ (8008068 <_strtod_l+0x790>)
 8007f96:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8007f9a:	bfb8      	it	lt
 8007f9c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007f9e:	429d      	cmp	r5, r3
 8007fa0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007fa4:	da50      	bge.n	8008048 <_strtod_l+0x770>
 8007fa6:	1b5b      	subs	r3, r3, r5
 8007fa8:	2b1f      	cmp	r3, #31
 8007faa:	f04f 0101 	mov.w	r1, #1
 8007fae:	eba2 0203 	sub.w	r2, r2, r3
 8007fb2:	dc3d      	bgt.n	8008030 <_strtod_l+0x758>
 8007fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fbe:	18bd      	adds	r5, r7, r2
 8007fc0:	9b08      	ldr	r3, [sp, #32]
 8007fc2:	42af      	cmp	r7, r5
 8007fc4:	4416      	add	r6, r2
 8007fc6:	441e      	add	r6, r3
 8007fc8:	463b      	mov	r3, r7
 8007fca:	bfa8      	it	ge
 8007fcc:	462b      	movge	r3, r5
 8007fce:	42b3      	cmp	r3, r6
 8007fd0:	bfa8      	it	ge
 8007fd2:	4633      	movge	r3, r6
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bfc2      	ittt	gt
 8007fd8:	1aed      	subgt	r5, r5, r3
 8007fda:	1af6      	subgt	r6, r6, r3
 8007fdc:	1aff      	subgt	r7, r7, r3
 8007fde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dd16      	ble.n	8008012 <_strtod_l+0x73a>
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	9805      	ldr	r0, [sp, #20]
 8007fea:	f7ff f9a9 	bl	8007340 <__pow5mult>
 8007fee:	4680      	mov	r8, r0
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d0b7      	beq.n	8007f64 <_strtod_l+0x68c>
 8007ff4:	4601      	mov	r1, r0
 8007ff6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ff8:	9805      	ldr	r0, [sp, #20]
 8007ffa:	f7ff f8ff 	bl	80071fc <__multiply>
 8007ffe:	900a      	str	r0, [sp, #40]	@ 0x28
 8008000:	2800      	cmp	r0, #0
 8008002:	f43f ae88 	beq.w	8007d16 <_strtod_l+0x43e>
 8008006:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008008:	9805      	ldr	r0, [sp, #20]
 800800a:	f7fe ffe3 	bl	8006fd4 <_Bfree>
 800800e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008010:	931a      	str	r3, [sp, #104]	@ 0x68
 8008012:	2d00      	cmp	r5, #0
 8008014:	dc1d      	bgt.n	8008052 <_strtod_l+0x77a>
 8008016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008018:	2b00      	cmp	r3, #0
 800801a:	dd27      	ble.n	800806c <_strtod_l+0x794>
 800801c:	4649      	mov	r1, r9
 800801e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008020:	9805      	ldr	r0, [sp, #20]
 8008022:	f7ff f98d 	bl	8007340 <__pow5mult>
 8008026:	4681      	mov	r9, r0
 8008028:	bb00      	cbnz	r0, 800806c <_strtod_l+0x794>
 800802a:	f04f 0900 	mov.w	r9, #0
 800802e:	e672      	b.n	8007d16 <_strtod_l+0x43e>
 8008030:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008034:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008038:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800803c:	35e2      	adds	r5, #226	@ 0xe2
 800803e:	fa01 f305 	lsl.w	r3, r1, r5
 8008042:	9310      	str	r3, [sp, #64]	@ 0x40
 8008044:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008046:	e7ba      	b.n	8007fbe <_strtod_l+0x6e6>
 8008048:	2300      	movs	r3, #0
 800804a:	9310      	str	r3, [sp, #64]	@ 0x40
 800804c:	2301      	movs	r3, #1
 800804e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008050:	e7b5      	b.n	8007fbe <_strtod_l+0x6e6>
 8008052:	462a      	mov	r2, r5
 8008054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008056:	9805      	ldr	r0, [sp, #20]
 8008058:	f7ff f9cc 	bl	80073f4 <__lshift>
 800805c:	901a      	str	r0, [sp, #104]	@ 0x68
 800805e:	2800      	cmp	r0, #0
 8008060:	d1d9      	bne.n	8008016 <_strtod_l+0x73e>
 8008062:	e658      	b.n	8007d16 <_strtod_l+0x43e>
 8008064:	08009ae0 	.word	0x08009ae0
 8008068:	fffffc02 	.word	0xfffffc02
 800806c:	2e00      	cmp	r6, #0
 800806e:	dd07      	ble.n	8008080 <_strtod_l+0x7a8>
 8008070:	4649      	mov	r1, r9
 8008072:	4632      	mov	r2, r6
 8008074:	9805      	ldr	r0, [sp, #20]
 8008076:	f7ff f9bd 	bl	80073f4 <__lshift>
 800807a:	4681      	mov	r9, r0
 800807c:	2800      	cmp	r0, #0
 800807e:	d0d4      	beq.n	800802a <_strtod_l+0x752>
 8008080:	2f00      	cmp	r7, #0
 8008082:	dd08      	ble.n	8008096 <_strtod_l+0x7be>
 8008084:	4641      	mov	r1, r8
 8008086:	463a      	mov	r2, r7
 8008088:	9805      	ldr	r0, [sp, #20]
 800808a:	f7ff f9b3 	bl	80073f4 <__lshift>
 800808e:	4680      	mov	r8, r0
 8008090:	2800      	cmp	r0, #0
 8008092:	f43f ae40 	beq.w	8007d16 <_strtod_l+0x43e>
 8008096:	464a      	mov	r2, r9
 8008098:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800809a:	9805      	ldr	r0, [sp, #20]
 800809c:	f7ff fa32 	bl	8007504 <__mdiff>
 80080a0:	4604      	mov	r4, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f43f ae37 	beq.w	8007d16 <_strtod_l+0x43e>
 80080a8:	68c3      	ldr	r3, [r0, #12]
 80080aa:	4641      	mov	r1, r8
 80080ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080ae:	2300      	movs	r3, #0
 80080b0:	60c3      	str	r3, [r0, #12]
 80080b2:	f7ff fa0b 	bl	80074cc <__mcmp>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	da3d      	bge.n	8008136 <_strtod_l+0x85e>
 80080ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080bc:	ea53 030a 	orrs.w	r3, r3, sl
 80080c0:	d163      	bne.n	800818a <_strtod_l+0x8b2>
 80080c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d15f      	bne.n	800818a <_strtod_l+0x8b2>
 80080ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080ce:	0d1b      	lsrs	r3, r3, #20
 80080d0:	051b      	lsls	r3, r3, #20
 80080d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80080d6:	d958      	bls.n	800818a <_strtod_l+0x8b2>
 80080d8:	6963      	ldr	r3, [r4, #20]
 80080da:	b913      	cbnz	r3, 80080e2 <_strtod_l+0x80a>
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	dd53      	ble.n	800818a <_strtod_l+0x8b2>
 80080e2:	4621      	mov	r1, r4
 80080e4:	2201      	movs	r2, #1
 80080e6:	9805      	ldr	r0, [sp, #20]
 80080e8:	f7ff f984 	bl	80073f4 <__lshift>
 80080ec:	4641      	mov	r1, r8
 80080ee:	4604      	mov	r4, r0
 80080f0:	f7ff f9ec 	bl	80074cc <__mcmp>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	dd48      	ble.n	800818a <_strtod_l+0x8b2>
 80080f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080fc:	9a08      	ldr	r2, [sp, #32]
 80080fe:	0d1b      	lsrs	r3, r3, #20
 8008100:	051b      	lsls	r3, r3, #20
 8008102:	2a00      	cmp	r2, #0
 8008104:	d062      	beq.n	80081cc <_strtod_l+0x8f4>
 8008106:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800810a:	d85f      	bhi.n	80081cc <_strtod_l+0x8f4>
 800810c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008110:	f67f ae94 	bls.w	8007e3c <_strtod_l+0x564>
 8008114:	4650      	mov	r0, sl
 8008116:	4659      	mov	r1, fp
 8008118:	4ba3      	ldr	r3, [pc, #652]	@ (80083a8 <_strtod_l+0xad0>)
 800811a:	2200      	movs	r2, #0
 800811c:	f7f8 f9dc 	bl	80004d8 <__aeabi_dmul>
 8008120:	4ba2      	ldr	r3, [pc, #648]	@ (80083ac <_strtod_l+0xad4>)
 8008122:	4682      	mov	sl, r0
 8008124:	400b      	ands	r3, r1
 8008126:	468b      	mov	fp, r1
 8008128:	2b00      	cmp	r3, #0
 800812a:	f47f adff 	bne.w	8007d2c <_strtod_l+0x454>
 800812e:	2322      	movs	r3, #34	@ 0x22
 8008130:	9a05      	ldr	r2, [sp, #20]
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	e5fa      	b.n	8007d2c <_strtod_l+0x454>
 8008136:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800813a:	d165      	bne.n	8008208 <_strtod_l+0x930>
 800813c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800813e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008142:	b35a      	cbz	r2, 800819c <_strtod_l+0x8c4>
 8008144:	4a9a      	ldr	r2, [pc, #616]	@ (80083b0 <_strtod_l+0xad8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d12b      	bne.n	80081a2 <_strtod_l+0x8ca>
 800814a:	9b08      	ldr	r3, [sp, #32]
 800814c:	4651      	mov	r1, sl
 800814e:	b303      	cbz	r3, 8008192 <_strtod_l+0x8ba>
 8008150:	465a      	mov	r2, fp
 8008152:	4b96      	ldr	r3, [pc, #600]	@ (80083ac <_strtod_l+0xad4>)
 8008154:	4013      	ands	r3, r2
 8008156:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800815a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800815e:	d81b      	bhi.n	8008198 <_strtod_l+0x8c0>
 8008160:	0d1b      	lsrs	r3, r3, #20
 8008162:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008166:	fa02 f303 	lsl.w	r3, r2, r3
 800816a:	4299      	cmp	r1, r3
 800816c:	d119      	bne.n	80081a2 <_strtod_l+0x8ca>
 800816e:	4b91      	ldr	r3, [pc, #580]	@ (80083b4 <_strtod_l+0xadc>)
 8008170:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008172:	429a      	cmp	r2, r3
 8008174:	d102      	bne.n	800817c <_strtod_l+0x8a4>
 8008176:	3101      	adds	r1, #1
 8008178:	f43f adcd 	beq.w	8007d16 <_strtod_l+0x43e>
 800817c:	f04f 0a00 	mov.w	sl, #0
 8008180:	4b8a      	ldr	r3, [pc, #552]	@ (80083ac <_strtod_l+0xad4>)
 8008182:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008184:	401a      	ands	r2, r3
 8008186:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800818a:	9b08      	ldr	r3, [sp, #32]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1c1      	bne.n	8008114 <_strtod_l+0x83c>
 8008190:	e5cc      	b.n	8007d2c <_strtod_l+0x454>
 8008192:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008196:	e7e8      	b.n	800816a <_strtod_l+0x892>
 8008198:	4613      	mov	r3, r2
 800819a:	e7e6      	b.n	800816a <_strtod_l+0x892>
 800819c:	ea53 030a 	orrs.w	r3, r3, sl
 80081a0:	d0aa      	beq.n	80080f8 <_strtod_l+0x820>
 80081a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081a4:	b1db      	cbz	r3, 80081de <_strtod_l+0x906>
 80081a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081a8:	4213      	tst	r3, r2
 80081aa:	d0ee      	beq.n	800818a <_strtod_l+0x8b2>
 80081ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ae:	4650      	mov	r0, sl
 80081b0:	4659      	mov	r1, fp
 80081b2:	9a08      	ldr	r2, [sp, #32]
 80081b4:	b1bb      	cbz	r3, 80081e6 <_strtod_l+0x90e>
 80081b6:	f7ff fb6d 	bl	8007894 <sulp>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081c2:	f7f7 ffd3 	bl	800016c <__adddf3>
 80081c6:	4682      	mov	sl, r0
 80081c8:	468b      	mov	fp, r1
 80081ca:	e7de      	b.n	800818a <_strtod_l+0x8b2>
 80081cc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80081d0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80081d4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80081d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80081dc:	e7d5      	b.n	800818a <_strtod_l+0x8b2>
 80081de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081e0:	ea13 0f0a 	tst.w	r3, sl
 80081e4:	e7e1      	b.n	80081aa <_strtod_l+0x8d2>
 80081e6:	f7ff fb55 	bl	8007894 <sulp>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081f2:	f7f7 ffb9 	bl	8000168 <__aeabi_dsub>
 80081f6:	2200      	movs	r2, #0
 80081f8:	2300      	movs	r3, #0
 80081fa:	4682      	mov	sl, r0
 80081fc:	468b      	mov	fp, r1
 80081fe:	f7f8 fbd3 	bl	80009a8 <__aeabi_dcmpeq>
 8008202:	2800      	cmp	r0, #0
 8008204:	d0c1      	beq.n	800818a <_strtod_l+0x8b2>
 8008206:	e619      	b.n	8007e3c <_strtod_l+0x564>
 8008208:	4641      	mov	r1, r8
 800820a:	4620      	mov	r0, r4
 800820c:	f7ff face 	bl	80077ac <__ratio>
 8008210:	2200      	movs	r2, #0
 8008212:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008216:	4606      	mov	r6, r0
 8008218:	460f      	mov	r7, r1
 800821a:	f7f8 fbd9 	bl	80009d0 <__aeabi_dcmple>
 800821e:	2800      	cmp	r0, #0
 8008220:	d06d      	beq.n	80082fe <_strtod_l+0xa26>
 8008222:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d178      	bne.n	800831a <_strtod_l+0xa42>
 8008228:	f1ba 0f00 	cmp.w	sl, #0
 800822c:	d156      	bne.n	80082dc <_strtod_l+0xa04>
 800822e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008234:	2b00      	cmp	r3, #0
 8008236:	d158      	bne.n	80082ea <_strtod_l+0xa12>
 8008238:	2200      	movs	r2, #0
 800823a:	4630      	mov	r0, r6
 800823c:	4639      	mov	r1, r7
 800823e:	4b5e      	ldr	r3, [pc, #376]	@ (80083b8 <_strtod_l+0xae0>)
 8008240:	f7f8 fbbc 	bl	80009bc <__aeabi_dcmplt>
 8008244:	2800      	cmp	r0, #0
 8008246:	d157      	bne.n	80082f8 <_strtod_l+0xa20>
 8008248:	4630      	mov	r0, r6
 800824a:	4639      	mov	r1, r7
 800824c:	2200      	movs	r2, #0
 800824e:	4b5b      	ldr	r3, [pc, #364]	@ (80083bc <_strtod_l+0xae4>)
 8008250:	f7f8 f942 	bl	80004d8 <__aeabi_dmul>
 8008254:	4606      	mov	r6, r0
 8008256:	460f      	mov	r7, r1
 8008258:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800825c:	9606      	str	r6, [sp, #24]
 800825e:	9307      	str	r3, [sp, #28]
 8008260:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008264:	4d51      	ldr	r5, [pc, #324]	@ (80083ac <_strtod_l+0xad4>)
 8008266:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800826a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800826c:	401d      	ands	r5, r3
 800826e:	4b54      	ldr	r3, [pc, #336]	@ (80083c0 <_strtod_l+0xae8>)
 8008270:	429d      	cmp	r5, r3
 8008272:	f040 80ab 	bne.w	80083cc <_strtod_l+0xaf4>
 8008276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008278:	4650      	mov	r0, sl
 800827a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800827e:	4659      	mov	r1, fp
 8008280:	f7ff f9d4 	bl	800762c <__ulp>
 8008284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008288:	f7f8 f926 	bl	80004d8 <__aeabi_dmul>
 800828c:	4652      	mov	r2, sl
 800828e:	465b      	mov	r3, fp
 8008290:	f7f7 ff6c 	bl	800016c <__adddf3>
 8008294:	460b      	mov	r3, r1
 8008296:	4945      	ldr	r1, [pc, #276]	@ (80083ac <_strtod_l+0xad4>)
 8008298:	4a4a      	ldr	r2, [pc, #296]	@ (80083c4 <_strtod_l+0xaec>)
 800829a:	4019      	ands	r1, r3
 800829c:	4291      	cmp	r1, r2
 800829e:	4682      	mov	sl, r0
 80082a0:	d942      	bls.n	8008328 <_strtod_l+0xa50>
 80082a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082a4:	4b43      	ldr	r3, [pc, #268]	@ (80083b4 <_strtod_l+0xadc>)
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d103      	bne.n	80082b2 <_strtod_l+0x9da>
 80082aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082ac:	3301      	adds	r3, #1
 80082ae:	f43f ad32 	beq.w	8007d16 <_strtod_l+0x43e>
 80082b2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80082b6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80083b4 <_strtod_l+0xadc>
 80082ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082bc:	9805      	ldr	r0, [sp, #20]
 80082be:	f7fe fe89 	bl	8006fd4 <_Bfree>
 80082c2:	4649      	mov	r1, r9
 80082c4:	9805      	ldr	r0, [sp, #20]
 80082c6:	f7fe fe85 	bl	8006fd4 <_Bfree>
 80082ca:	4641      	mov	r1, r8
 80082cc:	9805      	ldr	r0, [sp, #20]
 80082ce:	f7fe fe81 	bl	8006fd4 <_Bfree>
 80082d2:	4621      	mov	r1, r4
 80082d4:	9805      	ldr	r0, [sp, #20]
 80082d6:	f7fe fe7d 	bl	8006fd4 <_Bfree>
 80082da:	e61c      	b.n	8007f16 <_strtod_l+0x63e>
 80082dc:	f1ba 0f01 	cmp.w	sl, #1
 80082e0:	d103      	bne.n	80082ea <_strtod_l+0xa12>
 80082e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f43f ada9 	beq.w	8007e3c <_strtod_l+0x564>
 80082ea:	2200      	movs	r2, #0
 80082ec:	4b36      	ldr	r3, [pc, #216]	@ (80083c8 <_strtod_l+0xaf0>)
 80082ee:	2600      	movs	r6, #0
 80082f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082f4:	4f30      	ldr	r7, [pc, #192]	@ (80083b8 <_strtod_l+0xae0>)
 80082f6:	e7b3      	b.n	8008260 <_strtod_l+0x988>
 80082f8:	2600      	movs	r6, #0
 80082fa:	4f30      	ldr	r7, [pc, #192]	@ (80083bc <_strtod_l+0xae4>)
 80082fc:	e7ac      	b.n	8008258 <_strtod_l+0x980>
 80082fe:	4630      	mov	r0, r6
 8008300:	4639      	mov	r1, r7
 8008302:	4b2e      	ldr	r3, [pc, #184]	@ (80083bc <_strtod_l+0xae4>)
 8008304:	2200      	movs	r2, #0
 8008306:	f7f8 f8e7 	bl	80004d8 <__aeabi_dmul>
 800830a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800830c:	4606      	mov	r6, r0
 800830e:	460f      	mov	r7, r1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0a1      	beq.n	8008258 <_strtod_l+0x980>
 8008314:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008318:	e7a2      	b.n	8008260 <_strtod_l+0x988>
 800831a:	2200      	movs	r2, #0
 800831c:	4b26      	ldr	r3, [pc, #152]	@ (80083b8 <_strtod_l+0xae0>)
 800831e:	4616      	mov	r6, r2
 8008320:	461f      	mov	r7, r3
 8008322:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008326:	e79b      	b.n	8008260 <_strtod_l+0x988>
 8008328:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800832c:	9b08      	ldr	r3, [sp, #32]
 800832e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1c1      	bne.n	80082ba <_strtod_l+0x9e2>
 8008336:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800833a:	0d1b      	lsrs	r3, r3, #20
 800833c:	051b      	lsls	r3, r3, #20
 800833e:	429d      	cmp	r5, r3
 8008340:	d1bb      	bne.n	80082ba <_strtod_l+0x9e2>
 8008342:	4630      	mov	r0, r6
 8008344:	4639      	mov	r1, r7
 8008346:	f7f8 fc0f 	bl	8000b68 <__aeabi_d2lz>
 800834a:	f7f8 f897 	bl	800047c <__aeabi_l2d>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4630      	mov	r0, r6
 8008354:	4639      	mov	r1, r7
 8008356:	f7f7 ff07 	bl	8000168 <__aeabi_dsub>
 800835a:	460b      	mov	r3, r1
 800835c:	4602      	mov	r2, r0
 800835e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008362:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008366:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008368:	ea46 060a 	orr.w	r6, r6, sl
 800836c:	431e      	orrs	r6, r3
 800836e:	d06a      	beq.n	8008446 <_strtod_l+0xb6e>
 8008370:	a309      	add	r3, pc, #36	@ (adr r3, 8008398 <_strtod_l+0xac0>)
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f7f8 fb21 	bl	80009bc <__aeabi_dcmplt>
 800837a:	2800      	cmp	r0, #0
 800837c:	f47f acd6 	bne.w	8007d2c <_strtod_l+0x454>
 8008380:	a307      	add	r3, pc, #28	@ (adr r3, 80083a0 <_strtod_l+0xac8>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800838a:	f7f8 fb35 	bl	80009f8 <__aeabi_dcmpgt>
 800838e:	2800      	cmp	r0, #0
 8008390:	d093      	beq.n	80082ba <_strtod_l+0x9e2>
 8008392:	e4cb      	b.n	8007d2c <_strtod_l+0x454>
 8008394:	f3af 8000 	nop.w
 8008398:	94a03595 	.word	0x94a03595
 800839c:	3fdfffff 	.word	0x3fdfffff
 80083a0:	35afe535 	.word	0x35afe535
 80083a4:	3fe00000 	.word	0x3fe00000
 80083a8:	39500000 	.word	0x39500000
 80083ac:	7ff00000 	.word	0x7ff00000
 80083b0:	000fffff 	.word	0x000fffff
 80083b4:	7fefffff 	.word	0x7fefffff
 80083b8:	3ff00000 	.word	0x3ff00000
 80083bc:	3fe00000 	.word	0x3fe00000
 80083c0:	7fe00000 	.word	0x7fe00000
 80083c4:	7c9fffff 	.word	0x7c9fffff
 80083c8:	bff00000 	.word	0xbff00000
 80083cc:	9b08      	ldr	r3, [sp, #32]
 80083ce:	b323      	cbz	r3, 800841a <_strtod_l+0xb42>
 80083d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80083d4:	d821      	bhi.n	800841a <_strtod_l+0xb42>
 80083d6:	a328      	add	r3, pc, #160	@ (adr r3, 8008478 <_strtod_l+0xba0>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f8 faf6 	bl	80009d0 <__aeabi_dcmple>
 80083e4:	b1a0      	cbz	r0, 8008410 <_strtod_l+0xb38>
 80083e6:	4639      	mov	r1, r7
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7f8 fb4d 	bl	8000a88 <__aeabi_d2uiz>
 80083ee:	2801      	cmp	r0, #1
 80083f0:	bf38      	it	cc
 80083f2:	2001      	movcc	r0, #1
 80083f4:	f7f7 fff6 	bl	80003e4 <__aeabi_ui2d>
 80083f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083fa:	4606      	mov	r6, r0
 80083fc:	460f      	mov	r7, r1
 80083fe:	b9fb      	cbnz	r3, 8008440 <_strtod_l+0xb68>
 8008400:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008404:	9014      	str	r0, [sp, #80]	@ 0x50
 8008406:	9315      	str	r3, [sp, #84]	@ 0x54
 8008408:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800840c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008410:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008412:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008416:	1b5b      	subs	r3, r3, r5
 8008418:	9311      	str	r3, [sp, #68]	@ 0x44
 800841a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800841e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008422:	f7ff f903 	bl	800762c <__ulp>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4650      	mov	r0, sl
 800842c:	4659      	mov	r1, fp
 800842e:	f7f8 f853 	bl	80004d8 <__aeabi_dmul>
 8008432:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008436:	f7f7 fe99 	bl	800016c <__adddf3>
 800843a:	4682      	mov	sl, r0
 800843c:	468b      	mov	fp, r1
 800843e:	e775      	b.n	800832c <_strtod_l+0xa54>
 8008440:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008444:	e7e0      	b.n	8008408 <_strtod_l+0xb30>
 8008446:	a30e      	add	r3, pc, #56	@ (adr r3, 8008480 <_strtod_l+0xba8>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f7f8 fab6 	bl	80009bc <__aeabi_dcmplt>
 8008450:	e79d      	b.n	800838e <_strtod_l+0xab6>
 8008452:	2300      	movs	r3, #0
 8008454:	930e      	str	r3, [sp, #56]	@ 0x38
 8008456:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008458:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	f7ff ba79 	b.w	8007952 <_strtod_l+0x7a>
 8008460:	2a65      	cmp	r2, #101	@ 0x65
 8008462:	f43f ab72 	beq.w	8007b4a <_strtod_l+0x272>
 8008466:	2a45      	cmp	r2, #69	@ 0x45
 8008468:	f43f ab6f 	beq.w	8007b4a <_strtod_l+0x272>
 800846c:	2301      	movs	r3, #1
 800846e:	f7ff bbaa 	b.w	8007bc6 <_strtod_l+0x2ee>
 8008472:	bf00      	nop
 8008474:	f3af 8000 	nop.w
 8008478:	ffc00000 	.word	0xffc00000
 800847c:	41dfffff 	.word	0x41dfffff
 8008480:	94a03595 	.word	0x94a03595
 8008484:	3fcfffff 	.word	0x3fcfffff

08008488 <_strtod_r>:
 8008488:	4b01      	ldr	r3, [pc, #4]	@ (8008490 <_strtod_r+0x8>)
 800848a:	f7ff ba25 	b.w	80078d8 <_strtod_l>
 800848e:	bf00      	nop
 8008490:	2000006c 	.word	0x2000006c

08008494 <_strtol_l.isra.0>:
 8008494:	2b24      	cmp	r3, #36	@ 0x24
 8008496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800849a:	4686      	mov	lr, r0
 800849c:	4690      	mov	r8, r2
 800849e:	d801      	bhi.n	80084a4 <_strtol_l.isra.0+0x10>
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d106      	bne.n	80084b2 <_strtol_l.isra.0+0x1e>
 80084a4:	f7fd fdba 	bl	800601c <__errno>
 80084a8:	2316      	movs	r3, #22
 80084aa:	6003      	str	r3, [r0, #0]
 80084ac:	2000      	movs	r0, #0
 80084ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b2:	460d      	mov	r5, r1
 80084b4:	4833      	ldr	r0, [pc, #204]	@ (8008584 <_strtol_l.isra.0+0xf0>)
 80084b6:	462a      	mov	r2, r5
 80084b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084bc:	5d06      	ldrb	r6, [r0, r4]
 80084be:	f016 0608 	ands.w	r6, r6, #8
 80084c2:	d1f8      	bne.n	80084b6 <_strtol_l.isra.0+0x22>
 80084c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80084c6:	d110      	bne.n	80084ea <_strtol_l.isra.0+0x56>
 80084c8:	2601      	movs	r6, #1
 80084ca:	782c      	ldrb	r4, [r5, #0]
 80084cc:	1c95      	adds	r5, r2, #2
 80084ce:	f033 0210 	bics.w	r2, r3, #16
 80084d2:	d115      	bne.n	8008500 <_strtol_l.isra.0+0x6c>
 80084d4:	2c30      	cmp	r4, #48	@ 0x30
 80084d6:	d10d      	bne.n	80084f4 <_strtol_l.isra.0+0x60>
 80084d8:	782a      	ldrb	r2, [r5, #0]
 80084da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084de:	2a58      	cmp	r2, #88	@ 0x58
 80084e0:	d108      	bne.n	80084f4 <_strtol_l.isra.0+0x60>
 80084e2:	786c      	ldrb	r4, [r5, #1]
 80084e4:	3502      	adds	r5, #2
 80084e6:	2310      	movs	r3, #16
 80084e8:	e00a      	b.n	8008500 <_strtol_l.isra.0+0x6c>
 80084ea:	2c2b      	cmp	r4, #43	@ 0x2b
 80084ec:	bf04      	itt	eq
 80084ee:	782c      	ldrbeq	r4, [r5, #0]
 80084f0:	1c95      	addeq	r5, r2, #2
 80084f2:	e7ec      	b.n	80084ce <_strtol_l.isra.0+0x3a>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f6      	bne.n	80084e6 <_strtol_l.isra.0+0x52>
 80084f8:	2c30      	cmp	r4, #48	@ 0x30
 80084fa:	bf14      	ite	ne
 80084fc:	230a      	movne	r3, #10
 80084fe:	2308      	moveq	r3, #8
 8008500:	2200      	movs	r2, #0
 8008502:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008506:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800850a:	fbbc f9f3 	udiv	r9, ip, r3
 800850e:	4610      	mov	r0, r2
 8008510:	fb03 ca19 	mls	sl, r3, r9, ip
 8008514:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008518:	2f09      	cmp	r7, #9
 800851a:	d80f      	bhi.n	800853c <_strtol_l.isra.0+0xa8>
 800851c:	463c      	mov	r4, r7
 800851e:	42a3      	cmp	r3, r4
 8008520:	dd1b      	ble.n	800855a <_strtol_l.isra.0+0xc6>
 8008522:	1c57      	adds	r7, r2, #1
 8008524:	d007      	beq.n	8008536 <_strtol_l.isra.0+0xa2>
 8008526:	4581      	cmp	r9, r0
 8008528:	d314      	bcc.n	8008554 <_strtol_l.isra.0+0xc0>
 800852a:	d101      	bne.n	8008530 <_strtol_l.isra.0+0x9c>
 800852c:	45a2      	cmp	sl, r4
 800852e:	db11      	blt.n	8008554 <_strtol_l.isra.0+0xc0>
 8008530:	2201      	movs	r2, #1
 8008532:	fb00 4003 	mla	r0, r0, r3, r4
 8008536:	f815 4b01 	ldrb.w	r4, [r5], #1
 800853a:	e7eb      	b.n	8008514 <_strtol_l.isra.0+0x80>
 800853c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008540:	2f19      	cmp	r7, #25
 8008542:	d801      	bhi.n	8008548 <_strtol_l.isra.0+0xb4>
 8008544:	3c37      	subs	r4, #55	@ 0x37
 8008546:	e7ea      	b.n	800851e <_strtol_l.isra.0+0x8a>
 8008548:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800854c:	2f19      	cmp	r7, #25
 800854e:	d804      	bhi.n	800855a <_strtol_l.isra.0+0xc6>
 8008550:	3c57      	subs	r4, #87	@ 0x57
 8008552:	e7e4      	b.n	800851e <_strtol_l.isra.0+0x8a>
 8008554:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008558:	e7ed      	b.n	8008536 <_strtol_l.isra.0+0xa2>
 800855a:	1c53      	adds	r3, r2, #1
 800855c:	d108      	bne.n	8008570 <_strtol_l.isra.0+0xdc>
 800855e:	2322      	movs	r3, #34	@ 0x22
 8008560:	4660      	mov	r0, ip
 8008562:	f8ce 3000 	str.w	r3, [lr]
 8008566:	f1b8 0f00 	cmp.w	r8, #0
 800856a:	d0a0      	beq.n	80084ae <_strtol_l.isra.0+0x1a>
 800856c:	1e69      	subs	r1, r5, #1
 800856e:	e006      	b.n	800857e <_strtol_l.isra.0+0xea>
 8008570:	b106      	cbz	r6, 8008574 <_strtol_l.isra.0+0xe0>
 8008572:	4240      	negs	r0, r0
 8008574:	f1b8 0f00 	cmp.w	r8, #0
 8008578:	d099      	beq.n	80084ae <_strtol_l.isra.0+0x1a>
 800857a:	2a00      	cmp	r2, #0
 800857c:	d1f6      	bne.n	800856c <_strtol_l.isra.0+0xd8>
 800857e:	f8c8 1000 	str.w	r1, [r8]
 8008582:	e794      	b.n	80084ae <_strtol_l.isra.0+0x1a>
 8008584:	08009b09 	.word	0x08009b09

08008588 <_strtol_r>:
 8008588:	f7ff bf84 	b.w	8008494 <_strtol_l.isra.0>

0800858c <__ssputs_r>:
 800858c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008590:	461f      	mov	r7, r3
 8008592:	688e      	ldr	r6, [r1, #8]
 8008594:	4682      	mov	sl, r0
 8008596:	42be      	cmp	r6, r7
 8008598:	460c      	mov	r4, r1
 800859a:	4690      	mov	r8, r2
 800859c:	680b      	ldr	r3, [r1, #0]
 800859e:	d82d      	bhi.n	80085fc <__ssputs_r+0x70>
 80085a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085a8:	d026      	beq.n	80085f8 <__ssputs_r+0x6c>
 80085aa:	6965      	ldr	r5, [r4, #20]
 80085ac:	6909      	ldr	r1, [r1, #16]
 80085ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085b2:	eba3 0901 	sub.w	r9, r3, r1
 80085b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085ba:	1c7b      	adds	r3, r7, #1
 80085bc:	444b      	add	r3, r9
 80085be:	106d      	asrs	r5, r5, #1
 80085c0:	429d      	cmp	r5, r3
 80085c2:	bf38      	it	cc
 80085c4:	461d      	movcc	r5, r3
 80085c6:	0553      	lsls	r3, r2, #21
 80085c8:	d527      	bpl.n	800861a <__ssputs_r+0x8e>
 80085ca:	4629      	mov	r1, r5
 80085cc:	f7fe fc36 	bl	8006e3c <_malloc_r>
 80085d0:	4606      	mov	r6, r0
 80085d2:	b360      	cbz	r0, 800862e <__ssputs_r+0xa2>
 80085d4:	464a      	mov	r2, r9
 80085d6:	6921      	ldr	r1, [r4, #16]
 80085d8:	f000 fa14 	bl	8008a04 <memcpy>
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085e6:	81a3      	strh	r3, [r4, #12]
 80085e8:	6126      	str	r6, [r4, #16]
 80085ea:	444e      	add	r6, r9
 80085ec:	6026      	str	r6, [r4, #0]
 80085ee:	463e      	mov	r6, r7
 80085f0:	6165      	str	r5, [r4, #20]
 80085f2:	eba5 0509 	sub.w	r5, r5, r9
 80085f6:	60a5      	str	r5, [r4, #8]
 80085f8:	42be      	cmp	r6, r7
 80085fa:	d900      	bls.n	80085fe <__ssputs_r+0x72>
 80085fc:	463e      	mov	r6, r7
 80085fe:	4632      	mov	r2, r6
 8008600:	4641      	mov	r1, r8
 8008602:	6820      	ldr	r0, [r4, #0]
 8008604:	f000 f9c2 	bl	800898c <memmove>
 8008608:	2000      	movs	r0, #0
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	1b9b      	subs	r3, r3, r6
 800860e:	60a3      	str	r3, [r4, #8]
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	4433      	add	r3, r6
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800861a:	462a      	mov	r2, r5
 800861c:	f000 fd83 	bl	8009126 <_realloc_r>
 8008620:	4606      	mov	r6, r0
 8008622:	2800      	cmp	r0, #0
 8008624:	d1e0      	bne.n	80085e8 <__ssputs_r+0x5c>
 8008626:	4650      	mov	r0, sl
 8008628:	6921      	ldr	r1, [r4, #16]
 800862a:	f7fe fb95 	bl	8006d58 <_free_r>
 800862e:	230c      	movs	r3, #12
 8008630:	f8ca 3000 	str.w	r3, [sl]
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800863a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800863e:	81a3      	strh	r3, [r4, #12]
 8008640:	e7e9      	b.n	8008616 <__ssputs_r+0x8a>
	...

08008644 <_svfiprintf_r>:
 8008644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008648:	4698      	mov	r8, r3
 800864a:	898b      	ldrh	r3, [r1, #12]
 800864c:	4607      	mov	r7, r0
 800864e:	061b      	lsls	r3, r3, #24
 8008650:	460d      	mov	r5, r1
 8008652:	4614      	mov	r4, r2
 8008654:	b09d      	sub	sp, #116	@ 0x74
 8008656:	d510      	bpl.n	800867a <_svfiprintf_r+0x36>
 8008658:	690b      	ldr	r3, [r1, #16]
 800865a:	b973      	cbnz	r3, 800867a <_svfiprintf_r+0x36>
 800865c:	2140      	movs	r1, #64	@ 0x40
 800865e:	f7fe fbed 	bl	8006e3c <_malloc_r>
 8008662:	6028      	str	r0, [r5, #0]
 8008664:	6128      	str	r0, [r5, #16]
 8008666:	b930      	cbnz	r0, 8008676 <_svfiprintf_r+0x32>
 8008668:	230c      	movs	r3, #12
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008670:	b01d      	add	sp, #116	@ 0x74
 8008672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008676:	2340      	movs	r3, #64	@ 0x40
 8008678:	616b      	str	r3, [r5, #20]
 800867a:	2300      	movs	r3, #0
 800867c:	9309      	str	r3, [sp, #36]	@ 0x24
 800867e:	2320      	movs	r3, #32
 8008680:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008684:	2330      	movs	r3, #48	@ 0x30
 8008686:	f04f 0901 	mov.w	r9, #1
 800868a:	f8cd 800c 	str.w	r8, [sp, #12]
 800868e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008828 <_svfiprintf_r+0x1e4>
 8008692:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008696:	4623      	mov	r3, r4
 8008698:	469a      	mov	sl, r3
 800869a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800869e:	b10a      	cbz	r2, 80086a4 <_svfiprintf_r+0x60>
 80086a0:	2a25      	cmp	r2, #37	@ 0x25
 80086a2:	d1f9      	bne.n	8008698 <_svfiprintf_r+0x54>
 80086a4:	ebba 0b04 	subs.w	fp, sl, r4
 80086a8:	d00b      	beq.n	80086c2 <_svfiprintf_r+0x7e>
 80086aa:	465b      	mov	r3, fp
 80086ac:	4622      	mov	r2, r4
 80086ae:	4629      	mov	r1, r5
 80086b0:	4638      	mov	r0, r7
 80086b2:	f7ff ff6b 	bl	800858c <__ssputs_r>
 80086b6:	3001      	adds	r0, #1
 80086b8:	f000 80a7 	beq.w	800880a <_svfiprintf_r+0x1c6>
 80086bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086be:	445a      	add	r2, fp
 80086c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80086c2:	f89a 3000 	ldrb.w	r3, [sl]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 809f 	beq.w	800880a <_svfiprintf_r+0x1c6>
 80086cc:	2300      	movs	r3, #0
 80086ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086d6:	f10a 0a01 	add.w	sl, sl, #1
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	9307      	str	r3, [sp, #28]
 80086de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80086e4:	4654      	mov	r4, sl
 80086e6:	2205      	movs	r2, #5
 80086e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ec:	484e      	ldr	r0, [pc, #312]	@ (8008828 <_svfiprintf_r+0x1e4>)
 80086ee:	f7fd fcc2 	bl	8006076 <memchr>
 80086f2:	9a04      	ldr	r2, [sp, #16]
 80086f4:	b9d8      	cbnz	r0, 800872e <_svfiprintf_r+0xea>
 80086f6:	06d0      	lsls	r0, r2, #27
 80086f8:	bf44      	itt	mi
 80086fa:	2320      	movmi	r3, #32
 80086fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008700:	0711      	lsls	r1, r2, #28
 8008702:	bf44      	itt	mi
 8008704:	232b      	movmi	r3, #43	@ 0x2b
 8008706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800870a:	f89a 3000 	ldrb.w	r3, [sl]
 800870e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008710:	d015      	beq.n	800873e <_svfiprintf_r+0xfa>
 8008712:	4654      	mov	r4, sl
 8008714:	2000      	movs	r0, #0
 8008716:	f04f 0c0a 	mov.w	ip, #10
 800871a:	9a07      	ldr	r2, [sp, #28]
 800871c:	4621      	mov	r1, r4
 800871e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008722:	3b30      	subs	r3, #48	@ 0x30
 8008724:	2b09      	cmp	r3, #9
 8008726:	d94b      	bls.n	80087c0 <_svfiprintf_r+0x17c>
 8008728:	b1b0      	cbz	r0, 8008758 <_svfiprintf_r+0x114>
 800872a:	9207      	str	r2, [sp, #28]
 800872c:	e014      	b.n	8008758 <_svfiprintf_r+0x114>
 800872e:	eba0 0308 	sub.w	r3, r0, r8
 8008732:	fa09 f303 	lsl.w	r3, r9, r3
 8008736:	4313      	orrs	r3, r2
 8008738:	46a2      	mov	sl, r4
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	e7d2      	b.n	80086e4 <_svfiprintf_r+0xa0>
 800873e:	9b03      	ldr	r3, [sp, #12]
 8008740:	1d19      	adds	r1, r3, #4
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	9103      	str	r1, [sp, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	bfbb      	ittet	lt
 800874a:	425b      	neglt	r3, r3
 800874c:	f042 0202 	orrlt.w	r2, r2, #2
 8008750:	9307      	strge	r3, [sp, #28]
 8008752:	9307      	strlt	r3, [sp, #28]
 8008754:	bfb8      	it	lt
 8008756:	9204      	strlt	r2, [sp, #16]
 8008758:	7823      	ldrb	r3, [r4, #0]
 800875a:	2b2e      	cmp	r3, #46	@ 0x2e
 800875c:	d10a      	bne.n	8008774 <_svfiprintf_r+0x130>
 800875e:	7863      	ldrb	r3, [r4, #1]
 8008760:	2b2a      	cmp	r3, #42	@ 0x2a
 8008762:	d132      	bne.n	80087ca <_svfiprintf_r+0x186>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	3402      	adds	r4, #2
 8008768:	1d1a      	adds	r2, r3, #4
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	9203      	str	r2, [sp, #12]
 800876e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008772:	9305      	str	r3, [sp, #20]
 8008774:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800882c <_svfiprintf_r+0x1e8>
 8008778:	2203      	movs	r2, #3
 800877a:	4650      	mov	r0, sl
 800877c:	7821      	ldrb	r1, [r4, #0]
 800877e:	f7fd fc7a 	bl	8006076 <memchr>
 8008782:	b138      	cbz	r0, 8008794 <_svfiprintf_r+0x150>
 8008784:	2240      	movs	r2, #64	@ 0x40
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	eba0 000a 	sub.w	r0, r0, sl
 800878c:	4082      	lsls	r2, r0
 800878e:	4313      	orrs	r3, r2
 8008790:	3401      	adds	r4, #1
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008798:	2206      	movs	r2, #6
 800879a:	4825      	ldr	r0, [pc, #148]	@ (8008830 <_svfiprintf_r+0x1ec>)
 800879c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087a0:	f7fd fc69 	bl	8006076 <memchr>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d036      	beq.n	8008816 <_svfiprintf_r+0x1d2>
 80087a8:	4b22      	ldr	r3, [pc, #136]	@ (8008834 <_svfiprintf_r+0x1f0>)
 80087aa:	bb1b      	cbnz	r3, 80087f4 <_svfiprintf_r+0x1b0>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	3307      	adds	r3, #7
 80087b0:	f023 0307 	bic.w	r3, r3, #7
 80087b4:	3308      	adds	r3, #8
 80087b6:	9303      	str	r3, [sp, #12]
 80087b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ba:	4433      	add	r3, r6
 80087bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087be:	e76a      	b.n	8008696 <_svfiprintf_r+0x52>
 80087c0:	460c      	mov	r4, r1
 80087c2:	2001      	movs	r0, #1
 80087c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80087c8:	e7a8      	b.n	800871c <_svfiprintf_r+0xd8>
 80087ca:	2300      	movs	r3, #0
 80087cc:	f04f 0c0a 	mov.w	ip, #10
 80087d0:	4619      	mov	r1, r3
 80087d2:	3401      	adds	r4, #1
 80087d4:	9305      	str	r3, [sp, #20]
 80087d6:	4620      	mov	r0, r4
 80087d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087dc:	3a30      	subs	r2, #48	@ 0x30
 80087de:	2a09      	cmp	r2, #9
 80087e0:	d903      	bls.n	80087ea <_svfiprintf_r+0x1a6>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d0c6      	beq.n	8008774 <_svfiprintf_r+0x130>
 80087e6:	9105      	str	r1, [sp, #20]
 80087e8:	e7c4      	b.n	8008774 <_svfiprintf_r+0x130>
 80087ea:	4604      	mov	r4, r0
 80087ec:	2301      	movs	r3, #1
 80087ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80087f2:	e7f0      	b.n	80087d6 <_svfiprintf_r+0x192>
 80087f4:	ab03      	add	r3, sp, #12
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	462a      	mov	r2, r5
 80087fa:	4638      	mov	r0, r7
 80087fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008838 <_svfiprintf_r+0x1f4>)
 80087fe:	a904      	add	r1, sp, #16
 8008800:	f7fc fccc 	bl	800519c <_printf_float>
 8008804:	1c42      	adds	r2, r0, #1
 8008806:	4606      	mov	r6, r0
 8008808:	d1d6      	bne.n	80087b8 <_svfiprintf_r+0x174>
 800880a:	89ab      	ldrh	r3, [r5, #12]
 800880c:	065b      	lsls	r3, r3, #25
 800880e:	f53f af2d 	bmi.w	800866c <_svfiprintf_r+0x28>
 8008812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008814:	e72c      	b.n	8008670 <_svfiprintf_r+0x2c>
 8008816:	ab03      	add	r3, sp, #12
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	462a      	mov	r2, r5
 800881c:	4638      	mov	r0, r7
 800881e:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <_svfiprintf_r+0x1f4>)
 8008820:	a904      	add	r1, sp, #16
 8008822:	f7fc ff59 	bl	80056d8 <_printf_i>
 8008826:	e7ed      	b.n	8008804 <_svfiprintf_r+0x1c0>
 8008828:	08009907 	.word	0x08009907
 800882c:	0800990d 	.word	0x0800990d
 8008830:	08009911 	.word	0x08009911
 8008834:	0800519d 	.word	0x0800519d
 8008838:	0800858d 	.word	0x0800858d

0800883c <__sflush_r>:
 800883c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	0716      	lsls	r6, r2, #28
 8008844:	4605      	mov	r5, r0
 8008846:	460c      	mov	r4, r1
 8008848:	d454      	bmi.n	80088f4 <__sflush_r+0xb8>
 800884a:	684b      	ldr	r3, [r1, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	dc02      	bgt.n	8008856 <__sflush_r+0x1a>
 8008850:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008852:	2b00      	cmp	r3, #0
 8008854:	dd48      	ble.n	80088e8 <__sflush_r+0xac>
 8008856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008858:	2e00      	cmp	r6, #0
 800885a:	d045      	beq.n	80088e8 <__sflush_r+0xac>
 800885c:	2300      	movs	r3, #0
 800885e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008862:	682f      	ldr	r7, [r5, #0]
 8008864:	6a21      	ldr	r1, [r4, #32]
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	d030      	beq.n	80088cc <__sflush_r+0x90>
 800886a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	0759      	lsls	r1, r3, #29
 8008870:	d505      	bpl.n	800887e <__sflush_r+0x42>
 8008872:	6863      	ldr	r3, [r4, #4]
 8008874:	1ad2      	subs	r2, r2, r3
 8008876:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008878:	b10b      	cbz	r3, 800887e <__sflush_r+0x42>
 800887a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800887c:	1ad2      	subs	r2, r2, r3
 800887e:	2300      	movs	r3, #0
 8008880:	4628      	mov	r0, r5
 8008882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008884:	6a21      	ldr	r1, [r4, #32]
 8008886:	47b0      	blx	r6
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	d106      	bne.n	800889c <__sflush_r+0x60>
 800888e:	6829      	ldr	r1, [r5, #0]
 8008890:	291d      	cmp	r1, #29
 8008892:	d82b      	bhi.n	80088ec <__sflush_r+0xb0>
 8008894:	4a28      	ldr	r2, [pc, #160]	@ (8008938 <__sflush_r+0xfc>)
 8008896:	40ca      	lsrs	r2, r1
 8008898:	07d6      	lsls	r6, r2, #31
 800889a:	d527      	bpl.n	80088ec <__sflush_r+0xb0>
 800889c:	2200      	movs	r2, #0
 800889e:	6062      	str	r2, [r4, #4]
 80088a0:	6922      	ldr	r2, [r4, #16]
 80088a2:	04d9      	lsls	r1, r3, #19
 80088a4:	6022      	str	r2, [r4, #0]
 80088a6:	d504      	bpl.n	80088b2 <__sflush_r+0x76>
 80088a8:	1c42      	adds	r2, r0, #1
 80088aa:	d101      	bne.n	80088b0 <__sflush_r+0x74>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b903      	cbnz	r3, 80088b2 <__sflush_r+0x76>
 80088b0:	6560      	str	r0, [r4, #84]	@ 0x54
 80088b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088b4:	602f      	str	r7, [r5, #0]
 80088b6:	b1b9      	cbz	r1, 80088e8 <__sflush_r+0xac>
 80088b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088bc:	4299      	cmp	r1, r3
 80088be:	d002      	beq.n	80088c6 <__sflush_r+0x8a>
 80088c0:	4628      	mov	r0, r5
 80088c2:	f7fe fa49 	bl	8006d58 <_free_r>
 80088c6:	2300      	movs	r3, #0
 80088c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80088ca:	e00d      	b.n	80088e8 <__sflush_r+0xac>
 80088cc:	2301      	movs	r3, #1
 80088ce:	4628      	mov	r0, r5
 80088d0:	47b0      	blx	r6
 80088d2:	4602      	mov	r2, r0
 80088d4:	1c50      	adds	r0, r2, #1
 80088d6:	d1c9      	bne.n	800886c <__sflush_r+0x30>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0c6      	beq.n	800886c <__sflush_r+0x30>
 80088de:	2b1d      	cmp	r3, #29
 80088e0:	d001      	beq.n	80088e6 <__sflush_r+0xaa>
 80088e2:	2b16      	cmp	r3, #22
 80088e4:	d11d      	bne.n	8008922 <__sflush_r+0xe6>
 80088e6:	602f      	str	r7, [r5, #0]
 80088e8:	2000      	movs	r0, #0
 80088ea:	e021      	b.n	8008930 <__sflush_r+0xf4>
 80088ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088f0:	b21b      	sxth	r3, r3
 80088f2:	e01a      	b.n	800892a <__sflush_r+0xee>
 80088f4:	690f      	ldr	r7, [r1, #16]
 80088f6:	2f00      	cmp	r7, #0
 80088f8:	d0f6      	beq.n	80088e8 <__sflush_r+0xac>
 80088fa:	0793      	lsls	r3, r2, #30
 80088fc:	bf18      	it	ne
 80088fe:	2300      	movne	r3, #0
 8008900:	680e      	ldr	r6, [r1, #0]
 8008902:	bf08      	it	eq
 8008904:	694b      	ldreq	r3, [r1, #20]
 8008906:	1bf6      	subs	r6, r6, r7
 8008908:	600f      	str	r7, [r1, #0]
 800890a:	608b      	str	r3, [r1, #8]
 800890c:	2e00      	cmp	r6, #0
 800890e:	ddeb      	ble.n	80088e8 <__sflush_r+0xac>
 8008910:	4633      	mov	r3, r6
 8008912:	463a      	mov	r2, r7
 8008914:	4628      	mov	r0, r5
 8008916:	6a21      	ldr	r1, [r4, #32]
 8008918:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800891c:	47e0      	blx	ip
 800891e:	2800      	cmp	r0, #0
 8008920:	dc07      	bgt.n	8008932 <__sflush_r+0xf6>
 8008922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800892a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008932:	4407      	add	r7, r0
 8008934:	1a36      	subs	r6, r6, r0
 8008936:	e7e9      	b.n	800890c <__sflush_r+0xd0>
 8008938:	20400001 	.word	0x20400001

0800893c <_fflush_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	690b      	ldr	r3, [r1, #16]
 8008940:	4605      	mov	r5, r0
 8008942:	460c      	mov	r4, r1
 8008944:	b913      	cbnz	r3, 800894c <_fflush_r+0x10>
 8008946:	2500      	movs	r5, #0
 8008948:	4628      	mov	r0, r5
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	b118      	cbz	r0, 8008956 <_fflush_r+0x1a>
 800894e:	6a03      	ldr	r3, [r0, #32]
 8008950:	b90b      	cbnz	r3, 8008956 <_fflush_r+0x1a>
 8008952:	f7fd fa75 	bl	8005e40 <__sinit>
 8008956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0f3      	beq.n	8008946 <_fflush_r+0xa>
 800895e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008960:	07d0      	lsls	r0, r2, #31
 8008962:	d404      	bmi.n	800896e <_fflush_r+0x32>
 8008964:	0599      	lsls	r1, r3, #22
 8008966:	d402      	bmi.n	800896e <_fflush_r+0x32>
 8008968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800896a:	f7fd fb82 	bl	8006072 <__retarget_lock_acquire_recursive>
 800896e:	4628      	mov	r0, r5
 8008970:	4621      	mov	r1, r4
 8008972:	f7ff ff63 	bl	800883c <__sflush_r>
 8008976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008978:	4605      	mov	r5, r0
 800897a:	07da      	lsls	r2, r3, #31
 800897c:	d4e4      	bmi.n	8008948 <_fflush_r+0xc>
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	059b      	lsls	r3, r3, #22
 8008982:	d4e1      	bmi.n	8008948 <_fflush_r+0xc>
 8008984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008986:	f7fd fb75 	bl	8006074 <__retarget_lock_release_recursive>
 800898a:	e7dd      	b.n	8008948 <_fflush_r+0xc>

0800898c <memmove>:
 800898c:	4288      	cmp	r0, r1
 800898e:	b510      	push	{r4, lr}
 8008990:	eb01 0402 	add.w	r4, r1, r2
 8008994:	d902      	bls.n	800899c <memmove+0x10>
 8008996:	4284      	cmp	r4, r0
 8008998:	4623      	mov	r3, r4
 800899a:	d807      	bhi.n	80089ac <memmove+0x20>
 800899c:	1e43      	subs	r3, r0, #1
 800899e:	42a1      	cmp	r1, r4
 80089a0:	d008      	beq.n	80089b4 <memmove+0x28>
 80089a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089aa:	e7f8      	b.n	800899e <memmove+0x12>
 80089ac:	4601      	mov	r1, r0
 80089ae:	4402      	add	r2, r0
 80089b0:	428a      	cmp	r2, r1
 80089b2:	d100      	bne.n	80089b6 <memmove+0x2a>
 80089b4:	bd10      	pop	{r4, pc}
 80089b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089be:	e7f7      	b.n	80089b0 <memmove+0x24>

080089c0 <strncmp>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	b16a      	cbz	r2, 80089e0 <strncmp+0x20>
 80089c4:	3901      	subs	r1, #1
 80089c6:	1884      	adds	r4, r0, r2
 80089c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d103      	bne.n	80089dc <strncmp+0x1c>
 80089d4:	42a0      	cmp	r0, r4
 80089d6:	d001      	beq.n	80089dc <strncmp+0x1c>
 80089d8:	2a00      	cmp	r2, #0
 80089da:	d1f5      	bne.n	80089c8 <strncmp+0x8>
 80089dc:	1ad0      	subs	r0, r2, r3
 80089de:	bd10      	pop	{r4, pc}
 80089e0:	4610      	mov	r0, r2
 80089e2:	e7fc      	b.n	80089de <strncmp+0x1e>

080089e4 <_sbrk_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	2300      	movs	r3, #0
 80089e8:	4d05      	ldr	r5, [pc, #20]	@ (8008a00 <_sbrk_r+0x1c>)
 80089ea:	4604      	mov	r4, r0
 80089ec:	4608      	mov	r0, r1
 80089ee:	602b      	str	r3, [r5, #0]
 80089f0:	f7f8 ff1e 	bl	8001830 <_sbrk>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d102      	bne.n	80089fe <_sbrk_r+0x1a>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	b103      	cbz	r3, 80089fe <_sbrk_r+0x1a>
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	20000468 	.word	0x20000468

08008a04 <memcpy>:
 8008a04:	440a      	add	r2, r1
 8008a06:	4291      	cmp	r1, r2
 8008a08:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008a0c:	d100      	bne.n	8008a10 <memcpy+0xc>
 8008a0e:	4770      	bx	lr
 8008a10:	b510      	push	{r4, lr}
 8008a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a16:	4291      	cmp	r1, r2
 8008a18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a1c:	d1f9      	bne.n	8008a12 <memcpy+0xe>
 8008a1e:	bd10      	pop	{r4, pc}

08008a20 <nan>:
 8008a20:	2000      	movs	r0, #0
 8008a22:	4901      	ldr	r1, [pc, #4]	@ (8008a28 <nan+0x8>)
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	7ff80000 	.word	0x7ff80000

08008a2c <__assert_func>:
 8008a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a2e:	4614      	mov	r4, r2
 8008a30:	461a      	mov	r2, r3
 8008a32:	4b09      	ldr	r3, [pc, #36]	@ (8008a58 <__assert_func+0x2c>)
 8008a34:	4605      	mov	r5, r0
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68d8      	ldr	r0, [r3, #12]
 8008a3a:	b14c      	cbz	r4, 8008a50 <__assert_func+0x24>
 8008a3c:	4b07      	ldr	r3, [pc, #28]	@ (8008a5c <__assert_func+0x30>)
 8008a3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a42:	9100      	str	r1, [sp, #0]
 8008a44:	462b      	mov	r3, r5
 8008a46:	4906      	ldr	r1, [pc, #24]	@ (8008a60 <__assert_func+0x34>)
 8008a48:	f000 fba8 	bl	800919c <fiprintf>
 8008a4c:	f000 fbb8 	bl	80091c0 <abort>
 8008a50:	4b04      	ldr	r3, [pc, #16]	@ (8008a64 <__assert_func+0x38>)
 8008a52:	461c      	mov	r4, r3
 8008a54:	e7f3      	b.n	8008a3e <__assert_func+0x12>
 8008a56:	bf00      	nop
 8008a58:	2000001c 	.word	0x2000001c
 8008a5c:	08009920 	.word	0x08009920
 8008a60:	0800992d 	.word	0x0800992d
 8008a64:	0800995b 	.word	0x0800995b

08008a68 <_calloc_r>:
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	fba1 5402 	umull	r5, r4, r1, r2
 8008a6e:	b934      	cbnz	r4, 8008a7e <_calloc_r+0x16>
 8008a70:	4629      	mov	r1, r5
 8008a72:	f7fe f9e3 	bl	8006e3c <_malloc_r>
 8008a76:	4606      	mov	r6, r0
 8008a78:	b928      	cbnz	r0, 8008a86 <_calloc_r+0x1e>
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	220c      	movs	r2, #12
 8008a80:	2600      	movs	r6, #0
 8008a82:	6002      	str	r2, [r0, #0]
 8008a84:	e7f9      	b.n	8008a7a <_calloc_r+0x12>
 8008a86:	462a      	mov	r2, r5
 8008a88:	4621      	mov	r1, r4
 8008a8a:	f7fd fa74 	bl	8005f76 <memset>
 8008a8e:	e7f4      	b.n	8008a7a <_calloc_r+0x12>

08008a90 <rshift>:
 8008a90:	6903      	ldr	r3, [r0, #16]
 8008a92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a9a:	f100 0414 	add.w	r4, r0, #20
 8008a9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008aa2:	dd46      	ble.n	8008b32 <rshift+0xa2>
 8008aa4:	f011 011f 	ands.w	r1, r1, #31
 8008aa8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008aac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ab0:	d10c      	bne.n	8008acc <rshift+0x3c>
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	f100 0710 	add.w	r7, r0, #16
 8008ab8:	42b1      	cmp	r1, r6
 8008aba:	d335      	bcc.n	8008b28 <rshift+0x98>
 8008abc:	1a9b      	subs	r3, r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	1eea      	subs	r2, r5, #3
 8008ac2:	4296      	cmp	r6, r2
 8008ac4:	bf38      	it	cc
 8008ac6:	2300      	movcc	r3, #0
 8008ac8:	4423      	add	r3, r4
 8008aca:	e015      	b.n	8008af8 <rshift+0x68>
 8008acc:	46a1      	mov	r9, r4
 8008ace:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ad2:	f1c1 0820 	rsb	r8, r1, #32
 8008ad6:	40cf      	lsrs	r7, r1
 8008ad8:	f105 0e04 	add.w	lr, r5, #4
 8008adc:	4576      	cmp	r6, lr
 8008ade:	46f4      	mov	ip, lr
 8008ae0:	d816      	bhi.n	8008b10 <rshift+0x80>
 8008ae2:	1a9a      	subs	r2, r3, r2
 8008ae4:	0092      	lsls	r2, r2, #2
 8008ae6:	3a04      	subs	r2, #4
 8008ae8:	3501      	adds	r5, #1
 8008aea:	42ae      	cmp	r6, r5
 8008aec:	bf38      	it	cc
 8008aee:	2200      	movcc	r2, #0
 8008af0:	18a3      	adds	r3, r4, r2
 8008af2:	50a7      	str	r7, [r4, r2]
 8008af4:	b107      	cbz	r7, 8008af8 <rshift+0x68>
 8008af6:	3304      	adds	r3, #4
 8008af8:	42a3      	cmp	r3, r4
 8008afa:	eba3 0204 	sub.w	r2, r3, r4
 8008afe:	bf08      	it	eq
 8008b00:	2300      	moveq	r3, #0
 8008b02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b06:	6102      	str	r2, [r0, #16]
 8008b08:	bf08      	it	eq
 8008b0a:	6143      	streq	r3, [r0, #20]
 8008b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b10:	f8dc c000 	ldr.w	ip, [ip]
 8008b14:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b18:	ea4c 0707 	orr.w	r7, ip, r7
 8008b1c:	f849 7b04 	str.w	r7, [r9], #4
 8008b20:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b24:	40cf      	lsrs	r7, r1
 8008b26:	e7d9      	b.n	8008adc <rshift+0x4c>
 8008b28:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b2c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b30:	e7c2      	b.n	8008ab8 <rshift+0x28>
 8008b32:	4623      	mov	r3, r4
 8008b34:	e7e0      	b.n	8008af8 <rshift+0x68>

08008b36 <__hexdig_fun>:
 8008b36:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b3a:	2b09      	cmp	r3, #9
 8008b3c:	d802      	bhi.n	8008b44 <__hexdig_fun+0xe>
 8008b3e:	3820      	subs	r0, #32
 8008b40:	b2c0      	uxtb	r0, r0
 8008b42:	4770      	bx	lr
 8008b44:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008b48:	2b05      	cmp	r3, #5
 8008b4a:	d801      	bhi.n	8008b50 <__hexdig_fun+0x1a>
 8008b4c:	3847      	subs	r0, #71	@ 0x47
 8008b4e:	e7f7      	b.n	8008b40 <__hexdig_fun+0xa>
 8008b50:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008b54:	2b05      	cmp	r3, #5
 8008b56:	d801      	bhi.n	8008b5c <__hexdig_fun+0x26>
 8008b58:	3827      	subs	r0, #39	@ 0x27
 8008b5a:	e7f1      	b.n	8008b40 <__hexdig_fun+0xa>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	4770      	bx	lr

08008b60 <__gethex>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	468a      	mov	sl, r1
 8008b66:	4690      	mov	r8, r2
 8008b68:	b085      	sub	sp, #20
 8008b6a:	9302      	str	r3, [sp, #8]
 8008b6c:	680b      	ldr	r3, [r1, #0]
 8008b6e:	9001      	str	r0, [sp, #4]
 8008b70:	1c9c      	adds	r4, r3, #2
 8008b72:	46a1      	mov	r9, r4
 8008b74:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008b78:	2830      	cmp	r0, #48	@ 0x30
 8008b7a:	d0fa      	beq.n	8008b72 <__gethex+0x12>
 8008b7c:	eba9 0303 	sub.w	r3, r9, r3
 8008b80:	f1a3 0b02 	sub.w	fp, r3, #2
 8008b84:	f7ff ffd7 	bl	8008b36 <__hexdig_fun>
 8008b88:	4605      	mov	r5, r0
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d168      	bne.n	8008c60 <__gethex+0x100>
 8008b8e:	2201      	movs	r2, #1
 8008b90:	4648      	mov	r0, r9
 8008b92:	499f      	ldr	r1, [pc, #636]	@ (8008e10 <__gethex+0x2b0>)
 8008b94:	f7ff ff14 	bl	80089c0 <strncmp>
 8008b98:	4607      	mov	r7, r0
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d167      	bne.n	8008c6e <__gethex+0x10e>
 8008b9e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008ba2:	4626      	mov	r6, r4
 8008ba4:	f7ff ffc7 	bl	8008b36 <__hexdig_fun>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d062      	beq.n	8008c72 <__gethex+0x112>
 8008bac:	4623      	mov	r3, r4
 8008bae:	7818      	ldrb	r0, [r3, #0]
 8008bb0:	4699      	mov	r9, r3
 8008bb2:	2830      	cmp	r0, #48	@ 0x30
 8008bb4:	f103 0301 	add.w	r3, r3, #1
 8008bb8:	d0f9      	beq.n	8008bae <__gethex+0x4e>
 8008bba:	f7ff ffbc 	bl	8008b36 <__hexdig_fun>
 8008bbe:	fab0 f580 	clz	r5, r0
 8008bc2:	f04f 0b01 	mov.w	fp, #1
 8008bc6:	096d      	lsrs	r5, r5, #5
 8008bc8:	464a      	mov	r2, r9
 8008bca:	4616      	mov	r6, r2
 8008bcc:	7830      	ldrb	r0, [r6, #0]
 8008bce:	3201      	adds	r2, #1
 8008bd0:	f7ff ffb1 	bl	8008b36 <__hexdig_fun>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1f8      	bne.n	8008bca <__gethex+0x6a>
 8008bd8:	2201      	movs	r2, #1
 8008bda:	4630      	mov	r0, r6
 8008bdc:	498c      	ldr	r1, [pc, #560]	@ (8008e10 <__gethex+0x2b0>)
 8008bde:	f7ff feef 	bl	80089c0 <strncmp>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d13f      	bne.n	8008c66 <__gethex+0x106>
 8008be6:	b944      	cbnz	r4, 8008bfa <__gethex+0x9a>
 8008be8:	1c74      	adds	r4, r6, #1
 8008bea:	4622      	mov	r2, r4
 8008bec:	4616      	mov	r6, r2
 8008bee:	7830      	ldrb	r0, [r6, #0]
 8008bf0:	3201      	adds	r2, #1
 8008bf2:	f7ff ffa0 	bl	8008b36 <__hexdig_fun>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d1f8      	bne.n	8008bec <__gethex+0x8c>
 8008bfa:	1ba4      	subs	r4, r4, r6
 8008bfc:	00a7      	lsls	r7, r4, #2
 8008bfe:	7833      	ldrb	r3, [r6, #0]
 8008c00:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008c04:	2b50      	cmp	r3, #80	@ 0x50
 8008c06:	d13e      	bne.n	8008c86 <__gethex+0x126>
 8008c08:	7873      	ldrb	r3, [r6, #1]
 8008c0a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008c0c:	d033      	beq.n	8008c76 <__gethex+0x116>
 8008c0e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008c10:	d034      	beq.n	8008c7c <__gethex+0x11c>
 8008c12:	2400      	movs	r4, #0
 8008c14:	1c71      	adds	r1, r6, #1
 8008c16:	7808      	ldrb	r0, [r1, #0]
 8008c18:	f7ff ff8d 	bl	8008b36 <__hexdig_fun>
 8008c1c:	1e43      	subs	r3, r0, #1
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b18      	cmp	r3, #24
 8008c22:	d830      	bhi.n	8008c86 <__gethex+0x126>
 8008c24:	f1a0 0210 	sub.w	r2, r0, #16
 8008c28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c2c:	f7ff ff83 	bl	8008b36 <__hexdig_fun>
 8008c30:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008c34:	fa5f fc8c 	uxtb.w	ip, ip
 8008c38:	f1bc 0f18 	cmp.w	ip, #24
 8008c3c:	f04f 030a 	mov.w	r3, #10
 8008c40:	d91e      	bls.n	8008c80 <__gethex+0x120>
 8008c42:	b104      	cbz	r4, 8008c46 <__gethex+0xe6>
 8008c44:	4252      	negs	r2, r2
 8008c46:	4417      	add	r7, r2
 8008c48:	f8ca 1000 	str.w	r1, [sl]
 8008c4c:	b1ed      	cbz	r5, 8008c8a <__gethex+0x12a>
 8008c4e:	f1bb 0f00 	cmp.w	fp, #0
 8008c52:	bf0c      	ite	eq
 8008c54:	2506      	moveq	r5, #6
 8008c56:	2500      	movne	r5, #0
 8008c58:	4628      	mov	r0, r5
 8008c5a:	b005      	add	sp, #20
 8008c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c60:	2500      	movs	r5, #0
 8008c62:	462c      	mov	r4, r5
 8008c64:	e7b0      	b.n	8008bc8 <__gethex+0x68>
 8008c66:	2c00      	cmp	r4, #0
 8008c68:	d1c7      	bne.n	8008bfa <__gethex+0x9a>
 8008c6a:	4627      	mov	r7, r4
 8008c6c:	e7c7      	b.n	8008bfe <__gethex+0x9e>
 8008c6e:	464e      	mov	r6, r9
 8008c70:	462f      	mov	r7, r5
 8008c72:	2501      	movs	r5, #1
 8008c74:	e7c3      	b.n	8008bfe <__gethex+0x9e>
 8008c76:	2400      	movs	r4, #0
 8008c78:	1cb1      	adds	r1, r6, #2
 8008c7a:	e7cc      	b.n	8008c16 <__gethex+0xb6>
 8008c7c:	2401      	movs	r4, #1
 8008c7e:	e7fb      	b.n	8008c78 <__gethex+0x118>
 8008c80:	fb03 0002 	mla	r0, r3, r2, r0
 8008c84:	e7ce      	b.n	8008c24 <__gethex+0xc4>
 8008c86:	4631      	mov	r1, r6
 8008c88:	e7de      	b.n	8008c48 <__gethex+0xe8>
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	eba6 0309 	sub.w	r3, r6, r9
 8008c90:	3b01      	subs	r3, #1
 8008c92:	2b07      	cmp	r3, #7
 8008c94:	dc0a      	bgt.n	8008cac <__gethex+0x14c>
 8008c96:	9801      	ldr	r0, [sp, #4]
 8008c98:	f7fe f95c 	bl	8006f54 <_Balloc>
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	b940      	cbnz	r0, 8008cb2 <__gethex+0x152>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	21e4      	movs	r1, #228	@ 0xe4
 8008ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8008e14 <__gethex+0x2b4>)
 8008ca6:	485c      	ldr	r0, [pc, #368]	@ (8008e18 <__gethex+0x2b8>)
 8008ca8:	f7ff fec0 	bl	8008a2c <__assert_func>
 8008cac:	3101      	adds	r1, #1
 8008cae:	105b      	asrs	r3, r3, #1
 8008cb0:	e7ef      	b.n	8008c92 <__gethex+0x132>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f100 0a14 	add.w	sl, r0, #20
 8008cb8:	4655      	mov	r5, sl
 8008cba:	469b      	mov	fp, r3
 8008cbc:	45b1      	cmp	r9, r6
 8008cbe:	d337      	bcc.n	8008d30 <__gethex+0x1d0>
 8008cc0:	f845 bb04 	str.w	fp, [r5], #4
 8008cc4:	eba5 050a 	sub.w	r5, r5, sl
 8008cc8:	10ad      	asrs	r5, r5, #2
 8008cca:	6125      	str	r5, [r4, #16]
 8008ccc:	4658      	mov	r0, fp
 8008cce:	f7fe fa33 	bl	8007138 <__hi0bits>
 8008cd2:	016d      	lsls	r5, r5, #5
 8008cd4:	f8d8 6000 	ldr.w	r6, [r8]
 8008cd8:	1a2d      	subs	r5, r5, r0
 8008cda:	42b5      	cmp	r5, r6
 8008cdc:	dd54      	ble.n	8008d88 <__gethex+0x228>
 8008cde:	1bad      	subs	r5, r5, r6
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7fe fdb5 	bl	8007852 <__any_on>
 8008ce8:	4681      	mov	r9, r0
 8008cea:	b178      	cbz	r0, 8008d0c <__gethex+0x1ac>
 8008cec:	f04f 0901 	mov.w	r9, #1
 8008cf0:	1e6b      	subs	r3, r5, #1
 8008cf2:	1159      	asrs	r1, r3, #5
 8008cf4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008cf8:	f003 021f 	and.w	r2, r3, #31
 8008cfc:	fa09 f202 	lsl.w	r2, r9, r2
 8008d00:	420a      	tst	r2, r1
 8008d02:	d003      	beq.n	8008d0c <__gethex+0x1ac>
 8008d04:	454b      	cmp	r3, r9
 8008d06:	dc36      	bgt.n	8008d76 <__gethex+0x216>
 8008d08:	f04f 0902 	mov.w	r9, #2
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7ff febe 	bl	8008a90 <rshift>
 8008d14:	442f      	add	r7, r5
 8008d16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	da42      	bge.n	8008da4 <__gethex+0x244>
 8008d1e:	4621      	mov	r1, r4
 8008d20:	9801      	ldr	r0, [sp, #4]
 8008d22:	f7fe f957 	bl	8006fd4 <_Bfree>
 8008d26:	2300      	movs	r3, #0
 8008d28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d2a:	25a3      	movs	r5, #163	@ 0xa3
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	e793      	b.n	8008c58 <__gethex+0xf8>
 8008d30:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d34:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d36:	d012      	beq.n	8008d5e <__gethex+0x1fe>
 8008d38:	2b20      	cmp	r3, #32
 8008d3a:	d104      	bne.n	8008d46 <__gethex+0x1e6>
 8008d3c:	f845 bb04 	str.w	fp, [r5], #4
 8008d40:	f04f 0b00 	mov.w	fp, #0
 8008d44:	465b      	mov	r3, fp
 8008d46:	7830      	ldrb	r0, [r6, #0]
 8008d48:	9303      	str	r3, [sp, #12]
 8008d4a:	f7ff fef4 	bl	8008b36 <__hexdig_fun>
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	f000 000f 	and.w	r0, r0, #15
 8008d54:	4098      	lsls	r0, r3
 8008d56:	ea4b 0b00 	orr.w	fp, fp, r0
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	e7ae      	b.n	8008cbc <__gethex+0x15c>
 8008d5e:	45b1      	cmp	r9, r6
 8008d60:	d8ea      	bhi.n	8008d38 <__gethex+0x1d8>
 8008d62:	2201      	movs	r2, #1
 8008d64:	4630      	mov	r0, r6
 8008d66:	492a      	ldr	r1, [pc, #168]	@ (8008e10 <__gethex+0x2b0>)
 8008d68:	9303      	str	r3, [sp, #12]
 8008d6a:	f7ff fe29 	bl	80089c0 <strncmp>
 8008d6e:	9b03      	ldr	r3, [sp, #12]
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d1e1      	bne.n	8008d38 <__gethex+0x1d8>
 8008d74:	e7a2      	b.n	8008cbc <__gethex+0x15c>
 8008d76:	4620      	mov	r0, r4
 8008d78:	1ea9      	subs	r1, r5, #2
 8008d7a:	f7fe fd6a 	bl	8007852 <__any_on>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d0c2      	beq.n	8008d08 <__gethex+0x1a8>
 8008d82:	f04f 0903 	mov.w	r9, #3
 8008d86:	e7c1      	b.n	8008d0c <__gethex+0x1ac>
 8008d88:	da09      	bge.n	8008d9e <__gethex+0x23e>
 8008d8a:	1b75      	subs	r5, r6, r5
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	462a      	mov	r2, r5
 8008d90:	9801      	ldr	r0, [sp, #4]
 8008d92:	f7fe fb2f 	bl	80073f4 <__lshift>
 8008d96:	4604      	mov	r4, r0
 8008d98:	1b7f      	subs	r7, r7, r5
 8008d9a:	f100 0a14 	add.w	sl, r0, #20
 8008d9e:	f04f 0900 	mov.w	r9, #0
 8008da2:	e7b8      	b.n	8008d16 <__gethex+0x1b6>
 8008da4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008da8:	42bd      	cmp	r5, r7
 8008daa:	dd6f      	ble.n	8008e8c <__gethex+0x32c>
 8008dac:	1bed      	subs	r5, r5, r7
 8008dae:	42ae      	cmp	r6, r5
 8008db0:	dc34      	bgt.n	8008e1c <__gethex+0x2bc>
 8008db2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d022      	beq.n	8008e00 <__gethex+0x2a0>
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d024      	beq.n	8008e08 <__gethex+0x2a8>
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d115      	bne.n	8008dee <__gethex+0x28e>
 8008dc2:	42ae      	cmp	r6, r5
 8008dc4:	d113      	bne.n	8008dee <__gethex+0x28e>
 8008dc6:	2e01      	cmp	r6, #1
 8008dc8:	d10b      	bne.n	8008de2 <__gethex+0x282>
 8008dca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008dce:	9a02      	ldr	r2, [sp, #8]
 8008dd0:	2562      	movs	r5, #98	@ 0x62
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	6123      	str	r3, [r4, #16]
 8008dd8:	f8ca 3000 	str.w	r3, [sl]
 8008ddc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dde:	601c      	str	r4, [r3, #0]
 8008de0:	e73a      	b.n	8008c58 <__gethex+0xf8>
 8008de2:	4620      	mov	r0, r4
 8008de4:	1e71      	subs	r1, r6, #1
 8008de6:	f7fe fd34 	bl	8007852 <__any_on>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d1ed      	bne.n	8008dca <__gethex+0x26a>
 8008dee:	4621      	mov	r1, r4
 8008df0:	9801      	ldr	r0, [sp, #4]
 8008df2:	f7fe f8ef 	bl	8006fd4 <_Bfree>
 8008df6:	2300      	movs	r3, #0
 8008df8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dfa:	2550      	movs	r5, #80	@ 0x50
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	e72b      	b.n	8008c58 <__gethex+0xf8>
 8008e00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1f3      	bne.n	8008dee <__gethex+0x28e>
 8008e06:	e7e0      	b.n	8008dca <__gethex+0x26a>
 8008e08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1dd      	bne.n	8008dca <__gethex+0x26a>
 8008e0e:	e7ee      	b.n	8008dee <__gethex+0x28e>
 8008e10:	08009905 	.word	0x08009905
 8008e14:	0800989b 	.word	0x0800989b
 8008e18:	0800995c 	.word	0x0800995c
 8008e1c:	1e6f      	subs	r7, r5, #1
 8008e1e:	f1b9 0f00 	cmp.w	r9, #0
 8008e22:	d130      	bne.n	8008e86 <__gethex+0x326>
 8008e24:	b127      	cbz	r7, 8008e30 <__gethex+0x2d0>
 8008e26:	4639      	mov	r1, r7
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f7fe fd12 	bl	8007852 <__any_on>
 8008e2e:	4681      	mov	r9, r0
 8008e30:	2301      	movs	r3, #1
 8008e32:	4629      	mov	r1, r5
 8008e34:	1b76      	subs	r6, r6, r5
 8008e36:	2502      	movs	r5, #2
 8008e38:	117a      	asrs	r2, r7, #5
 8008e3a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e3e:	f007 071f 	and.w	r7, r7, #31
 8008e42:	40bb      	lsls	r3, r7
 8008e44:	4213      	tst	r3, r2
 8008e46:	4620      	mov	r0, r4
 8008e48:	bf18      	it	ne
 8008e4a:	f049 0902 	orrne.w	r9, r9, #2
 8008e4e:	f7ff fe1f 	bl	8008a90 <rshift>
 8008e52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008e56:	f1b9 0f00 	cmp.w	r9, #0
 8008e5a:	d047      	beq.n	8008eec <__gethex+0x38c>
 8008e5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d015      	beq.n	8008e90 <__gethex+0x330>
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d017      	beq.n	8008e98 <__gethex+0x338>
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d109      	bne.n	8008e80 <__gethex+0x320>
 8008e6c:	f019 0f02 	tst.w	r9, #2
 8008e70:	d006      	beq.n	8008e80 <__gethex+0x320>
 8008e72:	f8da 3000 	ldr.w	r3, [sl]
 8008e76:	ea49 0903 	orr.w	r9, r9, r3
 8008e7a:	f019 0f01 	tst.w	r9, #1
 8008e7e:	d10e      	bne.n	8008e9e <__gethex+0x33e>
 8008e80:	f045 0510 	orr.w	r5, r5, #16
 8008e84:	e032      	b.n	8008eec <__gethex+0x38c>
 8008e86:	f04f 0901 	mov.w	r9, #1
 8008e8a:	e7d1      	b.n	8008e30 <__gethex+0x2d0>
 8008e8c:	2501      	movs	r5, #1
 8008e8e:	e7e2      	b.n	8008e56 <__gethex+0x2f6>
 8008e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e92:	f1c3 0301 	rsb	r3, r3, #1
 8008e96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0f0      	beq.n	8008e80 <__gethex+0x320>
 8008e9e:	f04f 0c00 	mov.w	ip, #0
 8008ea2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ea6:	f104 0314 	add.w	r3, r4, #20
 8008eaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008eae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008ebc:	d01b      	beq.n	8008ef6 <__gethex+0x396>
 8008ebe:	3201      	adds	r2, #1
 8008ec0:	6002      	str	r2, [r0, #0]
 8008ec2:	2d02      	cmp	r5, #2
 8008ec4:	f104 0314 	add.w	r3, r4, #20
 8008ec8:	d13c      	bne.n	8008f44 <__gethex+0x3e4>
 8008eca:	f8d8 2000 	ldr.w	r2, [r8]
 8008ece:	3a01      	subs	r2, #1
 8008ed0:	42b2      	cmp	r2, r6
 8008ed2:	d109      	bne.n	8008ee8 <__gethex+0x388>
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	1171      	asrs	r1, r6, #5
 8008ed8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008edc:	f006 061f 	and.w	r6, r6, #31
 8008ee0:	fa02 f606 	lsl.w	r6, r2, r6
 8008ee4:	421e      	tst	r6, r3
 8008ee6:	d13a      	bne.n	8008f5e <__gethex+0x3fe>
 8008ee8:	f045 0520 	orr.w	r5, r5, #32
 8008eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eee:	601c      	str	r4, [r3, #0]
 8008ef0:	9b02      	ldr	r3, [sp, #8]
 8008ef2:	601f      	str	r7, [r3, #0]
 8008ef4:	e6b0      	b.n	8008c58 <__gethex+0xf8>
 8008ef6:	4299      	cmp	r1, r3
 8008ef8:	f843 cc04 	str.w	ip, [r3, #-4]
 8008efc:	d8d9      	bhi.n	8008eb2 <__gethex+0x352>
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	459b      	cmp	fp, r3
 8008f02:	db17      	blt.n	8008f34 <__gethex+0x3d4>
 8008f04:	6861      	ldr	r1, [r4, #4]
 8008f06:	9801      	ldr	r0, [sp, #4]
 8008f08:	3101      	adds	r1, #1
 8008f0a:	f7fe f823 	bl	8006f54 <_Balloc>
 8008f0e:	4681      	mov	r9, r0
 8008f10:	b918      	cbnz	r0, 8008f1a <__gethex+0x3ba>
 8008f12:	4602      	mov	r2, r0
 8008f14:	2184      	movs	r1, #132	@ 0x84
 8008f16:	4b19      	ldr	r3, [pc, #100]	@ (8008f7c <__gethex+0x41c>)
 8008f18:	e6c5      	b.n	8008ca6 <__gethex+0x146>
 8008f1a:	6922      	ldr	r2, [r4, #16]
 8008f1c:	f104 010c 	add.w	r1, r4, #12
 8008f20:	3202      	adds	r2, #2
 8008f22:	0092      	lsls	r2, r2, #2
 8008f24:	300c      	adds	r0, #12
 8008f26:	f7ff fd6d 	bl	8008a04 <memcpy>
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	9801      	ldr	r0, [sp, #4]
 8008f2e:	f7fe f851 	bl	8006fd4 <_Bfree>
 8008f32:	464c      	mov	r4, r9
 8008f34:	6923      	ldr	r3, [r4, #16]
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	6122      	str	r2, [r4, #16]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f40:	615a      	str	r2, [r3, #20]
 8008f42:	e7be      	b.n	8008ec2 <__gethex+0x362>
 8008f44:	6922      	ldr	r2, [r4, #16]
 8008f46:	455a      	cmp	r2, fp
 8008f48:	dd0b      	ble.n	8008f62 <__gethex+0x402>
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f7ff fd9f 	bl	8008a90 <rshift>
 8008f52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f56:	3701      	adds	r7, #1
 8008f58:	42bb      	cmp	r3, r7
 8008f5a:	f6ff aee0 	blt.w	8008d1e <__gethex+0x1be>
 8008f5e:	2501      	movs	r5, #1
 8008f60:	e7c2      	b.n	8008ee8 <__gethex+0x388>
 8008f62:	f016 061f 	ands.w	r6, r6, #31
 8008f66:	d0fa      	beq.n	8008f5e <__gethex+0x3fe>
 8008f68:	4453      	add	r3, sl
 8008f6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f6e:	f7fe f8e3 	bl	8007138 <__hi0bits>
 8008f72:	f1c6 0620 	rsb	r6, r6, #32
 8008f76:	42b0      	cmp	r0, r6
 8008f78:	dbe7      	blt.n	8008f4a <__gethex+0x3ea>
 8008f7a:	e7f0      	b.n	8008f5e <__gethex+0x3fe>
 8008f7c:	0800989b 	.word	0x0800989b

08008f80 <L_shift>:
 8008f80:	f1c2 0208 	rsb	r2, r2, #8
 8008f84:	0092      	lsls	r2, r2, #2
 8008f86:	b570      	push	{r4, r5, r6, lr}
 8008f88:	f1c2 0620 	rsb	r6, r2, #32
 8008f8c:	6843      	ldr	r3, [r0, #4]
 8008f8e:	6804      	ldr	r4, [r0, #0]
 8008f90:	fa03 f506 	lsl.w	r5, r3, r6
 8008f94:	432c      	orrs	r4, r5
 8008f96:	40d3      	lsrs	r3, r2
 8008f98:	6004      	str	r4, [r0, #0]
 8008f9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f9e:	4288      	cmp	r0, r1
 8008fa0:	d3f4      	bcc.n	8008f8c <L_shift+0xc>
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}

08008fa4 <__match>:
 8008fa4:	b530      	push	{r4, r5, lr}
 8008fa6:	6803      	ldr	r3, [r0, #0]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fae:	b914      	cbnz	r4, 8008fb6 <__match+0x12>
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	bd30      	pop	{r4, r5, pc}
 8008fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008fbe:	2d19      	cmp	r5, #25
 8008fc0:	bf98      	it	ls
 8008fc2:	3220      	addls	r2, #32
 8008fc4:	42a2      	cmp	r2, r4
 8008fc6:	d0f0      	beq.n	8008faa <__match+0x6>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e7f3      	b.n	8008fb4 <__match+0x10>

08008fcc <__hexnan>:
 8008fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	2500      	movs	r5, #0
 8008fd2:	680b      	ldr	r3, [r1, #0]
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	115e      	asrs	r6, r3, #5
 8008fd8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008fdc:	f013 031f 	ands.w	r3, r3, #31
 8008fe0:	bf18      	it	ne
 8008fe2:	3604      	addne	r6, #4
 8008fe4:	1f37      	subs	r7, r6, #4
 8008fe6:	4690      	mov	r8, r2
 8008fe8:	46b9      	mov	r9, r7
 8008fea:	463c      	mov	r4, r7
 8008fec:	46ab      	mov	fp, r5
 8008fee:	b087      	sub	sp, #28
 8008ff0:	6801      	ldr	r1, [r0, #0]
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ff8:	9502      	str	r5, [sp, #8]
 8008ffa:	784a      	ldrb	r2, [r1, #1]
 8008ffc:	1c4b      	adds	r3, r1, #1
 8008ffe:	9303      	str	r3, [sp, #12]
 8009000:	b342      	cbz	r2, 8009054 <__hexnan+0x88>
 8009002:	4610      	mov	r0, r2
 8009004:	9105      	str	r1, [sp, #20]
 8009006:	9204      	str	r2, [sp, #16]
 8009008:	f7ff fd95 	bl	8008b36 <__hexdig_fun>
 800900c:	2800      	cmp	r0, #0
 800900e:	d151      	bne.n	80090b4 <__hexnan+0xe8>
 8009010:	9a04      	ldr	r2, [sp, #16]
 8009012:	9905      	ldr	r1, [sp, #20]
 8009014:	2a20      	cmp	r2, #32
 8009016:	d818      	bhi.n	800904a <__hexnan+0x7e>
 8009018:	9b02      	ldr	r3, [sp, #8]
 800901a:	459b      	cmp	fp, r3
 800901c:	dd13      	ble.n	8009046 <__hexnan+0x7a>
 800901e:	454c      	cmp	r4, r9
 8009020:	d206      	bcs.n	8009030 <__hexnan+0x64>
 8009022:	2d07      	cmp	r5, #7
 8009024:	dc04      	bgt.n	8009030 <__hexnan+0x64>
 8009026:	462a      	mov	r2, r5
 8009028:	4649      	mov	r1, r9
 800902a:	4620      	mov	r0, r4
 800902c:	f7ff ffa8 	bl	8008f80 <L_shift>
 8009030:	4544      	cmp	r4, r8
 8009032:	d952      	bls.n	80090da <__hexnan+0x10e>
 8009034:	2300      	movs	r3, #0
 8009036:	f1a4 0904 	sub.w	r9, r4, #4
 800903a:	f844 3c04 	str.w	r3, [r4, #-4]
 800903e:	461d      	mov	r5, r3
 8009040:	464c      	mov	r4, r9
 8009042:	f8cd b008 	str.w	fp, [sp, #8]
 8009046:	9903      	ldr	r1, [sp, #12]
 8009048:	e7d7      	b.n	8008ffa <__hexnan+0x2e>
 800904a:	2a29      	cmp	r2, #41	@ 0x29
 800904c:	d157      	bne.n	80090fe <__hexnan+0x132>
 800904e:	3102      	adds	r1, #2
 8009050:	f8ca 1000 	str.w	r1, [sl]
 8009054:	f1bb 0f00 	cmp.w	fp, #0
 8009058:	d051      	beq.n	80090fe <__hexnan+0x132>
 800905a:	454c      	cmp	r4, r9
 800905c:	d206      	bcs.n	800906c <__hexnan+0xa0>
 800905e:	2d07      	cmp	r5, #7
 8009060:	dc04      	bgt.n	800906c <__hexnan+0xa0>
 8009062:	462a      	mov	r2, r5
 8009064:	4649      	mov	r1, r9
 8009066:	4620      	mov	r0, r4
 8009068:	f7ff ff8a 	bl	8008f80 <L_shift>
 800906c:	4544      	cmp	r4, r8
 800906e:	d936      	bls.n	80090de <__hexnan+0x112>
 8009070:	4623      	mov	r3, r4
 8009072:	f1a8 0204 	sub.w	r2, r8, #4
 8009076:	f853 1b04 	ldr.w	r1, [r3], #4
 800907a:	429f      	cmp	r7, r3
 800907c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009080:	d2f9      	bcs.n	8009076 <__hexnan+0xaa>
 8009082:	1b3b      	subs	r3, r7, r4
 8009084:	f023 0303 	bic.w	r3, r3, #3
 8009088:	3304      	adds	r3, #4
 800908a:	3401      	adds	r4, #1
 800908c:	3e03      	subs	r6, #3
 800908e:	42b4      	cmp	r4, r6
 8009090:	bf88      	it	hi
 8009092:	2304      	movhi	r3, #4
 8009094:	2200      	movs	r2, #0
 8009096:	4443      	add	r3, r8
 8009098:	f843 2b04 	str.w	r2, [r3], #4
 800909c:	429f      	cmp	r7, r3
 800909e:	d2fb      	bcs.n	8009098 <__hexnan+0xcc>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	b91b      	cbnz	r3, 80090ac <__hexnan+0xe0>
 80090a4:	4547      	cmp	r7, r8
 80090a6:	d128      	bne.n	80090fa <__hexnan+0x12e>
 80090a8:	2301      	movs	r3, #1
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	2005      	movs	r0, #5
 80090ae:	b007      	add	sp, #28
 80090b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b4:	3501      	adds	r5, #1
 80090b6:	2d08      	cmp	r5, #8
 80090b8:	f10b 0b01 	add.w	fp, fp, #1
 80090bc:	dd06      	ble.n	80090cc <__hexnan+0x100>
 80090be:	4544      	cmp	r4, r8
 80090c0:	d9c1      	bls.n	8009046 <__hexnan+0x7a>
 80090c2:	2300      	movs	r3, #0
 80090c4:	2501      	movs	r5, #1
 80090c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80090ca:	3c04      	subs	r4, #4
 80090cc:	6822      	ldr	r2, [r4, #0]
 80090ce:	f000 000f 	and.w	r0, r0, #15
 80090d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80090d6:	6020      	str	r0, [r4, #0]
 80090d8:	e7b5      	b.n	8009046 <__hexnan+0x7a>
 80090da:	2508      	movs	r5, #8
 80090dc:	e7b3      	b.n	8009046 <__hexnan+0x7a>
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d0dd      	beq.n	80090a0 <__hexnan+0xd4>
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090e8:	f1c3 0320 	rsb	r3, r3, #32
 80090ec:	40da      	lsrs	r2, r3
 80090ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80090f2:	4013      	ands	r3, r2
 80090f4:	f846 3c04 	str.w	r3, [r6, #-4]
 80090f8:	e7d2      	b.n	80090a0 <__hexnan+0xd4>
 80090fa:	3f04      	subs	r7, #4
 80090fc:	e7d0      	b.n	80090a0 <__hexnan+0xd4>
 80090fe:	2004      	movs	r0, #4
 8009100:	e7d5      	b.n	80090ae <__hexnan+0xe2>

08009102 <__ascii_mbtowc>:
 8009102:	b082      	sub	sp, #8
 8009104:	b901      	cbnz	r1, 8009108 <__ascii_mbtowc+0x6>
 8009106:	a901      	add	r1, sp, #4
 8009108:	b142      	cbz	r2, 800911c <__ascii_mbtowc+0x1a>
 800910a:	b14b      	cbz	r3, 8009120 <__ascii_mbtowc+0x1e>
 800910c:	7813      	ldrb	r3, [r2, #0]
 800910e:	600b      	str	r3, [r1, #0]
 8009110:	7812      	ldrb	r2, [r2, #0]
 8009112:	1e10      	subs	r0, r2, #0
 8009114:	bf18      	it	ne
 8009116:	2001      	movne	r0, #1
 8009118:	b002      	add	sp, #8
 800911a:	4770      	bx	lr
 800911c:	4610      	mov	r0, r2
 800911e:	e7fb      	b.n	8009118 <__ascii_mbtowc+0x16>
 8009120:	f06f 0001 	mvn.w	r0, #1
 8009124:	e7f8      	b.n	8009118 <__ascii_mbtowc+0x16>

08009126 <_realloc_r>:
 8009126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912a:	4607      	mov	r7, r0
 800912c:	4614      	mov	r4, r2
 800912e:	460d      	mov	r5, r1
 8009130:	b921      	cbnz	r1, 800913c <_realloc_r+0x16>
 8009132:	4611      	mov	r1, r2
 8009134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009138:	f7fd be80 	b.w	8006e3c <_malloc_r>
 800913c:	b92a      	cbnz	r2, 800914a <_realloc_r+0x24>
 800913e:	f7fd fe0b 	bl	8006d58 <_free_r>
 8009142:	4625      	mov	r5, r4
 8009144:	4628      	mov	r0, r5
 8009146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914a:	f000 f840 	bl	80091ce <_malloc_usable_size_r>
 800914e:	4284      	cmp	r4, r0
 8009150:	4606      	mov	r6, r0
 8009152:	d802      	bhi.n	800915a <_realloc_r+0x34>
 8009154:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009158:	d8f4      	bhi.n	8009144 <_realloc_r+0x1e>
 800915a:	4621      	mov	r1, r4
 800915c:	4638      	mov	r0, r7
 800915e:	f7fd fe6d 	bl	8006e3c <_malloc_r>
 8009162:	4680      	mov	r8, r0
 8009164:	b908      	cbnz	r0, 800916a <_realloc_r+0x44>
 8009166:	4645      	mov	r5, r8
 8009168:	e7ec      	b.n	8009144 <_realloc_r+0x1e>
 800916a:	42b4      	cmp	r4, r6
 800916c:	4622      	mov	r2, r4
 800916e:	4629      	mov	r1, r5
 8009170:	bf28      	it	cs
 8009172:	4632      	movcs	r2, r6
 8009174:	f7ff fc46 	bl	8008a04 <memcpy>
 8009178:	4629      	mov	r1, r5
 800917a:	4638      	mov	r0, r7
 800917c:	f7fd fdec 	bl	8006d58 <_free_r>
 8009180:	e7f1      	b.n	8009166 <_realloc_r+0x40>

08009182 <__ascii_wctomb>:
 8009182:	4603      	mov	r3, r0
 8009184:	4608      	mov	r0, r1
 8009186:	b141      	cbz	r1, 800919a <__ascii_wctomb+0x18>
 8009188:	2aff      	cmp	r2, #255	@ 0xff
 800918a:	d904      	bls.n	8009196 <__ascii_wctomb+0x14>
 800918c:	228a      	movs	r2, #138	@ 0x8a
 800918e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	4770      	bx	lr
 8009196:	2001      	movs	r0, #1
 8009198:	700a      	strb	r2, [r1, #0]
 800919a:	4770      	bx	lr

0800919c <fiprintf>:
 800919c:	b40e      	push	{r1, r2, r3}
 800919e:	b503      	push	{r0, r1, lr}
 80091a0:	4601      	mov	r1, r0
 80091a2:	ab03      	add	r3, sp, #12
 80091a4:	4805      	ldr	r0, [pc, #20]	@ (80091bc <fiprintf+0x20>)
 80091a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091aa:	6800      	ldr	r0, [r0, #0]
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	f000 f83d 	bl	800922c <_vfiprintf_r>
 80091b2:	b002      	add	sp, #8
 80091b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091b8:	b003      	add	sp, #12
 80091ba:	4770      	bx	lr
 80091bc:	2000001c 	.word	0x2000001c

080091c0 <abort>:
 80091c0:	2006      	movs	r0, #6
 80091c2:	b508      	push	{r3, lr}
 80091c4:	f000 fa06 	bl	80095d4 <raise>
 80091c8:	2001      	movs	r0, #1
 80091ca:	f7f8 fabc 	bl	8001746 <_exit>

080091ce <_malloc_usable_size_r>:
 80091ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d2:	1f18      	subs	r0, r3, #4
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bfbc      	itt	lt
 80091d8:	580b      	ldrlt	r3, [r1, r0]
 80091da:	18c0      	addlt	r0, r0, r3
 80091dc:	4770      	bx	lr

080091de <__sfputc_r>:
 80091de:	6893      	ldr	r3, [r2, #8]
 80091e0:	b410      	push	{r4}
 80091e2:	3b01      	subs	r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	6093      	str	r3, [r2, #8]
 80091e8:	da07      	bge.n	80091fa <__sfputc_r+0x1c>
 80091ea:	6994      	ldr	r4, [r2, #24]
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	db01      	blt.n	80091f4 <__sfputc_r+0x16>
 80091f0:	290a      	cmp	r1, #10
 80091f2:	d102      	bne.n	80091fa <__sfputc_r+0x1c>
 80091f4:	bc10      	pop	{r4}
 80091f6:	f000 b931 	b.w	800945c <__swbuf_r>
 80091fa:	6813      	ldr	r3, [r2, #0]
 80091fc:	1c58      	adds	r0, r3, #1
 80091fe:	6010      	str	r0, [r2, #0]
 8009200:	7019      	strb	r1, [r3, #0]
 8009202:	4608      	mov	r0, r1
 8009204:	bc10      	pop	{r4}
 8009206:	4770      	bx	lr

08009208 <__sfputs_r>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	4614      	mov	r4, r2
 8009210:	18d5      	adds	r5, r2, r3
 8009212:	42ac      	cmp	r4, r5
 8009214:	d101      	bne.n	800921a <__sfputs_r+0x12>
 8009216:	2000      	movs	r0, #0
 8009218:	e007      	b.n	800922a <__sfputs_r+0x22>
 800921a:	463a      	mov	r2, r7
 800921c:	4630      	mov	r0, r6
 800921e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009222:	f7ff ffdc 	bl	80091de <__sfputc_r>
 8009226:	1c43      	adds	r3, r0, #1
 8009228:	d1f3      	bne.n	8009212 <__sfputs_r+0xa>
 800922a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800922c <_vfiprintf_r>:
 800922c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009230:	460d      	mov	r5, r1
 8009232:	4614      	mov	r4, r2
 8009234:	4698      	mov	r8, r3
 8009236:	4606      	mov	r6, r0
 8009238:	b09d      	sub	sp, #116	@ 0x74
 800923a:	b118      	cbz	r0, 8009244 <_vfiprintf_r+0x18>
 800923c:	6a03      	ldr	r3, [r0, #32]
 800923e:	b90b      	cbnz	r3, 8009244 <_vfiprintf_r+0x18>
 8009240:	f7fc fdfe 	bl	8005e40 <__sinit>
 8009244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009246:	07d9      	lsls	r1, r3, #31
 8009248:	d405      	bmi.n	8009256 <_vfiprintf_r+0x2a>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	059a      	lsls	r2, r3, #22
 800924e:	d402      	bmi.n	8009256 <_vfiprintf_r+0x2a>
 8009250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009252:	f7fc ff0e 	bl	8006072 <__retarget_lock_acquire_recursive>
 8009256:	89ab      	ldrh	r3, [r5, #12]
 8009258:	071b      	lsls	r3, r3, #28
 800925a:	d501      	bpl.n	8009260 <_vfiprintf_r+0x34>
 800925c:	692b      	ldr	r3, [r5, #16]
 800925e:	b99b      	cbnz	r3, 8009288 <_vfiprintf_r+0x5c>
 8009260:	4629      	mov	r1, r5
 8009262:	4630      	mov	r0, r6
 8009264:	f000 f938 	bl	80094d8 <__swsetup_r>
 8009268:	b170      	cbz	r0, 8009288 <_vfiprintf_r+0x5c>
 800926a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800926c:	07dc      	lsls	r4, r3, #31
 800926e:	d504      	bpl.n	800927a <_vfiprintf_r+0x4e>
 8009270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009274:	b01d      	add	sp, #116	@ 0x74
 8009276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927a:	89ab      	ldrh	r3, [r5, #12]
 800927c:	0598      	lsls	r0, r3, #22
 800927e:	d4f7      	bmi.n	8009270 <_vfiprintf_r+0x44>
 8009280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009282:	f7fc fef7 	bl	8006074 <__retarget_lock_release_recursive>
 8009286:	e7f3      	b.n	8009270 <_vfiprintf_r+0x44>
 8009288:	2300      	movs	r3, #0
 800928a:	9309      	str	r3, [sp, #36]	@ 0x24
 800928c:	2320      	movs	r3, #32
 800928e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009292:	2330      	movs	r3, #48	@ 0x30
 8009294:	f04f 0901 	mov.w	r9, #1
 8009298:	f8cd 800c 	str.w	r8, [sp, #12]
 800929c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009448 <_vfiprintf_r+0x21c>
 80092a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092a4:	4623      	mov	r3, r4
 80092a6:	469a      	mov	sl, r3
 80092a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ac:	b10a      	cbz	r2, 80092b2 <_vfiprintf_r+0x86>
 80092ae:	2a25      	cmp	r2, #37	@ 0x25
 80092b0:	d1f9      	bne.n	80092a6 <_vfiprintf_r+0x7a>
 80092b2:	ebba 0b04 	subs.w	fp, sl, r4
 80092b6:	d00b      	beq.n	80092d0 <_vfiprintf_r+0xa4>
 80092b8:	465b      	mov	r3, fp
 80092ba:	4622      	mov	r2, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	4630      	mov	r0, r6
 80092c0:	f7ff ffa2 	bl	8009208 <__sfputs_r>
 80092c4:	3001      	adds	r0, #1
 80092c6:	f000 80a7 	beq.w	8009418 <_vfiprintf_r+0x1ec>
 80092ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092cc:	445a      	add	r2, fp
 80092ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80092d0:	f89a 3000 	ldrb.w	r3, [sl]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 809f 	beq.w	8009418 <_vfiprintf_r+0x1ec>
 80092da:	2300      	movs	r3, #0
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e4:	f10a 0a01 	add.w	sl, sl, #1
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	9307      	str	r3, [sp, #28]
 80092ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80092f2:	4654      	mov	r4, sl
 80092f4:	2205      	movs	r2, #5
 80092f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fa:	4853      	ldr	r0, [pc, #332]	@ (8009448 <_vfiprintf_r+0x21c>)
 80092fc:	f7fc febb 	bl	8006076 <memchr>
 8009300:	9a04      	ldr	r2, [sp, #16]
 8009302:	b9d8      	cbnz	r0, 800933c <_vfiprintf_r+0x110>
 8009304:	06d1      	lsls	r1, r2, #27
 8009306:	bf44      	itt	mi
 8009308:	2320      	movmi	r3, #32
 800930a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800930e:	0713      	lsls	r3, r2, #28
 8009310:	bf44      	itt	mi
 8009312:	232b      	movmi	r3, #43	@ 0x2b
 8009314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009318:	f89a 3000 	ldrb.w	r3, [sl]
 800931c:	2b2a      	cmp	r3, #42	@ 0x2a
 800931e:	d015      	beq.n	800934c <_vfiprintf_r+0x120>
 8009320:	4654      	mov	r4, sl
 8009322:	2000      	movs	r0, #0
 8009324:	f04f 0c0a 	mov.w	ip, #10
 8009328:	9a07      	ldr	r2, [sp, #28]
 800932a:	4621      	mov	r1, r4
 800932c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009330:	3b30      	subs	r3, #48	@ 0x30
 8009332:	2b09      	cmp	r3, #9
 8009334:	d94b      	bls.n	80093ce <_vfiprintf_r+0x1a2>
 8009336:	b1b0      	cbz	r0, 8009366 <_vfiprintf_r+0x13a>
 8009338:	9207      	str	r2, [sp, #28]
 800933a:	e014      	b.n	8009366 <_vfiprintf_r+0x13a>
 800933c:	eba0 0308 	sub.w	r3, r0, r8
 8009340:	fa09 f303 	lsl.w	r3, r9, r3
 8009344:	4313      	orrs	r3, r2
 8009346:	46a2      	mov	sl, r4
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	e7d2      	b.n	80092f2 <_vfiprintf_r+0xc6>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	1d19      	adds	r1, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	9103      	str	r1, [sp, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfbb      	ittet	lt
 8009358:	425b      	neglt	r3, r3
 800935a:	f042 0202 	orrlt.w	r2, r2, #2
 800935e:	9307      	strge	r3, [sp, #28]
 8009360:	9307      	strlt	r3, [sp, #28]
 8009362:	bfb8      	it	lt
 8009364:	9204      	strlt	r2, [sp, #16]
 8009366:	7823      	ldrb	r3, [r4, #0]
 8009368:	2b2e      	cmp	r3, #46	@ 0x2e
 800936a:	d10a      	bne.n	8009382 <_vfiprintf_r+0x156>
 800936c:	7863      	ldrb	r3, [r4, #1]
 800936e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009370:	d132      	bne.n	80093d8 <_vfiprintf_r+0x1ac>
 8009372:	9b03      	ldr	r3, [sp, #12]
 8009374:	3402      	adds	r4, #2
 8009376:	1d1a      	adds	r2, r3, #4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	9203      	str	r2, [sp, #12]
 800937c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009380:	9305      	str	r3, [sp, #20]
 8009382:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800944c <_vfiprintf_r+0x220>
 8009386:	2203      	movs	r2, #3
 8009388:	4650      	mov	r0, sl
 800938a:	7821      	ldrb	r1, [r4, #0]
 800938c:	f7fc fe73 	bl	8006076 <memchr>
 8009390:	b138      	cbz	r0, 80093a2 <_vfiprintf_r+0x176>
 8009392:	2240      	movs	r2, #64	@ 0x40
 8009394:	9b04      	ldr	r3, [sp, #16]
 8009396:	eba0 000a 	sub.w	r0, r0, sl
 800939a:	4082      	lsls	r2, r0
 800939c:	4313      	orrs	r3, r2
 800939e:	3401      	adds	r4, #1
 80093a0:	9304      	str	r3, [sp, #16]
 80093a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a6:	2206      	movs	r2, #6
 80093a8:	4829      	ldr	r0, [pc, #164]	@ (8009450 <_vfiprintf_r+0x224>)
 80093aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093ae:	f7fc fe62 	bl	8006076 <memchr>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d03f      	beq.n	8009436 <_vfiprintf_r+0x20a>
 80093b6:	4b27      	ldr	r3, [pc, #156]	@ (8009454 <_vfiprintf_r+0x228>)
 80093b8:	bb1b      	cbnz	r3, 8009402 <_vfiprintf_r+0x1d6>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	3307      	adds	r3, #7
 80093be:	f023 0307 	bic.w	r3, r3, #7
 80093c2:	3308      	adds	r3, #8
 80093c4:	9303      	str	r3, [sp, #12]
 80093c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c8:	443b      	add	r3, r7
 80093ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80093cc:	e76a      	b.n	80092a4 <_vfiprintf_r+0x78>
 80093ce:	460c      	mov	r4, r1
 80093d0:	2001      	movs	r0, #1
 80093d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d6:	e7a8      	b.n	800932a <_vfiprintf_r+0xfe>
 80093d8:	2300      	movs	r3, #0
 80093da:	f04f 0c0a 	mov.w	ip, #10
 80093de:	4619      	mov	r1, r3
 80093e0:	3401      	adds	r4, #1
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	4620      	mov	r0, r4
 80093e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ea:	3a30      	subs	r2, #48	@ 0x30
 80093ec:	2a09      	cmp	r2, #9
 80093ee:	d903      	bls.n	80093f8 <_vfiprintf_r+0x1cc>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0c6      	beq.n	8009382 <_vfiprintf_r+0x156>
 80093f4:	9105      	str	r1, [sp, #20]
 80093f6:	e7c4      	b.n	8009382 <_vfiprintf_r+0x156>
 80093f8:	4604      	mov	r4, r0
 80093fa:	2301      	movs	r3, #1
 80093fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009400:	e7f0      	b.n	80093e4 <_vfiprintf_r+0x1b8>
 8009402:	ab03      	add	r3, sp, #12
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	462a      	mov	r2, r5
 8009408:	4630      	mov	r0, r6
 800940a:	4b13      	ldr	r3, [pc, #76]	@ (8009458 <_vfiprintf_r+0x22c>)
 800940c:	a904      	add	r1, sp, #16
 800940e:	f7fb fec5 	bl	800519c <_printf_float>
 8009412:	4607      	mov	r7, r0
 8009414:	1c78      	adds	r0, r7, #1
 8009416:	d1d6      	bne.n	80093c6 <_vfiprintf_r+0x19a>
 8009418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800941a:	07d9      	lsls	r1, r3, #31
 800941c:	d405      	bmi.n	800942a <_vfiprintf_r+0x1fe>
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	059a      	lsls	r2, r3, #22
 8009422:	d402      	bmi.n	800942a <_vfiprintf_r+0x1fe>
 8009424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009426:	f7fc fe25 	bl	8006074 <__retarget_lock_release_recursive>
 800942a:	89ab      	ldrh	r3, [r5, #12]
 800942c:	065b      	lsls	r3, r3, #25
 800942e:	f53f af1f 	bmi.w	8009270 <_vfiprintf_r+0x44>
 8009432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009434:	e71e      	b.n	8009274 <_vfiprintf_r+0x48>
 8009436:	ab03      	add	r3, sp, #12
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	462a      	mov	r2, r5
 800943c:	4630      	mov	r0, r6
 800943e:	4b06      	ldr	r3, [pc, #24]	@ (8009458 <_vfiprintf_r+0x22c>)
 8009440:	a904      	add	r1, sp, #16
 8009442:	f7fc f949 	bl	80056d8 <_printf_i>
 8009446:	e7e4      	b.n	8009412 <_vfiprintf_r+0x1e6>
 8009448:	08009907 	.word	0x08009907
 800944c:	0800990d 	.word	0x0800990d
 8009450:	08009911 	.word	0x08009911
 8009454:	0800519d 	.word	0x0800519d
 8009458:	08009209 	.word	0x08009209

0800945c <__swbuf_r>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	460e      	mov	r6, r1
 8009460:	4614      	mov	r4, r2
 8009462:	4605      	mov	r5, r0
 8009464:	b118      	cbz	r0, 800946e <__swbuf_r+0x12>
 8009466:	6a03      	ldr	r3, [r0, #32]
 8009468:	b90b      	cbnz	r3, 800946e <__swbuf_r+0x12>
 800946a:	f7fc fce9 	bl	8005e40 <__sinit>
 800946e:	69a3      	ldr	r3, [r4, #24]
 8009470:	60a3      	str	r3, [r4, #8]
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	071a      	lsls	r2, r3, #28
 8009476:	d501      	bpl.n	800947c <__swbuf_r+0x20>
 8009478:	6923      	ldr	r3, [r4, #16]
 800947a:	b943      	cbnz	r3, 800948e <__swbuf_r+0x32>
 800947c:	4621      	mov	r1, r4
 800947e:	4628      	mov	r0, r5
 8009480:	f000 f82a 	bl	80094d8 <__swsetup_r>
 8009484:	b118      	cbz	r0, 800948e <__swbuf_r+0x32>
 8009486:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800948a:	4638      	mov	r0, r7
 800948c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	6922      	ldr	r2, [r4, #16]
 8009492:	b2f6      	uxtb	r6, r6
 8009494:	1a98      	subs	r0, r3, r2
 8009496:	6963      	ldr	r3, [r4, #20]
 8009498:	4637      	mov	r7, r6
 800949a:	4283      	cmp	r3, r0
 800949c:	dc05      	bgt.n	80094aa <__swbuf_r+0x4e>
 800949e:	4621      	mov	r1, r4
 80094a0:	4628      	mov	r0, r5
 80094a2:	f7ff fa4b 	bl	800893c <_fflush_r>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d1ed      	bne.n	8009486 <__swbuf_r+0x2a>
 80094aa:	68a3      	ldr	r3, [r4, #8]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	60a3      	str	r3, [r4, #8]
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	6022      	str	r2, [r4, #0]
 80094b6:	701e      	strb	r6, [r3, #0]
 80094b8:	6962      	ldr	r2, [r4, #20]
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	429a      	cmp	r2, r3
 80094be:	d004      	beq.n	80094ca <__swbuf_r+0x6e>
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	07db      	lsls	r3, r3, #31
 80094c4:	d5e1      	bpl.n	800948a <__swbuf_r+0x2e>
 80094c6:	2e0a      	cmp	r6, #10
 80094c8:	d1df      	bne.n	800948a <__swbuf_r+0x2e>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4628      	mov	r0, r5
 80094ce:	f7ff fa35 	bl	800893c <_fflush_r>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d0d9      	beq.n	800948a <__swbuf_r+0x2e>
 80094d6:	e7d6      	b.n	8009486 <__swbuf_r+0x2a>

080094d8 <__swsetup_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4b29      	ldr	r3, [pc, #164]	@ (8009580 <__swsetup_r+0xa8>)
 80094dc:	4605      	mov	r5, r0
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	460c      	mov	r4, r1
 80094e2:	b118      	cbz	r0, 80094ec <__swsetup_r+0x14>
 80094e4:	6a03      	ldr	r3, [r0, #32]
 80094e6:	b90b      	cbnz	r3, 80094ec <__swsetup_r+0x14>
 80094e8:	f7fc fcaa 	bl	8005e40 <__sinit>
 80094ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f0:	0719      	lsls	r1, r3, #28
 80094f2:	d422      	bmi.n	800953a <__swsetup_r+0x62>
 80094f4:	06da      	lsls	r2, r3, #27
 80094f6:	d407      	bmi.n	8009508 <__swsetup_r+0x30>
 80094f8:	2209      	movs	r2, #9
 80094fa:	602a      	str	r2, [r5, #0]
 80094fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	e033      	b.n	8009570 <__swsetup_r+0x98>
 8009508:	0758      	lsls	r0, r3, #29
 800950a:	d512      	bpl.n	8009532 <__swsetup_r+0x5a>
 800950c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800950e:	b141      	cbz	r1, 8009522 <__swsetup_r+0x4a>
 8009510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009514:	4299      	cmp	r1, r3
 8009516:	d002      	beq.n	800951e <__swsetup_r+0x46>
 8009518:	4628      	mov	r0, r5
 800951a:	f7fd fc1d 	bl	8006d58 <_free_r>
 800951e:	2300      	movs	r3, #0
 8009520:	6363      	str	r3, [r4, #52]	@ 0x34
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	2300      	movs	r3, #0
 800952c:	6063      	str	r3, [r4, #4]
 800952e:	6923      	ldr	r3, [r4, #16]
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f043 0308 	orr.w	r3, r3, #8
 8009538:	81a3      	strh	r3, [r4, #12]
 800953a:	6923      	ldr	r3, [r4, #16]
 800953c:	b94b      	cbnz	r3, 8009552 <__swsetup_r+0x7a>
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009548:	d003      	beq.n	8009552 <__swsetup_r+0x7a>
 800954a:	4621      	mov	r1, r4
 800954c:	4628      	mov	r0, r5
 800954e:	f000 f882 	bl	8009656 <__smakebuf_r>
 8009552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009556:	f013 0201 	ands.w	r2, r3, #1
 800955a:	d00a      	beq.n	8009572 <__swsetup_r+0x9a>
 800955c:	2200      	movs	r2, #0
 800955e:	60a2      	str	r2, [r4, #8]
 8009560:	6962      	ldr	r2, [r4, #20]
 8009562:	4252      	negs	r2, r2
 8009564:	61a2      	str	r2, [r4, #24]
 8009566:	6922      	ldr	r2, [r4, #16]
 8009568:	b942      	cbnz	r2, 800957c <__swsetup_r+0xa4>
 800956a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800956e:	d1c5      	bne.n	80094fc <__swsetup_r+0x24>
 8009570:	bd38      	pop	{r3, r4, r5, pc}
 8009572:	0799      	lsls	r1, r3, #30
 8009574:	bf58      	it	pl
 8009576:	6962      	ldrpl	r2, [r4, #20]
 8009578:	60a2      	str	r2, [r4, #8]
 800957a:	e7f4      	b.n	8009566 <__swsetup_r+0x8e>
 800957c:	2000      	movs	r0, #0
 800957e:	e7f7      	b.n	8009570 <__swsetup_r+0x98>
 8009580:	2000001c 	.word	0x2000001c

08009584 <_raise_r>:
 8009584:	291f      	cmp	r1, #31
 8009586:	b538      	push	{r3, r4, r5, lr}
 8009588:	4605      	mov	r5, r0
 800958a:	460c      	mov	r4, r1
 800958c:	d904      	bls.n	8009598 <_raise_r+0x14>
 800958e:	2316      	movs	r3, #22
 8009590:	6003      	str	r3, [r0, #0]
 8009592:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800959a:	b112      	cbz	r2, 80095a2 <_raise_r+0x1e>
 800959c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095a0:	b94b      	cbnz	r3, 80095b6 <_raise_r+0x32>
 80095a2:	4628      	mov	r0, r5
 80095a4:	f000 f830 	bl	8009608 <_getpid_r>
 80095a8:	4622      	mov	r2, r4
 80095aa:	4601      	mov	r1, r0
 80095ac:	4628      	mov	r0, r5
 80095ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095b2:	f000 b817 	b.w	80095e4 <_kill_r>
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d00a      	beq.n	80095d0 <_raise_r+0x4c>
 80095ba:	1c59      	adds	r1, r3, #1
 80095bc:	d103      	bne.n	80095c6 <_raise_r+0x42>
 80095be:	2316      	movs	r3, #22
 80095c0:	6003      	str	r3, [r0, #0]
 80095c2:	2001      	movs	r0, #1
 80095c4:	e7e7      	b.n	8009596 <_raise_r+0x12>
 80095c6:	2100      	movs	r1, #0
 80095c8:	4620      	mov	r0, r4
 80095ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095ce:	4798      	blx	r3
 80095d0:	2000      	movs	r0, #0
 80095d2:	e7e0      	b.n	8009596 <_raise_r+0x12>

080095d4 <raise>:
 80095d4:	4b02      	ldr	r3, [pc, #8]	@ (80095e0 <raise+0xc>)
 80095d6:	4601      	mov	r1, r0
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	f7ff bfd3 	b.w	8009584 <_raise_r>
 80095de:	bf00      	nop
 80095e0:	2000001c 	.word	0x2000001c

080095e4 <_kill_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	2300      	movs	r3, #0
 80095e8:	4d06      	ldr	r5, [pc, #24]	@ (8009604 <_kill_r+0x20>)
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	4611      	mov	r1, r2
 80095f0:	602b      	str	r3, [r5, #0]
 80095f2:	f7f8 f898 	bl	8001726 <_kill>
 80095f6:	1c43      	adds	r3, r0, #1
 80095f8:	d102      	bne.n	8009600 <_kill_r+0x1c>
 80095fa:	682b      	ldr	r3, [r5, #0]
 80095fc:	b103      	cbz	r3, 8009600 <_kill_r+0x1c>
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	bd38      	pop	{r3, r4, r5, pc}
 8009602:	bf00      	nop
 8009604:	20000468 	.word	0x20000468

08009608 <_getpid_r>:
 8009608:	f7f8 b886 	b.w	8001718 <_getpid>

0800960c <__swhatbuf_r>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	460c      	mov	r4, r1
 8009610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009614:	4615      	mov	r5, r2
 8009616:	2900      	cmp	r1, #0
 8009618:	461e      	mov	r6, r3
 800961a:	b096      	sub	sp, #88	@ 0x58
 800961c:	da0c      	bge.n	8009638 <__swhatbuf_r+0x2c>
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	2100      	movs	r1, #0
 8009622:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009626:	bf14      	ite	ne
 8009628:	2340      	movne	r3, #64	@ 0x40
 800962a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800962e:	2000      	movs	r0, #0
 8009630:	6031      	str	r1, [r6, #0]
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	b016      	add	sp, #88	@ 0x58
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	466a      	mov	r2, sp
 800963a:	f000 f849 	bl	80096d0 <_fstat_r>
 800963e:	2800      	cmp	r0, #0
 8009640:	dbed      	blt.n	800961e <__swhatbuf_r+0x12>
 8009642:	9901      	ldr	r1, [sp, #4]
 8009644:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009648:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800964c:	4259      	negs	r1, r3
 800964e:	4159      	adcs	r1, r3
 8009650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009654:	e7eb      	b.n	800962e <__swhatbuf_r+0x22>

08009656 <__smakebuf_r>:
 8009656:	898b      	ldrh	r3, [r1, #12]
 8009658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800965a:	079d      	lsls	r5, r3, #30
 800965c:	4606      	mov	r6, r0
 800965e:	460c      	mov	r4, r1
 8009660:	d507      	bpl.n	8009672 <__smakebuf_r+0x1c>
 8009662:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	6123      	str	r3, [r4, #16]
 800966a:	2301      	movs	r3, #1
 800966c:	6163      	str	r3, [r4, #20]
 800966e:	b003      	add	sp, #12
 8009670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009672:	466a      	mov	r2, sp
 8009674:	ab01      	add	r3, sp, #4
 8009676:	f7ff ffc9 	bl	800960c <__swhatbuf_r>
 800967a:	9f00      	ldr	r7, [sp, #0]
 800967c:	4605      	mov	r5, r0
 800967e:	4639      	mov	r1, r7
 8009680:	4630      	mov	r0, r6
 8009682:	f7fd fbdb 	bl	8006e3c <_malloc_r>
 8009686:	b948      	cbnz	r0, 800969c <__smakebuf_r+0x46>
 8009688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968c:	059a      	lsls	r2, r3, #22
 800968e:	d4ee      	bmi.n	800966e <__smakebuf_r+0x18>
 8009690:	f023 0303 	bic.w	r3, r3, #3
 8009694:	f043 0302 	orr.w	r3, r3, #2
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	e7e2      	b.n	8009662 <__smakebuf_r+0xc>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a6:	81a3      	strh	r3, [r4, #12]
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	6020      	str	r0, [r4, #0]
 80096ac:	b15b      	cbz	r3, 80096c6 <__smakebuf_r+0x70>
 80096ae:	4630      	mov	r0, r6
 80096b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096b4:	f000 f81e 	bl	80096f4 <_isatty_r>
 80096b8:	b128      	cbz	r0, 80096c6 <__smakebuf_r+0x70>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f023 0303 	bic.w	r3, r3, #3
 80096c0:	f043 0301 	orr.w	r3, r3, #1
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	431d      	orrs	r5, r3
 80096ca:	81a5      	strh	r5, [r4, #12]
 80096cc:	e7cf      	b.n	800966e <__smakebuf_r+0x18>
	...

080096d0 <_fstat_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	2300      	movs	r3, #0
 80096d4:	4d06      	ldr	r5, [pc, #24]	@ (80096f0 <_fstat_r+0x20>)
 80096d6:	4604      	mov	r4, r0
 80096d8:	4608      	mov	r0, r1
 80096da:	4611      	mov	r1, r2
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	f7f8 f881 	bl	80017e4 <_fstat>
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	d102      	bne.n	80096ec <_fstat_r+0x1c>
 80096e6:	682b      	ldr	r3, [r5, #0]
 80096e8:	b103      	cbz	r3, 80096ec <_fstat_r+0x1c>
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	bd38      	pop	{r3, r4, r5, pc}
 80096ee:	bf00      	nop
 80096f0:	20000468 	.word	0x20000468

080096f4 <_isatty_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	2300      	movs	r3, #0
 80096f8:	4d05      	ldr	r5, [pc, #20]	@ (8009710 <_isatty_r+0x1c>)
 80096fa:	4604      	mov	r4, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	602b      	str	r3, [r5, #0]
 8009700:	f7f8 f87f 	bl	8001802 <_isatty>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_isatty_r+0x1a>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_isatty_r+0x1a>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	20000468 	.word	0x20000468

08009714 <_init>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr

08009720 <_fini>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	bf00      	nop
 8009724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009726:	bc08      	pop	{r3}
 8009728:	469e      	mov	lr, r3
 800972a:	4770      	bx	lr
